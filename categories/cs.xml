<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about cs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://cestlaz.github.io/categories/cs.xml"></atom:link><language>en</language><lastBuildDate>Mon, 13 Feb 2017 22:36:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Selecting a starting language - why not Javascript</title><link>http://cestlaz.github.io/posts/starting-with-js/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was catching up with the team at Stuy the other day and they
mentioned that they were periodically getting pushback on their choice
of languages, particularly in the intro class. The pushback was mostly
in the form of "why don't you start them with Javascript?" 
&lt;/p&gt;

&lt;p&gt;
Back in the day, when I created our intro class where we use Scheme,
NetLogo and then later Python, I'd get similar pushback but then it
was "why not Java?", "why not C?", or "whu not C++?"
&lt;/p&gt;

&lt;p&gt;
We had a good discussion on this and I shared my thoughts as to why I
don't like Javascript as a first language and I thought I'd share some
of them here. I'll try to get around to the rationale behind Scheme
and NetLogo in a later post.
&lt;/p&gt;

&lt;p&gt;
To start, let me say that I &lt;b&gt;&lt;b&gt;Love&lt;/b&gt;&lt;/b&gt; Javascript -
particularly when approaching it as a functional language. I also
think every school and situation is different so there are likely
times when Javascript is the right beginner language for the job.
&lt;/p&gt;

&lt;p&gt;
Let's dive in.
&lt;/p&gt;

&lt;p&gt;
Why are some of the pluses for Javascript as an intro language.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Ubiquity and availability:

&lt;p&gt;
If you have a browser, you have Javascript - it's also available
through online IDEs and online lightweight sites like &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt;. 
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Interactivity:

&lt;p&gt;
You can tweak websites almost live, use the HTML5 canvas pretty
interactively and mode
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;It's mainstream
&lt;/li&gt;

&lt;li&gt;It's quick to get up and running
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is all true, but there are also downsides.
&lt;/p&gt;

&lt;p&gt;
One of my big problems with Javascript is the lack of simple solid
educational tooling. I love to use tools like &lt;a href="http://www.drjava.org/"&gt;DrJava&lt;/a&gt;, &lt;a href="http://drpython.sourceforge.net/"&gt;DrPython&lt;/a&gt;, and
&lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt; (formerly DrScheme) with beginners. All simple learning
IDEs. True, you can use a simple online IDE but I haven't found them
to have as strong a learning interface. They also, generally, keep you
in an oversimplified programming sandbox. There's no clean transition
from the sandbox to the real deal - particularly given the non-trivial
state of js build tools and environments. These simple learning IDEs
set the stage and then we can transition to more powerful development environments.
&lt;/p&gt;

&lt;p&gt;
I also prefer, where possible, to have kids learn locally so that they
can learn something about the underlying operating system even if
only at a user level.
&lt;/p&gt;

&lt;p&gt;
A problem relating to the lack of tooling is the fact that a JS
program can fail to run and not give you any meaningful feedback at
all - this is a problem for a beginner. 
&lt;/p&gt;

&lt;p&gt;
Javascript also has all sorts of wonkiness. We have &lt;code&gt;=&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;
which is pretty conventional, but then there's also &lt;code&gt;===&lt;/code&gt;. We have
potentially confusing scoping issues and also some other real
weirdness:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  50&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 50 &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//50&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  56&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '533'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '533&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '533'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For more, check out the this &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;video&lt;/a&gt;. Start watching at about 1:20 -
it's a riot.
&lt;/p&gt;

&lt;p&gt;
All of this weirdness actually makes sense - just not to a beginner. 
&lt;/p&gt;

&lt;p&gt;
Javascript also gives plenty of freedom - there are many ways to do
things. This can be great for the developer but not necessarily ideal
for the learner. Loops, recursion, mapping functions - you name it,
Javascript's got it. I like simpler languages for beginners because
it's easier to get them thinking and problem solving in certain ways
when there tool set is somewhat restricted (more on that when I write
about Scheme).
&lt;/p&gt;

&lt;p&gt;
Finally, the fact that Javascript's a mainstream language can be a
minus. Given its popularity, a beginner class could have at  least a
few kid who've at least played with the language. This can lead them
to think they know more than they do and more importantly, this can
be intimidating to the real newbies who develop the impression that
"everyone knows this but me." A less mainstream language puts everyone
on a level playing field.
&lt;/p&gt;

&lt;p&gt;
Let me say again that I love javascript as a language and before a
student graduates Stuy they can learn all about Javascript, front end
development, some functional programming, and more. It's just not the
right language to start with - at least not at Stuy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>curriculum</category><category>education</category><category>languages</category><guid>http://cestlaz.github.io/posts/starting-with-js/</guid><pubDate>Mon, 13 Feb 2017 13:45:48 GMT</pubDate></item><item><title>Should CS Ed be in bed with the College Board</title><link>http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'm guessing my views  on this aren't very popular -that's OK, every
community needs a curmudgeon.
&lt;/p&gt;

&lt;p&gt;
A few years ago, I cautioned if we weren't careful, once the big
players got involved, CS Ed would go the way of other disciplines, and
not in a good way. It looks like indeed we're well on our way down
that road.
&lt;/p&gt;

&lt;p&gt;
I've ranted before about things like non-profits, drop in and summer
programs. &lt;a href="https://cestlaz.github.io/posts/2015-05-07-learning-takes-time.html/#.WJXSS99vHmE"&gt;STEM Oil Salesmen&lt;/a&gt; &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;
selling easy fixes, exciting kids and parents, using the Think Method
just like Professor Harold Hill only to send the kids off where they
can blame a future teacher for failure.
&lt;/p&gt;

&lt;p&gt;
I've also ranted about teacher preparation and how all the rage is
short term, &lt;a href="https://cestlaz.github.io/posts/scotland/#.WJXT999vHmE"&gt;Superficial PD and scripted curricula&lt;/a&gt;  and my concern that   
once the politicians can say CS is in the schools, &lt;a href="https://cestlaz.github.io/posts/2015-03-04-expedient-vs-good.html/#.WJXT7d9vHmE"&gt;we'll be done&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I've been working towards getting CS to all students for most of my
career and while it's wonderful to see us getting closer to the goal,
I'm seeing more and more signs that my caution is becoming
reality. and CS Ed is going the way of other Ed - aligned to testing
and more to the whims of the power players and politicians than to
teachers and students.
&lt;/p&gt;

&lt;p&gt;
The other week I noticed, &lt;a href="http://teacherblog.code.org/post/156278055294/ap-cs-principles-could-make-history-how-can-we"&gt;this post&lt;/a&gt; by Code.org trying to encourage
more students to take the APCSP exam - not encourage more students
take the class or some other class or to have more students be exposed
to CS but to actually sit for the APCSP exam. That post was followed
by &lt;a href="http://teacherblog.code.org/post/156689658029/ask-your-cs-principles-students-to-star-in-our"&gt;this one&lt;/a&gt; which also highlights actually taking the exam.
&lt;/p&gt;

&lt;p&gt;
This didn't sit well with me. 
&lt;/p&gt;

&lt;p&gt;
What does the exam do for the kid? It doesn't drive instruction - by
that time, any good teacher knows their student and is better served
by using their own &lt;a href="https://cestlaz.github.io/posts/ap-we-dont-trust-teachers/#.WJXbA99vHmE"&gt;assessments&lt;/a&gt;. The college credit thing? I'm
skeptical. Fewer and fewer schools are giving credit for APCSA let
alone this new CS0 non major course. Blanket credit? Since full time
students pay for a range of credits, I'm still skeptical
here. Placement? It's a course for non-majors - what exactly are you
placing out of?
&lt;/p&gt;

&lt;p&gt;
Reasons not to take the exam?
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;If it doesn't do anything for the kid, why take it
&lt;/li&gt;
&lt;li&gt;Stress of taking the exam
&lt;/li&gt;
&lt;li&gt;There are other ways of placing out of courses once in college
&lt;/li&gt;
&lt;li&gt;Save the expense
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As a general rule, I'm against forcing students to sit for
AP exams. At the extreme case, since we've been brainwashed to think
that a school that has lots of kids sitting for exams is good, I've
seen at least one case of a principal having all his kids sit for, and
just about all &lt;b&gt;&lt;b&gt;fail&lt;/b&gt;&lt;/b&gt; AP Calculus - that is, get a 1 or 2 on the exam. This
principal had all his students take the exam, and only 2 scores were 3
or higher. This principal then parlayed his success into a higher
profile gig - he's moved up in the world while setting up his students
to fail.
&lt;/p&gt;

&lt;p&gt;
This follows last year's announcement that code.org was &lt;a href="https://cestlaz.github.io/posts/2015-05-19-code-org-college-board.html/#.WJXbm99vHmE"&gt;partnering with
the College Board&lt;/a&gt; - offering PD to teachers for free if the schools
signed up their students for the PSAT 8/9 - another meaningless
exam. So, we get teacher training light &lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt; as long as the school pays for
the PSAT8/9 for every kid so that the kid can take yet another test
with really no value&lt;sup&gt;&lt;a id="fnr.3" name="fnr.3" class="footref" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
Why should students pay for an AP exam that doesn't do anything for
them? Why should Jane Q Taxpayer pay for exams that only server to
enrich the College Board.
&lt;/p&gt;

&lt;p&gt;
True, The College Board is a big player. They already have much more
influence of American High School education than they should. It's
easy to climb on board the AP train for entre into our schools. The
question is, should we use positions of influence to push efforts that
might help our end but leave collateral damage to students and the public.
&lt;/p&gt;

&lt;p&gt;
I don't doubt code.org's sincerity in wanting good CS in all schools
nor the efforts or value as an advocate for CS Education. I'm
concerned that the desire to win big and win now is moving us in a
direction that we'll regret years from now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;Not my term, but I really like it&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;If you think that PD based
teacher training is OK, ask yourself if you want your own child's
chemistry teacher to be a history teacher with a few weeks summer
training in chemistry&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" name="fn.3" class="footnum" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;And I'm guessing the exam will be offered
during the day so teachers will proctor for free rather than be
allowed to, you know, teach their students.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</guid><pubDate>Sat, 04 Feb 2017 11:00:00 GMT</pubDate></item><item><title>BS? - BA</title><link>http://cestlaz.github.io/posts/ba-bs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;blockquote&gt;
&lt;p&gt;
I didn't know Hunter College had computer science.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I heard that refrain more than once during my fall visits to high
schools. Part of the reason for this is due to Hunter CS's low
profile and small size in spite of its high quality.
&lt;/p&gt;

&lt;p&gt;
Part, though, was also because of some misconceptions about Computer
Science programs. I'd hear things like "but they only offer a BA not a
BS," or "but Hunter isn't an engineering school."
&lt;/p&gt;

&lt;p&gt;
I've come to realize that we have to do a better job educating kids as
to what can come next after high school.
&lt;/p&gt;

&lt;p&gt;
I'm not entirely sure why many assume that CS has to be under
engineering. When I was applying to college, most of my choices were
Arts and Science schools offering BAs in CS. Maybe it's because people don't
disagregate STEM subjects. Even though it's not a computer science
program many schools seem to associate FIRST robotics with computer
science. Likewise any class with even a modicum of coding becomes
computer science and as makerspaces and robotics are a percieved as
easy entry STEM classes that appear to be CS (something I'll rant
about in a future post), CS becomes associated with engineering.
&lt;/p&gt;

&lt;p&gt;
It's easy enough to explain the difference between a BA in CS and a BS
in CS and it's equally easy to show that you can have tremendous
success either way. All you have to do to show the validity of a BA in
CS is look at succesful people from places like NYU, Courant, Columbia
College (as opposed to Columbia Engineering), Cornell school of Arts
and Sciences, etc to balance successful people from the engineering schools.
&lt;/p&gt;

&lt;p&gt;
As I'm sure you know, I'm pretty high on Hunter CS and it's certainly
one of the best value CS educations out there. Personally, I'm a big believer in a
liberal arts education but in any case, as a community we have to do a
better job educating the high schools so that graduating seniors are
best informed when deciding on their futures.
&lt;/p&gt;</description><category>cs</category><category>education</category><guid>http://cestlaz.github.io/posts/ba-bs/</guid><pubDate>Mon, 02 Jan 2017 01:14:25 GMT</pubDate></item><item><title>It gets easier (or advent of code 2016 day 19)</title><link>http://cestlaz.github.io/posts/it-gets-easier-advent19/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today's &lt;a href="http://adventofcode.com/2016/day/19"&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href="http://mathworld.wolfram.com/JosephusProblem.html"&gt;Josephus
problem&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I recalled that there was a formula to figure out the 
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.
&lt;/p&gt;

&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href="http://adventofcode.com/2016/day/19"&gt;problem description&lt;/a&gt; for details).
&lt;/p&gt;

&lt;p&gt;
For both solutions I coded up a circular doubly linked list:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;make_ring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can see my complete solutions &lt;a href="https://github.com/zamansky/advent2016/blob/master/day19.cpp"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I was thinking about how I wrote the code – I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar. 
&lt;/p&gt;

&lt;p&gt;
I'm not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven't really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat. 
&lt;/p&gt;

&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn't fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.
&lt;/p&gt;

&lt;p&gt;
All of this is to say that it does get easier.
&lt;/p&gt;

&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href="http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA"&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.
&lt;/p&gt;

&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.
&lt;/p&gt;</description><category>coding</category><category>cs</category><guid>http://cestlaz.github.io/posts/it-gets-easier-advent19/</guid><pubDate>Tue, 20 Dec 2016 00:56:09 GMT</pubDate></item><item><title>Advent of Code 2016 - Check your data</title><link>http://cestlaz.github.io/posts/advent-of-code-2016-check-data/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I'm spending the weekend up in Michigan. Visiting my brother and is
family. We're here to see the &lt;a href="http://umgass.org"&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan's &lt;a href="http://www.umgass.org/current-production"&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.
&lt;/p&gt;

&lt;p&gt;
This hasn't left much time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday's challenge this morning.
&lt;/p&gt;

&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/"&gt;because I'm an
idiot&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="http://adventofcode.com/2016/day/9"&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.
&lt;/p&gt;

&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did. 
&lt;/p&gt;

&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it's
always good to have a daughter that's smarted than you are) but she
saw no problems.
&lt;/p&gt;

&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.
&lt;/p&gt;

&lt;p&gt;
What could be the problem.
&lt;/p&gt;

&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a "save-as"
to save it - last time, I cut and pasted.
&lt;/p&gt;

&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.
&lt;/p&gt;

&lt;p&gt;
The moral of the story – make sure you check the integrity of your
data set - you'll never get the right answer if you're working with
the wrong data.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, you can find my AoC code &lt;a href="https://github.com/zamansky/advent2016"&gt;here&lt;/a&gt;.
&lt;/p&gt;</description><category>cs</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016-check-data/</guid><pubDate>Sat, 10 Dec 2016 16:25:38 GMT</pubDate></item><item><title>A Teacher looks at Advent of Code 2016 #2</title><link>http://cestlaz.github.io/posts/advent-of-code-2016-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today we're looking at &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href="http://adventofcode.com/2016/day/2"&gt;number 2&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To change things up, I thought I'd do a video where I live code a solution.
&lt;/p&gt;

&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code. 
&lt;/p&gt;

&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;

&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href="http://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt; to take
away edge and special cases. 
&lt;/p&gt;

&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;

&lt;p&gt;
Here's the video, I hope you enjoy it:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EC8gSrYQ11g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><category>cs</category><category>pedagogy</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016-2/</guid><pubDate>Thu, 08 Dec 2016 13:40:49 GMT</pubDate></item><item><title>A Teacher looks at Advent of Code 2016 #1</title><link>http://cestlaz.github.io/posts/advent-code-2016-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I recently &lt;a href="http://cestlaz.github.io/posts/advent-of-code-2016/"&gt;posted&lt;/a&gt; about &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;

&lt;p&gt;
I thought I'd share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://adventofcode.com/2016/day/1"&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there's a problem - there are no limits on coordinates and we
can't make an unlimited size array.
&lt;/p&gt;

&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; location changes over
time. In the solution below, we start at &lt;b&gt;&lt;b&gt;(0,0)&lt;/b&gt;&lt;/b&gt; and count the steps as
we update two variables &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; and we have the number of steps taken to get there.
&lt;/p&gt;

&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I'm not arguing that what's written is
superior in any way, it's just what I ended up writing).
&lt;/p&gt;

&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which assigns &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; to the first item in the tuple and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt; the
second. I used that a number of times 
&lt;/p&gt;

&lt;p&gt;
I also use a list  I call &lt;b&gt;&lt;b&gt;dirs&lt;/b&gt;&lt;/b&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;

&lt;p&gt;
Here's all the code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# assume our starting location is 0,0&lt;/span&gt;

&lt;span class="c1"&gt;# we start with d=0 -&amp;gt; facing north&lt;/span&gt;
&lt;span class="c1"&gt;# as we turn left or right, we can just increment or decrement d&lt;/span&gt;
&lt;span class="c1"&gt;# and dirs[d] will give us the appropriate dx and dy to update&lt;/span&gt;
&lt;span class="c1"&gt;# our locatoin for the next step&lt;/span&gt;
&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# This is only needed for part 2  - We track visited locations&lt;/span&gt;
&lt;span class="c1"&gt;# by adding them to the dictionary. If we try to add a location&lt;/span&gt;
&lt;span class="c1"&gt;# that's already been visited we know that we've found our final &lt;/span&gt;
&lt;span class="c1"&gt;# location&lt;/span&gt;
&lt;span class="c1"&gt;# locs={}  # uncomment this line for part 2&lt;/span&gt;


&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# the first char in i is the direction to turn in (L or R)&lt;/span&gt;
    &lt;span class="c1"&gt;# the rest represents the number of steps.&lt;/span&gt;
    &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

	&lt;span class="c1"&gt;# Uncomment this block for part 2&lt;/span&gt;
	&lt;span class="c1"&gt;# each time we have a new location, see if it's already in&lt;/span&gt;
	&lt;span class="c1"&gt;# locs, if it isn't, add it.&lt;/span&gt;
	&lt;span class="c1"&gt;# if it is, we're visiting somewhere twice so we're done.&lt;/span&gt;
	&lt;span class="c1"&gt;#if ((x,y) not in locs):&lt;/span&gt;
	&lt;span class="c1"&gt;#    locs[(x,y)]=1&lt;/span&gt;
	&lt;span class="c1"&gt;#else:&lt;/span&gt;
	&lt;span class="c1"&gt;#    print((x,y))&lt;/span&gt;
	&lt;span class="c1"&gt;#    print(abs(x)+abs(y)) # the answer&lt;/span&gt;
	&lt;span class="c1"&gt;#    sys.exit(0)&lt;/span&gt;
	&lt;span class="c1"&gt;#    break&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the answer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;</description><category>cs</category><category>pedagogy</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-code-2016-1/</guid><pubDate>Tue, 06 Dec 2016 15:46:17 GMT</pubDate></item><item><title>Advent of Code 2016</title><link>http://cestlaz.github.io/posts/advent-of-code-2016/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Once again, it's time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day. 
&lt;/p&gt;

&lt;p&gt;
I wrote a bit about it &lt;a href="http://cestlaz.github.io/posts/2015-12-15-advent.html/"&gt;last&lt;/a&gt; &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ"&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href="http://adventofcode.com/2015/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It's only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I'm thinking of
looking at a couple of the problems this week with my class at Hunter.
&lt;/p&gt;

&lt;p&gt;
I didn't think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You're
first presented with the problem and the input and once you put in the
correct answer, you're presented with part two.
&lt;/p&gt;

&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded. 
&lt;/p&gt;

&lt;p&gt;
It's not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.
&lt;/p&gt;

&lt;p&gt;
Check out &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; and see if it's something you or your classes
might enjoy.
&lt;/p&gt;</description><category>apcs</category><category>cs</category><category>misc</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016/</guid><pubDate>Sat, 03 Dec 2016 20:25:26 GMT</pubDate></item><item><title>Inverted Index Project</title><link>http://cestlaz.github.io/posts/inverted-index/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I haven't spoken much about the class I've been teaching this
semester. It's an intro CS course - a programming heavy intro. I
decided to use Python with a transition at the end to C++. The
transition is to mirror Hunter's normal first CS course that ends with
a C++ intro to prepare the students for next semester's CS course
which is a more intense OOP class using C++ - the language we use in
our core courses.
&lt;/p&gt;

&lt;p&gt;
Throughout the semester I've tried to use a variety of interesting
application areas so as to try to give the students some idea of the
possibilities that studying CS will open up for them.
&lt;/p&gt;

&lt;p&gt;
After covering Python dictionaries and lists I thought we'd play by
building an inverted Index.
&lt;/p&gt;

&lt;p&gt;
The basic idea is to map a set of words back to source files. For
example, given the following four one line files:
&lt;/p&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;files&lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;file.01&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you prick us do we not bleed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.02&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you tickle us do we not laugh&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.03&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you poison us do we not die and&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.04&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you wrong us shall we not revenge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
You could build a data structure mapping each word back to the file(s)
that contain it (partially shown here),
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Word&lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;Files containing It's&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;if&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;you&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;prick&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;us&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;do&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
You can, of course, store more information - how many times a word
appears in a file, where it appears, etc.
&lt;/p&gt;

&lt;p&gt;
This is a fairly easy structure to build. A dictionary where the keys
are the words in the file and the values are lists of the documents
containing the words.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;inverted_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;'if'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'you'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'prick'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'us'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'do'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In addition to letting us work with dictionaries and lists, we can
also review file access and even the python CSV module if we want.
&lt;/p&gt;

&lt;p&gt;
We can immediately write simple queries – "what document(s) contain
the word 'prick,' but things get more interesting if you write
functions to perform &lt;b&gt;&lt;b&gt;and&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt; queries - "what document(s)
contain the words 'prick' &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt; 'do'" for instance.
&lt;/p&gt;

&lt;p&gt;
Why are we building this (besides as a data structure and programming
exercise)? I've seen a number of references to using an inverted index
when building a web search engine. In fact, I think that's something
you do early on in the Udacity Mooc. I just wanted to play with
information retrieval.
&lt;/p&gt;

&lt;p&gt;
I remembered that there was a collection of information, including
last statements from &lt;a href="https://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"&gt;executed offenders in Texas&lt;/a&gt;. Someone conveniently
converted it into a &lt;a href="https://docs.google.com/spreadsheets/d/1HAjZTtPriClY-X3n9whTkA4i5D7bn3bmtHnLoaVICvI/edit#gid=1"&gt;Google Spreadsheet&lt;/a&gt;. The format's a little
different from our simple four file example but then there's more
data. It's straightforward enough to download the spreadsheet as a CSV
file and then read it with a Python program that builds it into an
inverted index.
&lt;/p&gt;

&lt;p&gt;
Now we have some interesting data to play with.
&lt;/p&gt;

&lt;p&gt;
How many offenders used words like "sorry" or "apologize?" How about
references to religion? We can do all sorts of &lt;b&gt;&lt;b&gt;and&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt;
queries. 
&lt;/p&gt;

&lt;p&gt;
We just played with this a bit but I could see all sorts of
explorations. What about taking some great work of literature and
turning it into an inverted index by chapter. You could query
characters or certain words and see where and when they appear in the
book. A new and different way of exploring literature.
&lt;/p&gt;

&lt;p&gt;
So, there you have it - an interesting little project we played with
this past semester. We did it in an intro Python course but I could
see it as an interesting project in AP CS A using hashmaps and lists.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>intro</category><category>programming</category><category>python</category><guid>http://cestlaz.github.io/posts/inverted-index/</guid><pubDate>Sat, 26 Nov 2016 21:52:56 GMT</pubDate></item><item><title>Cornell Technion Project Studio</title><link>http://cestlaz.github.io/posts/cornell-tech-proj-studio/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I spent this evening as a crit advisor for this semesters &lt;a href="http://tech.cornell.edu/studio/curriculum/product-studio"&gt;Project
Studio&lt;/a&gt;. The class is basically a finishing class for their Masters
students. The class forms teams that work with a "company champion"
that acts an advisor to build a product.
&lt;/p&gt;

&lt;p&gt;
As a Crit Advisor, I, along with two other people from the tech
industry have a give and take with three groups and hopefully we can
provide useful feedback.
&lt;/p&gt;

&lt;p&gt;
As a "tech industry person" I feel a bit like an outsider since I'm
really the "teacher guy," but I think I had some worthwhile things to
share with the groups.  Besides,
I'd like to think I'm sufficiently in touch with the tech industry
through "the family" to be a reasonably sound advisor.
&lt;/p&gt;

&lt;p&gt;
As it turns out, two of the groups I worked with had an education bent
so at least in terms of product they were in my wheelhouse.
&lt;/p&gt;

&lt;p&gt;
I don't want to talk specifically about the student products since I
didn't ask permission but I did want to share a few thoughts.
&lt;/p&gt;

&lt;p&gt;
The products reminded me very much of the projects my Stuy kids
produced in their senior SoftDev class. This is not to belittle the
Cornell Tech people but rather noting how advanced the work of the
Stuy kids is. Beyond that, I liked the composition of the groups I
talked to - nice combinations of skill sets and backgrounds. 
&lt;/p&gt;

&lt;p&gt;
I love the idea of the mentoring company which had an interesting effect on
the groups. In all cases, the mentoring company helped provide the
teams with an idea framework but in one case, I think the company's point of
view actually limited the groups vision a bit. This came up in our
discussions and I'm hoping that the students got something out of
that.
&lt;/p&gt;

&lt;p&gt;
I also liked the crit review I was part of - bringing in outsiders to
show your work to and to get feedback from. It would probably hard
logistically at Stuy, but I'll talk to the guys there about the
concept. 
&lt;/p&gt;

&lt;p&gt;
I shared my contact info with the two groups that asked and if they
follow up, I'd love to be a resource for them. 
&lt;/p&gt;

&lt;p&gt;
I'm also looking forward to taking part in more events like this in
the future.
&lt;/p&gt;</description><category>cs</category><guid>http://cestlaz.github.io/posts/cornell-tech-proj-studio/</guid><pubDate>Wed, 02 Nov 2016 00:34:03 GMT</pubDate></item></channel></rss>