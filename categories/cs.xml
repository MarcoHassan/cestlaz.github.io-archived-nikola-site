<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>C'est la Z (Posts about cs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/cs.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 22 Sep 2017 13:42:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Awesome Cs Revisited</title><link>http://cestlaz.github.io/posts/awesome-cs-revisted/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org574d0b9" class="outline-2"&gt;
&lt;h2 id="org574d0b9"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org574d0b9"&gt;
&lt;p&gt;
Saw this tweet the other day so I though I would try to plug the
&lt;a href="https://github.com/zamansky/awesome-cs-education"&gt;Awesome CS Education&lt;/a&gt; list I started on GitHub:
&lt;/p&gt;

&lt;div class="HTML"&gt;
&lt;p&gt;
&amp;lt;blockquote class="twitter-tweet" data-lang="en"&amp;gt;&amp;lt;p lang="en" dir="ltr"&amp;gt;&amp;lt;a href="&lt;a href="https://twitter.com/hashtag/csteachers?src=hash"&gt;https://twitter.com/hashtag/csteachers?src=hash&lt;/a&gt;"&amp;gt;#csteachers&amp;lt;/a&amp;gt;â€¦didn&amp;amp;#39;t I see a list of CS teacher blogs here recently?&amp;lt;/p&amp;gt;&amp;amp;mdash; Pam Whitlock (@PamWhitlock1) &amp;lt;a href="&lt;a href="https://twitter.com/PamWhitlock1/status/910662628757864448"&gt;https://twitter.com/PamWhitlock1/status/910662628757864448&lt;/a&gt;"&amp;gt;September 21, 2017&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
To answer the tweet, the closet thing I know to a list is &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred
Thompson&lt;/a&gt;'s blog roll which is actually a post he wrote on his blog
in 2012. Unfortunately his list can be hard to find and is somewhat
out of date. 
&lt;/p&gt;

&lt;p&gt;
The idea of an "awesome" list is publicly hosting a simple site that
is community driven and anyone can suggest additions and edits. 
&lt;/p&gt;

&lt;p&gt;
I put up a starter &lt;a href="https://github.com/zamansky/awesome-cs-education"&gt;here&lt;/a&gt; and a few people have contributed but I'd love
to get more people involved. Awesome lists have a number of advantages
over other repositories.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Unlike blog posts, the site is easy to find.&lt;/li&gt;
&lt;li&gt;Unlike private mailing lists or Facebook, anyone can see the content.&lt;/li&gt;
&lt;li&gt;Anyone can suggest additions (although you need to create a Github
account).&lt;/li&gt;
&lt;li&gt;Anyone can download or fork the site.&lt;/li&gt;
&lt;li&gt;It's essentially plain text and is easy to edit (just read the
&lt;a href="https://github.com/zamansky/awesome/blob/master/contributing.md"&gt;contribution guide&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So, there you have it. If you have a blog or resource to share please
submit a pull request. Over time this could be a terrific single
starting point for educators to get to a wealth of resources.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>pd</category><category>resources</category><guid>http://cestlaz.github.io/posts/awesome-cs-revisted/</guid><pubDate>Thu, 21 Sep 2017 20:34:36 GMT</pubDate></item><item><title>New Term New Tool - Thonny, a Python IDE</title><link>http://cestlaz.github.io/posts/new-tool-thonny/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org7d9397b" class="outline-2"&gt;
&lt;h2 id="org7d9397b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7d9397b"&gt;
&lt;p&gt;
Last year I &lt;a href="https://cestlaz.github.io/posts/new-term-new-tool-replit"&gt;wrote about&lt;/a&gt; &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;, an online IDE that supports multiple
languages. At the time it had some rudimentary classroom support and
since I started using it, repl.it has become better and better. I
used it last year with my class because I had to start the year in a
lab where I couldn't easily install my own software. I'll continue to
use repl.it - mostly for it's ability to schedule publish and manage
assignments but when possible, I like having my students work
locally. 
&lt;/p&gt;

&lt;p&gt;
This year I'm excited about another tool - &lt;a href="http://thonny.org"&gt;Thonny&lt;/a&gt;. Thonny's a simple
Python IDE designed for beginners. I discovered it last year but at a
time when it was impractical for me to use with my students. This
year I can and I'm really liking it. I'm still an Emacs guy and will
continue to use Emacs for my python development (&lt;a href="http://cestlaz.github.io/posts/using-emacs-12-python/"&gt;video 1&lt;/a&gt;, &lt;a href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet"&gt;video 2&lt;/a&gt;) but
for beginners I think Thonny is the way to go.
&lt;/p&gt;

&lt;p&gt;
Some of Thonny's highlights:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An integrated Python 3 virtual environment making for ease of
installation and consistency across student installs&lt;/li&gt;
&lt;li&gt;A debugger that shows how expressions are evaluated&lt;/li&gt;
&lt;li&gt;Great visualizations of function calls that make it easier to
understand the call stack and scope&lt;/li&gt;
&lt;li&gt;The ability to look at memory to understand references.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Rather than go into the gory details in text, I put together this
video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/lWaCl0WjNZI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>teaching</category><category>tools</category><guid>http://cestlaz.github.io/posts/new-tool-thonny/</guid><pubDate>Thu, 21 Sep 2017 11:31:42 GMT</pubDate></item><item><title>I Believe CS Teachers are Smart and Capable</title><link>http://cestlaz.github.io/posts/cs-teachers-smart/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org78ee12a" class="outline-2"&gt;
&lt;h2 id="org78ee12a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org78ee12a"&gt;
&lt;p&gt;
People sometimes accuse me of being an elitist CS snob that I feel that CS
teachers have to have advanced CS degrees. 
&lt;/p&gt;

&lt;p&gt;
It's not that at all. Rather, I feel that CS teachers are smart and
capable. Circumstances frequently result in a teacher in front of a CS
class with limited content and pedagogical content knowledge. It's not
ideal but it's reality. Of course I feel that we should do everything
to support and encourage these teachers but we should also insist that
after a reasonable period of time, they know their stuff.
&lt;/p&gt;

&lt;p&gt;
This is why I hate it when I hear people in the CS Ed community say
something is too hard. Git's too hard. The command line is too
hard. Functional programming's too hard &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;. That's all nonsense. At last
year's SIGCSE conference people from a state, I forget which, was
considering not using the Praxis exam for CS teacher certification
even though the state uses the Praxis exam for other subject
areas. They claimed that the praxis was too hard for CS teachers. 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/praxis.jpg" alt="praxis.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I haven't taken the Praxis exam but some friends have. It doesn't
appear to be unreasonable at all&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
While I can certainly understand a teacher not knowing much when they
start - thrown in due to necessity I think it's ridiculous not to
insist that they ultimately get to real mastery.
&lt;/p&gt;

&lt;p&gt;
A math teacher generally has to know math beyond calculus. Science
teachers have to have gotten through Orgo. English teachers have to
understand Joyce. &lt;b&gt;&lt;b&gt;THIS IS HARD STUFF!!!!&lt;/b&gt;&lt;/b&gt;&lt;sup&gt;&lt;a id="fnr.3" class="footref" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
I think it's insulting to say that CS teachers aren't capable of doing
the same in their subject area.
'
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;whether or not any of
these topics are appropriate for a particular course is discussion for
another time&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;although I'm not a big believer
in standardized exams for certification or in general.&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" class="footnum" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;There are plenty of
lousy teacher prep programs that don't ensure teachers learn the
subject matter they should but the good ones do.&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><guid>http://cestlaz.github.io/posts/cs-teachers-smart/</guid><pubDate>Fri, 15 Sep 2017 22:17:21 GMT</pubDate></item><item><title>Theseus's Curriculum</title><link>http://cestlaz.github.io/posts/theseus%27s-curriculum/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org09b8735" class="outline-2"&gt;
&lt;h2 id="org09b8735"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org09b8735"&gt;
&lt;p&gt;
With the school year starting I was originally planning on writing
about my class rules. 
&lt;/p&gt;

&lt;p&gt;
Instead I think I'll riff on &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;'s post today titled
&lt;a href="http://blog.acthompson.net/2017/09/curriculum-is-hard.html"&gt;Curriculum is Hard&lt;/a&gt;. I'm guessing I found curriculum design and
development daunting decades ago but at this point in my career it's
something I enjoy. In any event, Alfred got me to thinking - when is a
curriculum your own?
&lt;/p&gt;

&lt;p&gt;
If you grab a curriculum complete with lesson plans, assignments; the
whole kit and caboodle and you use it verbatim it's clearly not your
curriculum. It probably also isn't really teaching.
&lt;/p&gt;

&lt;p&gt;
What about the more common case. Math curricula has basically been set
for years. Algebra, Geometry &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;, and then Algebra 2
and Trigonometry. Most books seem to be sequenced in a similar way
and at least in the schools I know about, the math department has some
document listing a day by day list of topics. This makes sense since
you probably have more than one class of each type and you want some
cross class consistency. Particularly during the first weeks of the
semester when kids can transfer and then also at the end of term or
year. 
&lt;/p&gt;

&lt;p&gt;
When a teacher uses that departmental document are they using someone
elses curriculum?
&lt;/p&gt;

&lt;p&gt;
What if they create their own homeworks and assigments?
&lt;/p&gt;

&lt;p&gt;
Most teachers I know use the department's curriculum but make their
own unit and day to day lesson plans. Most revise them each
semester. Typically these teachers do a little more here or a little
less there depending on a number of factors.
&lt;/p&gt;

&lt;p&gt;
Are they creating their own curriculum?
&lt;/p&gt;

&lt;p&gt;
What if they re-sequence the topics?
&lt;/p&gt;

&lt;p&gt;
How about adding an enrichment topic?
&lt;/p&gt;

&lt;p&gt;
Back when I taught math I used the departmental syllabus, as many
texts as I could find, colleagues lesson plans and whatever I could
find but I always pulled it together to something I could call my
own. If I didn't, I wouldn't have been comfortable going in front of
my class. Was it my curriculum? They were certainly my lessons.
&lt;/p&gt;

&lt;p&gt;
Now, when designing a course I start from the end outcomes and work
backwards but when teaching a course, I still look at as many
resources as I can find. I'll pull a little from here, a little from
there and combine that with whatever I can come up with myself.
&lt;/p&gt;

&lt;p&gt;
So, when is it your curriculum and when is it not? 
&lt;/p&gt;

&lt;p&gt;
If you're just delivering scripted lessons it's certainly not yours.
&lt;/p&gt;

&lt;p&gt;
If you know your stuff and you  take someone elses material, make it
your own and add it to your bag of tricks, I think it's now yours as
well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;which is really logic and deductive
reasoning using Euclidean Geometry as platform&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>currulum</category><category>teaching</category><guid>http://cestlaz.github.io/posts/theseus%27s-curriculum/</guid><pubDate>Tue, 05 Sep 2017 22:41:14 GMT</pubDate></item><item><title>CS Teachers - we need you to blog</title><link>http://cestlaz.github.io/posts/cs-teachers-blog/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org3c344ff" class="outline-2"&gt;
&lt;h2 id="org3c344ff"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3c344ff"&gt;
&lt;p&gt;
At this past year's CSTA conference, a few of us huddled in a corner
voiced a very common lament - "it would be great if more CS teachers
blogged." It really would be. We're still a relatively small
community and while there's some good conversation going on on
mailing lists and on Facebook, those aren't easily discoverable or
accessible and in the case of Facebook, there's a question of
ownership and permanence.
&lt;/p&gt;

&lt;p&gt;
I've been blogging on and off since 2010. Around 300 posts. Not super prolific
but I've been doing it long enough to maybe be able to share a bit of
perspective.
&lt;/p&gt;

&lt;p&gt;
I'm not sure exactly why I started. In part I was inspired by my wife
who at the time was blogging about her &lt;a href="http://squid-knits.blogspot.com/"&gt;knitting&lt;/a&gt;. I was also inspired
to share my thoughts after meeting some fellow CS teachers from across
the country at a &lt;a href="http://cestlaz.github.io/posts/2010-01-02-welcome.html"&gt;CSTA event in Chicago&lt;/a&gt;. It was stop and go for a while
and then I took a break. I was re-inspired months later after meeting
a couple of CS teachers at another CSTA event - &lt;a href="https://twitter.com/search?q=ben%20chun&amp;amp;src=typd"&gt;Ben Chun&lt;/a&gt; and &lt;a href="https://twitter.com/purplespatula"&gt;Helene
Martin.&lt;/a&gt; Both terrific high school CS teachers at the time who are
unfortunately no longer in the classroom (unfortunate for the kids, I
wish Ben and Helene all happiness and success in all their
endeavors). We all agreed to try to write more and that got me started
again. I've been posting around 50 times a year since.
&lt;/p&gt;

&lt;p&gt;
Looking back to when I used blogger, I had 30 - 50 hits on some early
posts and that was mostly just me hitting the site. It didn't matter.
Writing has let me work through my thoughts. It also creates a record of
my thoughts and on how my thinking evolves over time. 
&lt;/p&gt;

&lt;p&gt;
Over time, people have told me that they've found some of the things
I've written useful or helpful and I'd argue that when people disagree
with something I write, even if they don't comment and I've all I've
evoked is a reaction of "Z's full of crap," it's gotten them to
re-evaluate their own thoughts on whatever the subject and if it's
confirmation of their original beliefs, that's OK.
&lt;/p&gt;

&lt;p&gt;
The important thing is that by blogging I'm getting my thoughts down
"on paper" and sharing them for the world to take or leave as they
please and the more of us who do this, the more we expand the sum
knowledge of CS teaches. 
&lt;/p&gt;

&lt;p&gt;
As a dispersed community of CS teachers across the country, we need
more people blogging on public platforms not in silos like Facebook.
&lt;/p&gt;

&lt;p&gt;
I've heard reasons why teachers don't blog:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I'm new and have nothing to write about&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Sure you do â€“ write a paragraph about your plans for the days lesson
or how it went. Vent your frustrations (but be careful not to get
yourself in trouble). Rave about some students work.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I don't have time&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Yes, this is a tough one. If you have to do PD time, maybe your
supervisor will let you use it for blogging. To be honest, when I'm
writing regularly it doesn't take that long. When I haven't written in
a while it takes longer. In any event. It's important and posts don't
have to be long
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I'm not a great writer&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
This blog is proof that you don't have to be. I'm stilted and ramble
and certainly no Shakespeare. I am the weakest writer in my household
and it's not even close. Even so, we all have something to share.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I don't know how&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I was thinking about proposing a session at next years CSTA conference
where I'd work the group through creating a github pages based
blog. In the meantime, there are a lot of easy ways to start out.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://blogger.com"&gt;http://blogger.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wordpress.com"&gt;http://wordpress.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and for those who want total control
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; with &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So, there's my plea. If you're a CS teacher and you're reading this
please consider blogging. I assure you, we will all appreciate it and
benefit from it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>community</category><category>cs</category><guid>http://cestlaz.github.io/posts/cs-teachers-blog/</guid><pubDate>Fri, 25 Aug 2017 19:52:23 GMT</pubDate></item><item><title>Teaching APCS-A for the first time</title><link>http://cestlaz.github.io/posts/teaching-ap-first-time/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgc7e6c06" class="outline-2"&gt;
&lt;h2 id="orgc7e6c06"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc7e6c06"&gt;
&lt;p&gt;
I got  an email from a friend the other day. Among other things, he
mentioned that he would be teaching APCS-A for the first time this
year. He's a little trepidatious. He knows his stuff but he hasn't
really done much using Java.
&lt;/p&gt;

&lt;p&gt;
I was going to respond in an email but thought I might share here
instead.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
TL;DR - for all you APCS teachers who are new or new to Java - learn
your core CS, lean on your resources and support and it's OK to tell
your kids "I don't know, I'll get back to you.". Don't worry, you'll be great.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The first time I taught APCS was some time around 1991 or 1992. It was at
&lt;a href="http://www.sewardparkhs.com/Famous-Alumni/"&gt;Seward Park&lt;/a&gt; &lt;a href="http://www.sewardparkhs.com/History/"&gt;High School&lt;/a&gt;. It was the AB curriculum - that is one
semester of programming in Pascal and one semester of Data Structures
and Algorithms.  Being a computer science major the core material was
never a concern. I had taken APCS the first time it was offered in May
1984 in Pascal and while most of my college and pre-teaching professional work
was in C, my college started it's CS sequence with Pascal. I was more
concerned with the actual teaching part. I had taught math for a year
and a half at that point but never CS and by any measure I was still
wet behind the ears. I never finished that first experience because I
was excessed to Stuy mid semester. I wasn't particularly happy with my
performance but looking back, I think I did a pretty good job given
the situation and my experience.
&lt;/p&gt;

&lt;p&gt;
After teaching math for a year and a half I was back in APCS at
Stuy. Still in Pascal. I spent the next few years figuring out how to
teach CS and APCS in particular along with starting a couple of new
classes. When the College Board decided to move the AP class to C++ I
was happy, sad and a little worried. Pascal had a bunch of limitations
but I had never used C++. True, I was a C programmer at heart but I
had never really done the OOP thing. I did, as it turned out, design a
number of my C systems in an Object Typed design: I would use a single
file per "class" where local variables were de facto instance
variables and functions in the file were methods and each file was a
singleton class. I read &lt;a href="https://www.amazon.com/Object-Oriented-Analysis-Design-Applications-3rd/dp/020189551X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1503519770&amp;amp;sr=8-1&amp;amp;keywords=Grady+Booch"&gt;Booch&lt;/a&gt; and &lt;a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=asap_bc?ie=UTF8"&gt;Meyer&lt;/a&gt; on my own but I had no
schooling in OOP and no professional experience.
&lt;/p&gt;

&lt;p&gt;
As it turned out, I didn't have to worry. I knew my CS and while it
took me a while to become comfortable with OOP, the class, and of
course I knew this from the get go, started from nothing and built
up complexity a step at a time. The worst that might have happened is
that some of my solutions might have been more C-esque than C++.
&lt;/p&gt;

&lt;p&gt;
The move to Java was a little more jarring. Now we had a totally new
language. I couldn't fall back on C. It removed memory management and
explicit pointers and it had to be used in an Object Oriented
manner. I remember asking Mike Schidlowsky, a former student turned
friend who was the Java consultant on the Java edition of Sedgewick's
&lt;a href="https://www.amazon.com/Robert-Sedgewick-Algorithms-Fundamentals-Structures/dp/B008VR3ZH4/ref=sr_1_4?ie=UTF8&amp;amp;qid=1503520269&amp;amp;sr=8-4&amp;amp;keywords=schidlowsky"&gt;Algorithms&lt;/a&gt; book how to do something. It had to do with passing and
modifying arrays. In C there were a number of ways to accomplish what
I wanted to do. In Java, I couldn't figure out how to do it the way I
wanted. My friend Mike told me "you just don't do it that way in
Java." Again, it turned out that I didn't have to worry. The basic
coding was still the same as were the data structures and
algorithms. The only challenge was that I had to get into a Java OOP
mindset which it turned out wasn't that hard. 
&lt;/p&gt;

&lt;p&gt;
While I never really warmed up to OOP - I find other paradigms more
natural for me, I knew my CS and got more and more comfortable with
the Java (or C++) way of doing things as time wore on. Sometimes I
would say "I don't know" or "let's figure it out" but that's OK.
&lt;/p&gt;

&lt;p&gt;
Nowadays, there are many more resources available for CS teachers. If
you're new, lean on them. Use the mailing lists, stackexchange,
facebook groups. Online resources like repl.it, codehs.com etc. Yes,
it's true that you'll be better next time around and even better years
down the road but right now, you're probably better than you think.
&lt;/p&gt;

&lt;p&gt;
A number of my former students volunteer for &lt;a href="https://www.tealsk12.org/"&gt;TEALS&lt;/a&gt; - a really great
program that brings software engineers into the classroom to work with
non-CS teachers to deliver instruction. A number of my kids have
shared the following sentiment: 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
I don't know if I'm really helping
the teacher to become self sufficient or if I'm a great teacher but I
do know one thing - while I'm there, the kids are getting a hell of a
lot more than if I wasn't there." 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
â€“ Remember that as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ap</category><category>apcs</category><category>cs</category><category>education</category><category>teaching</category><guid>http://cestlaz.github.io/posts/teaching-ap-first-time/</guid><pubDate>Wed, 23 Aug 2017 19:56:46 GMT</pubDate></item><item><title>Thoughts on non educator  influences on CS Education</title><link>http://cestlaz.github.io/posts/outside-influences-on-cs-ed/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Yesterday &lt;a href="https://twitter.com/guzdial"&gt;Mark Guzdial&lt;/a&gt; blogged about a NY Times piece discussing
&lt;a href="https://computinged.wordpress.com/2017/07/28/silicon-valley-pushing-coding-into-american-classrooms-through-code-org-nytimes/"&gt;Silicon Valleys influence on education through Code.org&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Mark questioned the validity of the piece. If you don't read Mark's
blog and you're in CS Ed you probably should. 
&lt;/p&gt;

&lt;p&gt;
I tried to leave a comment on Mark's blog - not about the NY Times
article but rather my thoughts on why I think it's important that we
remain wary and vigilant to industry and outsiders influence and
impact on CS education and on education in general.
&lt;/p&gt;

&lt;p&gt;
I don't know if my comment is sitting waiting for Mark to moderate or
if I'm experiencing WordPress weirdness but since it hasn't shown up
there, I thought I'd share it here:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
While the article might not make a strong case it's important to be wary of outside influences on education policies. 
&lt;/p&gt;

&lt;p&gt;
I'm a fan of a lot of what code.org does but speaking about outsiders in generalâ€¦
&lt;/p&gt;

&lt;p&gt;
Bill Gates and Co. directly or indirecty gave us such delights like stack ranking teachers, improving, I mean evaluating, I mean firing teachers based on test scores of students they don't teach, more and more high stakes nonsense testing for kids, and  at least in NY the destruction of neighborhood schools. 
&lt;/p&gt;

&lt;p&gt;
They've also pushed the current charter movement that, aided by misleading stats appear successful but in truth are no better and frequently worse than public schools while not sharing back a single "best practice."
&lt;/p&gt;

&lt;p&gt;
Then we have private companies like the College Board and Pearson both of whom have an outsized influence on US Ed policy and curriculum.
&lt;/p&gt;

&lt;p&gt;
I don't doubt the good intentions of code.org - as I said, I'm a fan. I am concerned when they and others take actions that can affect ed policy. I'm concerned when code.org representative pushes students to take an AP exam - not a great CS course with a great CS teacher but the actual exam. I'm even more concerned when code.org offers free PD when a school signs up for the PSAT8/9 - another high stakes meaningless test at taxpayer expense. For code.org it's a means to  get more CS ed out there. To me it's setting up a new cash cow for the college board at my expense and at students expense.
&lt;/p&gt;

&lt;p&gt;
I've seen many Ed Tech people, armed with the best intentions, enter the lions den â€“ a school, district, or municipality only to see their best intentions corrupted in the name of cost cutting, profits, or politics.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/outside-influences-on-cs-ed/</guid><pubDate>Sat, 29 Jul 2017 15:40:02 GMT</pubDate></item><item><title>CS Ed advocates should pay attention to greater ed issues</title><link>http://cestlaz.github.io/posts/cd-ed-and-all-ed/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
For anyone involved in K12 CS education, the past few years have been
a wild ride. When I first tried to make inroads in the DOE decades ago
I couldn't get through the door. Now, CS Education is everyone's
darling. It's really amazing. It's been a combination of grass roots
efforts by teachers, non profit education efforts such as &lt;a href="http://teals12k.org"&gt;TEALS&lt;/a&gt;, advocacy of
groups like &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; and amazing individuals like &lt;a href="http://avc.com/2017/06/bearing-witness/"&gt;Fred Wilson&lt;/a&gt; who has
probably done more to move the needle of CS Ed in NY than any other 10
people combined.
&lt;/p&gt;

&lt;p&gt;
While everyone agrees that to do CS education right at the K12 level
we need great teachers and lots of them, everyone also knows that
teachers voices are often unheard. The voices with the greatest weight
belong to the large non-profits, principals, superintendents and
local politicians. 
&lt;/p&gt;

&lt;p&gt;
Today's post is a plea to those with voices to think about the effects
of their advocacy for CS Ed to the greater education landscape.
&lt;/p&gt;

&lt;p&gt;
I started thinking about this recently as I've been developing the
CS teacher certification programs for Hunter College. As I spoke to
people across the nation I found that many of the efforts to
developing teacher certification are what I call the "you take it you
teach it" model. You take an abbreviated version of APCS-A and APCS-P
and you're a certified CS teacher. Just about every real educator feels
that this is ludicrous. Some feel that this can be a first step - get
these credentials to get in the door and then you have three to five
years to really learn your subject and craft. I'm good with that but I
have a problem with anyone who says "you take it you teach it" is good
enough and I've heard of a number of regions that are seriously
considering it.
&lt;/p&gt;

&lt;p&gt;
Why is this so bad and, I'd argue, dangerous? Not merely because we'll
end up with substandard CS teachers for the foreseeable future but
also because it undermines the teaching profession as a whole.
&lt;/p&gt;

&lt;p&gt;
It's no secret that public education is under attack. A number of
states including Wisconsin, Arizona, Oklahoma, New York and Michigan
have considered relaxing the standards to become a teacher to address
a teacher shortage. In their twisted logic, the politicians and
"reformers" say that we can't find enough qualified teachers because
we've made it an untenable career so let's lower standards. You can
argue that any current state's requirements are overly cumbersome but
that's another conversation.
&lt;/p&gt;

&lt;p&gt;
When CS Educators say that all that's needed to teach CS is to sit in
on a two week APCS institute is saying that to teach any subject you
don't need content expertise. This is dangerous to education as a
whole and when power players in the CS Ed movement don't speak up
otherwise or even worse that the stance that "you take it you teach
it" is OK, we're undermining teaching as a profession. 
&lt;/p&gt;

&lt;p&gt;
We need our heavy hitters to publicly and privately say that we need a
short term entry into the profession but we absolutely need plans and
pathways so that at the end of the day we have the best prepared
teachers in our schools for CS and for all subjects.
&lt;/p&gt;

&lt;p&gt;
Another issue is when as CS Educators we don't pay attention to the
whole child. I was at a meeting of CSTA people  from about thirty
states a few years ago. Someone asked "how can we advocate for CS when
the school might use it as an excuse to get rid of music?" Cameron
Wilson, at the time a lobbyist for the ACM said something to the
effect of "I'm not concerned with other subjects, my concern is
getting CS into the schools." I get it, he was employed to stump CS
but we have to remember that we're only a piece of the puzzle. We want
a seat at the table but we have to make sure that the table is
populated with everyone needed to provide a great education for our
kids. 
&lt;/p&gt;

&lt;p&gt;
A final issue I'll mention here is how so many CS educators are so
close to the College Board. It was very disturbing that so many CS Ed
players were pushing for more students to take the APCS exam. Not the
class, not some other CS class but the APCS exam. AP is an extremely
controversial subject among teachers and many of us feel that too many
kids take too many AP classes and certainly too many exams. Remember,
the College Board is the organization that pushes things like the
PSAT8/9 another meaningless but high stakes exam inflicted upon our
kids at taxpayer expense. I understand that AP makes things easy -
they have courses, curricula, etc. but we've given the college board
an outsized influence on CS education and we're not paying attention
to their outsized influence on education in general. 
&lt;/p&gt;

&lt;p&gt;
I'm just a small time teacher. I don't have a national voice. I'm
urging those that do:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Look into what's going on in greater education. Look at the way
public education has been under attack and why.
&lt;/li&gt;
&lt;li&gt;Look at the side affects of our choices - who we partner with and
what policies we push.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We might not agree on the right path but everyone with a voice in CS
Education should be having hard conversations about this and then
strongly advocating for the positions they feel correct.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/cd-ed-and-all-ed/</guid><pubDate>Tue, 18 Jul 2017 23:51:40 GMT</pubDate></item><item><title>A friendly reminder to use the right language when describing CS</title><link>http://cestlaz.github.io/posts/languages-or-cs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was part of this conversation the other day:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;When science teachers asked me if I taught AP Java I'd always respond by asking them if they taught AP Microscope.&lt;/p&gt;â€” Mike Zamansky (@zamansky) &lt;a href="https://twitter.com/zamansky/status/883327927831711745"&gt;July 7, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
I always use that line to emphasize that I teach CS - a way of
thinking and problem solving and looking at the world. The languages
we use in our classes are tools to help us communicate ideas not the
ends but rather a means.
&lt;/p&gt;

&lt;p&gt;
I've spent the past couple of days at the CSTA conference. It's been a
lot of fun. I've been spending the time with old friends and meeting
new ones and as everyone who knows me knows - I love talking shop. 
&lt;/p&gt;

&lt;p&gt;
I overheard a conversation today. One CS teacher describing what they
did to a few others. I overheard:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
We teach Scratch then Swift and C++ and also teach Python
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I heard statements like this describing programs more than a couple of
times. I know we're at a conference of CS Educators but even in this
community we have everything from beginners getting their feet wet to
hardcore computer scientists to everything in between.
&lt;/p&gt;

&lt;p&gt;
We shouldn't be teaching languages as an ends unto themselves and the
majority of us don't.
&lt;/p&gt;

&lt;p&gt;
What many of us do, though, is take the easy path and use the name of
a programming language to describe what we do rather than really
define what we do. This is why we hear "I teach Java" or "I teach a
class in Swift" even when the teacher teaching Java might really be
teaching Object Oriented program design and development or data
structures or something similar just using Java as the language or
tool.
&lt;/p&gt;


&lt;p&gt;
I too fall into this trap but I try to catch myself. I try not to say
"I teach Scheme" but rather I'll say "I teach Scheme. Actually, we're
studying functional programming using Scheme as the language but for
convenience, I'll just say Scheme for the rest of this talkâ€¦."
&lt;/p&gt;

&lt;p&gt;
The words we use to describe our field set the tone. If we're sloppy
and say "we teach Java," it's just like biology teacher saying "I
teach microscope." 
&lt;/p&gt;

&lt;p&gt;
As we try to define our field in the K12 space and seek equal footing
with established subject areas it's important that we use the right
language so that other educators and policy makers don't get the wrong
idea.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>csed</category><category>education</category><guid>http://cestlaz.github.io/posts/languages-or-cs/</guid><pubDate>Tue, 11 Jul 2017 01:17:47 GMT</pubDate></item><item><title>Disclosing Bugs - requiring a project roadmap</title><link>http://cestlaz.github.io/posts/disclosing-bugs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over on Facebook, a fellow CS educator &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/disclosing-bugs/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; made a comment on something he
wanted to try with his students this summer: having the students
pre-disclose bugs when they submit their projects.
&lt;/p&gt;

&lt;p&gt;
The post was asking for any links to "the literature." I can't speak
to that but I I've done something similar to what the post was asking
about so, as per usual, I thought I'd write about it here. It may not
be "research" but I'm more interested in teacher practices than ivory
towers anyway so here goesâ€¦
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
At a very basic level, I ask my students to provide a roadmap to any
project they submit - usually in a readme file. I basically ask:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;How to use the project
&lt;/li&gt;
&lt;li&gt;What's cool and I should make sure to check out
&lt;/li&gt;
&lt;li&gt;What doesn't work, where were the sticking points and what's the
status.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I tell my students that when I test the project, I'm not "out to get
them" and by their telling me how to navigate the project, it makes
sure I see things in the best possible light. I also tell them that I
will be more harsh on bugs that they don't tell me about -
particularly bugs that only occur some of the time.
&lt;/p&gt;


&lt;p&gt;
I also encourage (and sometimes require) that students maintain a
changelog in their repo and also sometimes encourage them to have a
todo list and list of bugs and for longer projects, I expect to see
these and the readme updated over the course of the project (which
should always be up to date on &lt;a href="https://cestlaz.github.io/posts/sigcse-2017-github-4"&gt;GitHub&lt;/a&gt;, Dropbox or wherever the project
is living). 
&lt;/p&gt;

&lt;p&gt;
When the students provide a good write up it makes evaluating the
project much easier.
&lt;/p&gt;


&lt;p&gt;
When students buy in, they're hopefully thinking more deeply about
their projects in terms of design and implementation and also from the
point of view of someone else using their product. When they maintain
the readme and other files over time, it also enables me to better
support them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
So, does this work? Yes but with some caveats. It works better once
the class and teacher know each other. If the students trust the
teacher they're more likely to be open and honest when they write up
the project. On the other hand, there will always be some students to
"phone it in" and do the bare minimum in terms of writing up their
projects.
&lt;/p&gt;

&lt;p&gt;
The bottom line is that having the students do this is has a low cost
and is beneficial to both the students and the teacher. When it works,
it's great and when it doesn't, it's still pretty good.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/disclosing-bugs/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I'm not sharing names from the Facebook post because it was
made in a semi-private forum and I haven't asked permission.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>teaching</category><guid>http://cestlaz.github.io/posts/disclosing-bugs/</guid><pubDate>Tue, 13 Jun 2017 20:30:27 GMT</pubDate></item></channel></rss>