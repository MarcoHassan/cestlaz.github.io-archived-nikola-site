<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about cs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/cs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 13 Mar 2018 23:41:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Sigcse2018 Making theory more acccesible</title><link>http://cestlaz.github.io/posts/sigcse2018-theory/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgaae4caa" class="outline-2"&gt;
&lt;h2 id="orgaae4caa"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaae4caa"&gt;
&lt;p&gt;
Next up from SIGCSE 2018 is John MacCormick's session on
&lt;a href="https://dl.acm.org/citation.cfm?id=3159557"&gt;Strategies for Baing the CS Theory Course on Non-decision Problems&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
MacCormicks's stance is that CS theory  is tough the first time around
and using non-decision problems is a viable approach to make theory
more accessible to beginners. As MacCormick said in his paper:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
… a decision problem may ask the yes/no question, "Does this graph
have a Hamilton cycle?" The corresponding non-decision problem is,
"Please give me a Hamilton cycle of this graph if it has one."
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
This leads to writing programs to explore concepts in CS theory rather
than just living in the world of proof. 
&lt;/p&gt;

&lt;p&gt;
MacCormick goes on to say that:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
For this audience, the key advantage of non-decision problems
is that they are more realistic: they match the previous programming
and algorithms experience of undergraduates more closely.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I love the idea. Writing a program can make an abstract problem more
concrete and can lead to better understanding for those of us who are
less math inclined.
&lt;/p&gt;

&lt;p&gt;
My next thought was that this shouldn't just be a change implemented
in theory courses. Some of these ideas should move down to more
introductory CS classes. Not the hardcore stuff but light
introductions to the topics so that we can layer the learning. If we
introduce some of these concepts in CS 1 classes then when they get to
the theory class it won't be the students first rodeo.
&lt;/p&gt;

&lt;p&gt;
I've had success with this when teaching recursion early. I've also
done it with other concepts. When we teach the Towers of Hanoi, yes,
it's a nice recursion problem but really it's to get the students
thinking about run time and a bit of proof. likewise, when we do a
maze solver in NetLogo we're alluding to dynamic programming, search,
and path finding.
&lt;/p&gt;

&lt;p&gt;
I don't have too much more to say on this topic right now. I'm not
enough of a theory guy to sensibly design these experiences. The good
news is that MacCormick has written an soon to be released &lt;a href="https://www.amazon.com/What-Can-Computed-Practical-Computation/dp/0691170665/ref=asap_bc?ie=UTF8"&gt;book&lt;/a&gt; on the subject. I
signed up for a reviewer copy at SIGCSE and look forward to receiving
a copy. Once I do I hope to be able to find some gems that I can work
into CS 1 experiences.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><category>theory</category><guid>http://cestlaz.github.io/posts/sigcse2018-theory/</guid><pubDate>Tue, 13 Mar 2018 23:21:43 GMT</pubDate></item><item><title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title><link>http://cestlaz.github.io/posts/sigcse2018-bootstrap/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orge428d07" class="outline-2"&gt;
&lt;h2 id="orge428d07"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge428d07"&gt;
&lt;p&gt;
I really didn't know what to expect at the &lt;a href="https://dl.acm.org/citation.cfm?id=3159471"&gt;Creativity, Customization,
and Ownership: Game Design in Bootstrap: Algebra&lt;/a&gt; session. I've been a
big fan of &lt;a href="http://www.bootstrapworld.org/"&gt;Bootstrep&lt;/a&gt; for years and looking at the authors, &lt;a href="http://blog.acthompson.net/2017/10/cs-teacher-interview-emmanuel.html"&gt;Emmanuel
Schanzer&lt;/a&gt;'s been a freind forever. I've never met &lt;a href="https://twitter.com/ShriramKMurthi"&gt;Shriram Krishnamurthi&lt;/a&gt;
in person but am looking forward to it. We've traded emails and blog
comments. I'd like to consider him a friend and I certainly respect
him and his work even though we frequently disagree around the
edges. The third author and presenter, Kathi Fisler was new to me.
&lt;/p&gt;

&lt;p&gt;
The Bootstrap program is embedded in algebra classes. In it, students
use Racket (nee scheme) to reinforce math skills while building
computer science skills. The big student project is a graphical game.
&lt;/p&gt;

&lt;p&gt;
When designing the project, students are asked to decide on and find
four resources:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;The background image&lt;/li&gt;
&lt;li&gt;The player image&lt;/li&gt;
&lt;li&gt;The target image&lt;/li&gt;
&lt;li&gt;The enemy image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Students are given a short amount of time to decide on and find these
four images. I think it was about ten minutes and that's it. That's
all the "creativity" in the assignment. After that, all the students
are essentially creating the same game with different skins.
&lt;/p&gt;

&lt;p&gt;
This design makes sense. You can't have students going all over the
place. Constraining the assignment in this way allows teachers who
might now be strong in computer science to guide the kids through the
program to completion.
&lt;/p&gt;

&lt;p&gt;
At the time I was thinking: I really like all of this but is it really
open ended creativity and discovery with respect to math or computer
science? As it turned out, Fisler addressed this point at the end of
the talk in a way that made me vary happy.
&lt;/p&gt;

&lt;p&gt;
Fisler went on to describe the rest of the student experience and then
went on to talk about the statistics they gathered. 
&lt;/p&gt;

&lt;p&gt;
One big takeaway was that while all the students were essentially
writing the same game varying only the graphical elements, this
encouraged students to create very different themes. They also created
rich stories around their games. The project might not have been
"creative" with respect to the CS or Math directions but it was certainly
creative in other important areas. The other takeaway was that
survey's indicated all sorts of positives from the program as a whole
so the project didn't seem to have suffered by having the students
essentially write the same program. Participants were proud of their
work, they felt their games were different from their peers and in
general the experience was good.
&lt;/p&gt;

&lt;p&gt;
During questions, someone asked about adding a fifth element - a
projectile or missile. It turns out that at one point the program had a
projectile component but that led to the vast majority of projects to
be themed in very similar ways. Even though not the same, it reminded me to something Randy
Pausch said in his &lt;a href="https://www.youtube.com/watch?v=ji5_MqicxSo"&gt;Last Lecture&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
You make whatever you want. Two rules: no shooting violence and no
pornography. Not because I’m opposed to those in particular, but you know, that’s been done with
VR, right? [laughter] And you’d be amazed how many 19-year-old boys are completely out of ideas
when you take those off the table.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
At the very end, Fisler addressed my questions about creativity and
discovery. She posed these questions of her own: "Do we overstate the
case for creativity?" and "Is pure constructivism a win?"
&lt;/p&gt;

&lt;p&gt;
I've ranted on contructivism before. It can be great but a
constructivist lesson takes a knowledgeable educator and a lot of time,
preparation, and effort. It's a big ask for, say, a high school
teacher who's already taking home hours of work every evening. Too
often I've seen the following "contructivist" model instead:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Take an isntructor that doesn't know their craft, the content, or
niether.&lt;/li&gt;
&lt;li&gt;Let the kids play with stuff.&lt;/li&gt;
&lt;li&gt;Show off the couple of autodidacts that figure it out as success
stories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll rant more about this "model" with respect to the new buzz word
"lead learner" at some point in the future.
&lt;/p&gt;

&lt;p&gt;
On the creativity side, it's important but there are also times for
the instructor to lead and for guidelines to be followed.
We want to foster creativity but that doesn't mean that it's 100%
creativity 100% of the time. Education is like life, a balance. The
Bootstrap program had to constrain the CS and math learning but
allowed for creativity in other areas. It's smart and it's a win.
&lt;/p&gt;

&lt;p&gt;
I still want to meet Shriram in person one day and now also Kathi
Fisler. I didn't know what to expect walking in but I left the talk
reminded of why I'm such a fan of Emmanuel, his team, and their work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>pedagogy</category><category>teaching</category><guid>http://cestlaz.github.io/posts/sigcse2018-bootstrap/</guid><pubDate>Fri, 02 Mar 2018 13:27:33 GMT</pubDate></item><item><title>Sigcse2018 - Malloc Lab</title><link>http://cestlaz.github.io/posts/sigcse2018-Malloc-Lab/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9ede4c6" class="outline-2"&gt;
&lt;h2 id="org9ede4c6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9ede4c6"&gt;
&lt;p&gt;
I wasn't going to go to this session. I started out in a panel on
integrating social good into CS Ed. With the panel not meeting my
expectations I moved over to my second choice - the system programming
sessions where I saw &lt;a href="https://dl.acm.org/citation.cfm?id=3159597"&gt;Implementing Malloc: Students and Systems
Programming&lt;/a&gt;, a paper presented by &lt;a href="http://www.cs.cmu.edu/~bpr/"&gt;Brian Railing&lt;/a&gt; of CMU.
&lt;/p&gt;

&lt;p&gt;
I really liked both the paper and the talk.
&lt;/p&gt;

&lt;p&gt;
CMU computer science students all take a systems course that uses
&lt;a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-3/dp/9332573905/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=Y5ZKG2V8ZYZZPZHQP8SQ"&gt;Computer Systems: A Programmer's Perspective&lt;/a&gt;. It's a great book. I
read through the first edition years ago and felt it was great
resource not only in a systems course but also for self study. One of
the labs has the students implement their own memory allocation calls,
or &lt;b&gt;malloc&lt;/b&gt; for us old time C wonks. 
&lt;/p&gt;

&lt;p&gt;
There were a number of self perceived  deficiencies with the
assignment such as encouraging bad programming style by modeling
less than ideal practices but the biggest deficiency as that students
could game the assignment. Students could do very well on the
assignment by exploiting knowledge of the assignment rather than by
writing a full and correct malloc implementation. One example is that
students were able to figure out that no allocation would be more than
100MB so they really didn't have to deal with 64 bit pointers. They
could use smaller offsets thus simplifying the assignment. The
assignment became more about figuring out how to get it through the
grader and less about learning memory management. I'm sure I'm
overstating it but that's the idea.
&lt;/p&gt;

&lt;p&gt;
Railing explained all of the deficiencies and then how they changed
the assignment to address them.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, the assignment had fewer loopholes to game so
students had to really write the malloc library and presumably learn
about memory management.
&lt;/p&gt;

&lt;p&gt;
They also added an intermediate deliverable so students couldn't leave
everything for the last minute.
&lt;/p&gt;

&lt;p&gt;
Near the end of the talk, Railing discussed results where he pointed
out that students final exam scores didn't change but they did better
on the malloc questions. It wasn't clear if the overall scores didn't
change, meaning that the students did better on the malloc questions
but worse somewhere else or if they did similarly to past students on
the other sections and in addition they scored better on the malloc
questions. I'm not sold on the final exam questions being the best way
to evaluate learning but it is an easy data point. 
&lt;/p&gt;

&lt;p&gt;
I loved the presentation and paper and I love what Railing is doing
but my big takeaway was…
&lt;/p&gt;

&lt;p&gt;
Well, Duh…
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;students aren't doing as they should&lt;/li&gt;
&lt;li&gt;teacher realizes students are gaming assignment&lt;/li&gt;
&lt;li&gt;teacher reworks assignment&lt;/li&gt;
&lt;li&gt;students do better&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Teachers do this all the time. Of course when we do it, it's not
"research." This was a recurring theme for me at SIGCSE2018 and I
tweeted it. While it's true that K12 teachers can learn a lot about CS
content from higher ed, people in higher ed can learn a lot about
teaching from teachers. 
&lt;/p&gt;

&lt;p&gt;
What Railing presented was terrific and important as changing
assignments like this will now be considered by people who haven't
thought about this before but this is second nature to a teacher. Of
course I'm talking about a good teacher, not one who blindly follows
scripted lessons.
&lt;/p&gt;

&lt;p&gt;
I don't mean this as a slight to professors. They're hired and
promoted based on research so much of their job involves another skill
set. I know many professors who care very much about teaching but they
might only teach one or two classes a semester that meets once or
twice a week while a typical high school teacher meets 150 students a
day five days a week over five different classes a day.  Much more of
an opportunity for deliberate practice.
&lt;/p&gt;

&lt;p&gt;
This presents a huge challenge. How can professors who are hired and
promoted as researchers be given the time and ability to develop as
teachers? What about adjuncts or Teaching Assistants? I'd imagine it's
even harder for them. I know that colleges have lines for teaching
faculty but from what I can see, those instructors are usually super
overloaded with classes and students so that doesn't solve the
problem. Even if you do have teaching faculty that have the time to
develop their craft, how do you get those teaching chops over to the
research faculty?
&lt;/p&gt;

&lt;p&gt;
After the session, I was talking about this with &lt;a href="http://www.cs.cmu.edu/~mjs/"&gt;Mark Stehlik&lt;/a&gt;,
Assistant Dean at CMU's School of Computer Science. Mark was telling
me about CMU's efforts to develop teaching faculty across the
disciplines. I was happy to hear about the efforts CMU was taking but
it sounds like they have the same challenges with respect to pedagogy
as everyone else. If it's a challenge for CMU with all their
resources, what does that mean for the rest of us?
&lt;/p&gt;

&lt;p&gt;
Still, it was encouraging to go to a number of sessions where it was
clear that professors - both teaching and research faculty are serious
about the craft of teaching and conferences like SIGCSE can bring them
together with those of us who don't have the chops as researchers but
do so as teachers.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>pedagogy</category><category>systems</category><guid>http://cestlaz.github.io/posts/sigcse2018-Malloc-Lab/</guid><pubDate>Thu, 01 Mar 2018 20:59:31 GMT</pubDate></item><item><title>Testing, Testing</title><link>http://cestlaz.github.io/posts/testing-testing/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orga2d6f11" class="outline-2"&gt;
&lt;h2 id="orga2d6f11"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga2d6f11"&gt;
&lt;p&gt;
With CS4All being the buzzword of the day we're paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won't end up studying CS or going directly
into a tech heavy field. 
&lt;/p&gt;

&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it's important that they're prepared in terms of
software development, design, and all those goodies not covered in CS
classes. 
&lt;/p&gt;

&lt;p&gt;
I'm not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I've reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students "comment your code," - a refrain
many undergrads have heard frequently with little guidance.
&lt;/p&gt;

&lt;p&gt;
I'm advocating to begin by bringing in tools and practices that either
don't detract from current CS classes or in fact can add to or
streamline them.
&lt;/p&gt;

&lt;p&gt;
Last year I wrote about &lt;a href="https://cestlaz.github.io/posts/sigcse-2017-github-4/"&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student's
and instructor's class experiences better while introducing them to an
industry best practice.
&lt;/p&gt;

&lt;p&gt;
Today I want to talk about testing. 
&lt;/p&gt;

&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;projects that don't compile&lt;/li&gt;
&lt;li&gt;projects that compile and run but not the way they're supposed to.&lt;/li&gt;
&lt;li&gt;wonky input or interfaces&lt;/li&gt;
&lt;li&gt;projects that don't work for all cases&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
On the instructor side, we have to evaluate the student's
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it's important for me as the teacher
to actually dive into the student's code. In any case, using an auto grader
is actually somewhat similar to running a test suite.
&lt;/p&gt;

&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission. 
&lt;/p&gt;

&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.
&lt;/p&gt;

&lt;p&gt;
I ended up finding &lt;a href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; for C++. It's really simple and just a
single include file. This means that students don't have to actually
install anything on their machines. Here's the example from the
project page:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif" alt="using_doctest_888px_wide.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Basically, the students can just start writing tests.
&lt;/p&gt;

&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Return the factorial of n, an exact integer &amp;gt;= 0.&lt;/span&gt;

&lt;span class="sd"&gt;    If the result is small enough to fit in an int, return an int.&lt;/span&gt;
&lt;span class="sd"&gt;    Else return a long.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; [factorial(n) for n in range(6)]&lt;/span&gt;
&lt;span class="sd"&gt;    [1, 1, 2, 6, 24, 120]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; factorial(30)&lt;/span&gt;
&lt;span class="sd"&gt;    265252859812191058636308480000000&lt;/span&gt;
&lt;span class="sd"&gt;     """&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n must be &amp;gt;= 0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n must be exact integer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# catch a value like 1e300&lt;/span&gt;
	&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;OverflowError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n too large"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;
	&lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring. 
&lt;/p&gt;

&lt;p&gt;
The other easy Python option is the built in &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; module. 
&lt;/p&gt;

&lt;p&gt;
Here's an example of testing strings from the link above:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestStringMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'FOO'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_isupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FOO'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Foo'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
	&lt;span class="c1"&gt;# check that s.split fails when the separator is not a string&lt;/span&gt;
	&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
I havn't played with Java testing in years but I'd guess there's
something similarly light weight.
&lt;/p&gt;

&lt;p&gt;
Tomorrow I'm hoping to finish the groundwork on using C++ doctest with
my class and I'll write another post afterwards. Probably after SIGCSE
since I'll be attending that from Wednesday on.
&lt;/p&gt;

&lt;p&gt;
We'll see how this goes but I'm guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they'll need wherever
they end up.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>software engineering</category><category>tools</category><guid>http://cestlaz.github.io/posts/testing-testing/</guid><pubDate>Mon, 19 Feb 2018 12:26:16 GMT</pubDate></item><item><title>APCS-P -  Bigger Intake Or Leaky Pipe</title><link>http://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org8ff8e49" class="outline-2"&gt;
&lt;h2 id="org8ff8e49"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8ff8e49"&gt;
&lt;p&gt;
Advanced Placement Computer Science got top billing on Alfred
Thompson's &lt;a href="http://blog.acthompson.net/2018/01/computer-science-education-things-im.html"&gt;Things I'm Watching in 2017&lt;/a&gt; post. Alfred talks about how
APCS-P exploded onto the scene and wonders what will happen with APCS
this year. 
&lt;/p&gt;

&lt;p&gt;
I have some questions as well but mine won't be answered for years to
come, if ever. 
&lt;/p&gt;

&lt;p&gt;
Like it or not, the College Board has an out sized influence on K12
education. As long as people are convinced that AP=good there will be
a push for more and more AP classes and APCS-P is a perfect class to
push. CS is the hot topic in K12, the topic is getting a big push
from both politicians and industry, the class has no pre-requisites
and in spite of being called a college course is somehow appropriate
for a typical tenth grader.
&lt;/p&gt;

&lt;p&gt;
The concern here is that at the end of the day. APCS-P is an exam or
rather an exam plus two other assessments. The quality can vary
greatly. I've heard of APCS-P implementations that seem pretty
rigorous and I've seen implementations that are, quite frankly, a
joke. The question is this: is APCS-P both motivating kids to go on to
the next level and just as importantly preparing them to succeed at
that level? 
&lt;/p&gt;

&lt;p&gt;
We might never know.
&lt;/p&gt;

&lt;p&gt;
A high school might only offer APCS-P. If APCS-A isn't offered, we
might not know if the student went on to take more CS and we won't
know if the student succeeded or not. I've seen this with some very
high profile, popular, after school/summer non-profits. The kids have
a great time and the non-profits rave about how much their kids learn
but then the kids take a real CS class in school and drop like
flies. Was it the teacher/professor or did the non-profit set the kids up to
fail by convincing them they knew a whole lot more than they did and
that CS was super easy all the time. 
&lt;/p&gt;

&lt;p&gt;
If credit is given for APCS-P, it looks like it will be blanket
credit. CS majors and minors will still have to take all the same classes in
college and CS so it will be very hard to tell if APCS-P is
responsible for any uptick in CS. 
&lt;/p&gt;

&lt;p&gt;
At the end of the day, the College Board is going to make a lot of
money but if APCS-P becomes the standard high school CS course will
this leave us with true, quality CS4All? I have my doubts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ap</category><category>cs</category><category>cs4all</category><guid>http://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</guid><pubDate>Mon, 01 Jan 2018 23:28:37 GMT</pubDate></item><item><title>2017 in review - Hunter Undergraduate CS</title><link>http://cestlaz.github.io/posts/2017-review-hunter-cs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org6747314" class="outline-2"&gt;
&lt;h2 id="org6747314"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6747314"&gt;
&lt;p&gt;
I usually don't do year in review posts. At Stuy, not much changed
year after year so I never felt it worth summarizing the past and
projecting the future. At Hunter, now that I'm a couple of years in,
projects are really picking up steam so I think it's worth talking
about them.
&lt;/p&gt;

&lt;p&gt;
One of my two major missions at Hunter was to build a CS Honors
program and raise the profile of Hunter's undergraduate CS program in
general. Hunter had a strong CS program before I joined the team it's
just that few people knew about it.
&lt;/p&gt;

&lt;p&gt;
My goal is to see Hunter become the "go to" institution for
undergraduate CS in New York City before my time is done.
&lt;/p&gt;

&lt;p&gt;
This is an extremely important mission. 
&lt;/p&gt;

&lt;p&gt;
There are other strong CS options besides Hunter but compare the costs:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Institution&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Annual Tuition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;NYU&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$50,464&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;NYY Tandon&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$48,750&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Columbia&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$54,504&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Hunter&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$6,530&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8d1b84" class="outline-2"&gt;
&lt;h2 id="orgc8d1b84"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc8d1b84"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hunter is about one tenth the cost.&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
True, if you're wealthy this isn't a problem and if you're at the
bottom of the economic ladder you might get a full ride but if you
fall into that category where you earn more than the financial aid
people think is "poor" but are clearly not rich you're left in a bad place. This seems
particularly true for New Yorkers as our income seems higher than that
of people from other parts of the country but our cost of living is
higher as well.
&lt;/p&gt;

&lt;p&gt;
My wife and I are both career public educators. No one would confuse a
family of two working teachers as upper class but we were granted no
financial aid for our kids. The alternatives without a great public
option are to have saved for our entire lives and now liquidate those
savings or go into tremendous debt.
&lt;/p&gt;

&lt;p&gt;
This alone makes the mission critical. Add to that the accessibility
issue - elite private institutions only have to concern themselves
with whatever slice of the population they choose to accept. We are
charged with providing a top flight education to all - be they the
high achievers, the late bloomers, the struggling students or anyone 
else.
&lt;/p&gt;

&lt;p&gt;
So, what's happened in the past year?
&lt;/p&gt;

&lt;p&gt;
First, the Daedalus honors program is developing nicely. In our first
year we had a cohort of 12. This past year 27. I haven't seen the
applicant pool yet - Hunter applications are open until the end of
January, but I'm hoping to bring in an even larger cohort this year. I
spent a good amount of time this fall visiting high schools to talk
about Hunter CS and CS options in general. Not as many as I'd like but
more than during year one. 
&lt;/p&gt;

&lt;p&gt;
We had classes, trips, and special events but more important was that
the cohort is starting to form a community and the students want it to
be a community that includes ALL of Hunter CS, not just the honors
students.
&lt;/p&gt;

&lt;p&gt;
They've started a once a week Dojo where students can work on projects
and interact and we're starting an evening speaker series in
the Spring. 
&lt;/p&gt;

&lt;p&gt;
Overall there's a vibe of excitement and an energy around Hunter CS
that I've been told hasn't been there before.
&lt;/p&gt;

&lt;p&gt;
In my class, I've been introducing a number of real world practices
that are usually not covered in undergraduate CS and we're starting to
talk about bringing those practices into the non-honors sections.
&lt;/p&gt;

&lt;p&gt;
Finally, we've started to partner with the New York Tech
community. We're bringing together the Hunter students and the tech
professionals to raise awareness outside of Hunter of what our
students can do and to best prepare our students for their next
steps. These partnerships, in addition to internship possibilities
have led to us planning some great things this coming semester
incuding:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;workshops such as how to work on an open source project or how to do
a code review.&lt;/li&gt;
&lt;li&gt;Having industry mentors at our local Dojo sessions.&lt;/li&gt;
&lt;li&gt;Mixer events to educate our students as to the variety of pathways
they can follow when they graduate.&lt;/li&gt;
&lt;li&gt;and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This past year set the stage but there will be some challenges moving
forward.
&lt;/p&gt;

&lt;p&gt;
The biggest one is continued outreach to high schools. Getting to the
students and their parents to let them know that we have a great
program. It's also about convincing them to come to Hunter. Back in
the day CUNY was "the poor man's Harvard" but open enrollment in the
1970s killed that reputation. CUNY has been making it's way back and
Hunter has many excellent programs but reputations are decades in the
making and at Hunter CS we're just starting to get the word out.
&lt;/p&gt;

&lt;p&gt;
The other big challenge will be with time. Right now, for the most
part, I'm a team of one. I have tremendous support from my colleagues
but they all have their own full time obligations and the overall
growth in Hunter CS has already put a strain on personnel and
resources.
&lt;/p&gt;

&lt;p&gt;
In spite of the challenges, I'm not complaining. This has been an
exciting year for Hunter CS and an exciting year for me to be a part
of it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>hunter</category><guid>http://cestlaz.github.io/posts/2017-review-hunter-cs/</guid><pubDate>Tue, 26 Dec 2017 15:05:52 GMT</pubDate></item><item><title>Breaking down problems and writing</title><link>http://cestlaz.github.io/posts/whats-next/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org923d898" class="outline-2"&gt;
&lt;h2 id="org923d898"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org923d898"&gt;
&lt;p&gt;
This question appeared on Facebook a few days ago:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Does anyone have an effective way to teach students how to break down
a problem into steps and then solve each step one by one? I think my
students are struggling with a large question and breaking it in
subsequent parts.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
There were some good suggestions. I wanted to add something but didn't
have time then so I thought I'd write it up now.
&lt;/p&gt;

&lt;p&gt;
As an aside, it took me forever to find the post again over on
Facebook. If there's a way to mark posts or save a direct link I'd
love to hear it. I had to look through all the CS Ed groups I belong
to manually until I found it again.
&lt;/p&gt;

&lt;p&gt;
When I read the program I was reminded of a PD session we had to
attend back at Stuyvesant. Back then the fad was &lt;a href="https://en.wikipedia.org/wiki/Writing_across_the_curriculum"&gt;Writing Across the
Curriculum&lt;/a&gt;. Every teacher in every class was to give some significant
writing assignment, evaluate it and provide feedback. Let's forget the
fact that most of us never had any training or preparation to do so.
&lt;/p&gt;

&lt;p&gt;
On that PD day the guest speaker was &lt;a href="https://en.wikipedia.org/wiki/William_Zinsser"&gt;William Zinsser&lt;/a&gt;. The first thing
he said was that what we were being asked to do by our principal was
bunk. He then proceeded to give advice on  simple good writing.
&lt;/p&gt;

&lt;p&gt;
The procedure he recommended following was to ask yourself (or have
the student ask themselves) "what does my audience need to know next?"
That's your next sentence. Then ask the question again. Rinse and
repeat until done.
&lt;/p&gt;

&lt;p&gt;
It was simple and it made sense. It also applied to introductory CS
problems. When starting out, students have a limited CS / programming
tool box so a good question for them to ask when trying to solve a
problem is not only "what do I need to do next? but also "what can I
do next?" 
&lt;/p&gt;

&lt;p&gt;
When students have a limited CS vocabulary and set of idioms - loops,
conditionals, functions, whatever, there will only be so many things
they can do to move a problem along. If they go through the things the
&lt;b&gt;&lt;b&gt;can&lt;/b&gt;&lt;/b&gt; do they will likely fall on to what they &lt;b&gt;&lt;b&gt;should&lt;/b&gt;&lt;/b&gt; do.
&lt;/p&gt;

&lt;p&gt;
It's similar to doing a proof in geometry. Students have a set of
givens. Given that set, what can they do? They only know so many
theorems at the beginning. 
&lt;/p&gt;

&lt;p&gt;
Over time, they'll recognize patterns and develop as problem solvers.
&lt;/p&gt;

&lt;p&gt;
If you're part of the AP CS A teachers facebook group you probably saw
the question. Many good answers were posted. I just wanted to add this
thought to the collection.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>problem solving</category><guid>http://cestlaz.github.io/posts/whats-next/</guid><pubDate>Thu, 14 Dec 2017 16:14:33 GMT</pubDate></item><item><title>New York State moving forward with CS Teacher Certification</title><link>http://cestlaz.github.io/posts/NY-CS-Certificate/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org266c823" class="outline-2"&gt;
&lt;h2 id="org266c823"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org266c823"&gt;
&lt;p&gt;
Last April I woke up early and trekked up to Albany along with a few
of my Hunter College colleagues to share our thoughts on K12 Computer
Science teacher certification with the Board of Regents. We gave a
presentation to the Regents Higher Education Committee and afterwards
had a chance to talk with some of the Regents as well as other members
of the New York State Department of Education.
&lt;/p&gt;

&lt;p&gt;
I left feeling that our proposals were well received and I think
everyone present - both the Hunter and NYSED contingents hoped that
things would move forward on this important issue.
&lt;/p&gt;

&lt;p&gt;
Fast forward to today, December 8, 2017. I was up at the crack
of dawn. Driving in the dark in the snow from NYC to Albany to once
again attend a Board of Regents Higher Education Committee
meeting. This time, the agenda item was:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Proposed Amendments to Part 30 of the Regents Rules and Section 52.21
and Part 80 the Regulations of the Commissioner of Education Relating
to a New Certification Area and Tenure Area for Computer Science 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
No discussion or debate this time around just the proposal. If I
understand the process correctly, this should come up again at the
March meeting at which point it will be voted on. If approved, it
looks like we'll have a pathway towards certification for CS teachers.
&lt;/p&gt;

&lt;p&gt;
I haven't had a chance to dive into the details but at the meeting a
few key points came up:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;As the proposal indicates this will be a subject area in which a
teacher can be certified and be awarded tenure.&lt;/li&gt;
&lt;li&gt;There will be a traditional pathway for new teachers - Bachelors /
Masters degree&lt;/li&gt;
&lt;li&gt;There will be an alternative pathway for people entering from the
workforce&lt;/li&gt;
&lt;li&gt;There will be an extension for teachers with another license so they
won't have to give up tenure in their current license.&lt;/li&gt;
&lt;li&gt;There will be an "individual evaluation" pathway which sounds to me
like it could catch people who fall through the cracks.&lt;/li&gt;
&lt;li&gt;There looks to be a sensible ramp up period - until September 2022&lt;/li&gt;
&lt;li&gt;There's a grandfathering provision that looks to last 10 years.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This sounds like a smart sensible plan. Multiple pathways, shallow
ramp up and provisions to protect existing teachers.
&lt;/p&gt;

&lt;p&gt;
Of course, the devil is in the details. What's an approved program?
Can a grandfathered teacher teach all CS classes or just intro ones?
etc.
&lt;/p&gt;

&lt;p&gt;
As I said, I haven't had a chance to dive into the details yet but
this is very exciting.
&lt;/p&gt;

&lt;p&gt;
Prior to the meeting I was chatting with a few other people
attending. One, a &lt;a href="http://www.uft.org/"&gt;UFT&lt;/a&gt; representative was very excited about the
prospect. Another contingent, a group from &lt;a href="https://www.nysut.org/"&gt;NYSUT&lt;/a&gt; was very much against
a new certification area. Their position was that this would create a
teacher shortage because no one would have a CS license and no one
would get one due to the difference in salary between teaching and the
tech industry. I've already written on how I feel that this is a &lt;a href="https://cestlaz.github.io/posts/will-we-lose-cs-teachers-to-industry"&gt;red
herring&lt;/a&gt;. What shocked me though was their feeling that "we already
have many non-CS teachers effectively teaching CS across the
state. They're doing a great job and don't need any additional content
or pedagogical knowledge." I think they're wrong and I also think that
when we as a community talk about how our summer professional
development is all that's needed, we undercut CS education and
the teaching profession as a whole.
&lt;/p&gt;

&lt;p&gt;
In any event this was a big step for New York. I tried to individually
thank as many of the participants as I could for helping shepherd this
along but could only speak to a few so I'll just give a blanket thank
you here to the NY State Board of Regents, Board of Education and
State Education department.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>certification</category><category>cs</category><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/NY-CS-Certificate/</guid><pubDate>Tue, 12 Dec 2017 23:57:37 GMT</pubDate></item><item><title>Advent of Code 2017 - Day 1</title><link>http://cestlaz.github.io/posts/advent-2017-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org5cf76f3" class="outline-2"&gt;
&lt;h2 id="org5cf76f3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5cf76f3"&gt;
&lt;p&gt;
It's once again time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt;. That one a day programming
competition that's been running now for three years.
&lt;/p&gt;

&lt;p&gt;
Here are some thoughts on &lt;a href="http://adventofcode.com/2017/day/1"&gt;day 1&lt;/a&gt;. The core of the problem is that you
have a large string of digits and you have to calculate a
checksum. This is done by adding the sum of a subset of the
digits. Only the ones that are identical to the digit to their
right. To make it a little more interesting, the last digit wraps
around to the first for checksum purposes.
&lt;/p&gt;

&lt;p&gt;
For example, the input &lt;b&gt;&lt;b&gt;2234335&lt;/b&gt;&lt;/b&gt; leads to the calculate &lt;code&gt;2 + 3&lt;/code&gt; or
&lt;code&gt;5&lt;/code&gt;. The input &lt;b&gt;&lt;b&gt;234445662&lt;/b&gt;&lt;/b&gt; leads to &lt;code&gt;4+4+6+2&lt;/code&gt; or &lt;code&gt;16&lt;/code&gt;. We add 4 for
twice because the first four is adjacent the second and the second the
third. We add the 2 at the end because it wraps around to match the
one at the front.
&lt;/p&gt;

&lt;p&gt;
We first read in the data and strip off the trailing newline
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;origdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;origdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origdata&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, since we can access the elements of the string as a list (or
array) it's a simple loop to calculate the sum:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Don't forget to turn the string into an int&lt;/span&gt;

&lt;span class="c1"&gt;# data[-1] is the python way of getting the last element - here we check the wraparound&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Checksum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Pretty straightforward but I don't like the special case of checking
the last element for the wraparound. Sometimes it's possible to get
rid of edge cases like this by &lt;a href="https://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt;. We can do that here
by simply appending a copy of the first character to the end of the
list.
&lt;/p&gt;

&lt;p&gt;
This leads to a slightly cleaner solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#don't forget to turn the string into an int&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Checksum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is pretty much what I'd expect from a Python programmer that's
just starting out. We can use a couple of more advanced Python
features to make what I consider a more elegant solution.
&lt;/p&gt;

&lt;p&gt;
Python's &lt;b&gt;&lt;b&gt;zip&lt;/b&gt;&lt;/b&gt; function takes two lists and interleaves them.
&lt;code&gt;zip("abc","def")&lt;/code&gt; will yield &lt;code&gt;[ (a,d), (b,e), (c,f)]&lt;/code&gt;. If the lists
are of different length, it just zips up until the shorter list is
exhausted. We can use array slicing to zip the input string with it's
neighbor by using &lt;code&gt;new_list = zip(data,data[1:])&lt;/code&gt;. For the string "122344'
zipping gives us &lt;code&gt;[(1,2),(2,2),(2,3),(3,4),(4,4)]&lt;/code&gt;. We can put this in
a list comprehension that only keeps the tuples representing an
element with an identical neighbor and also converts it to an int:
&lt;code&gt;new_list = [int(a) for a,b in new_list if a==b]&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, we can just calculate the sum. This leads to the following
complete solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
List comprehensions for the win!!!!
&lt;/p&gt;

&lt;p&gt;
Each Advent of Code problem has two parts. You unlock the second by
solving the first. Here, the wrinkle is that instead of checking each
digit with it's neighbor to the right, you check it with the one
that's halfway around the list. 
&lt;/p&gt;

&lt;p&gt;
With loops, the solution is just a quick modification of part 1. We
just add half the length and use mod to find the digit to compare with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;# check halfway around instead of adjacent&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"part 2loop version: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I wanted to see if I could do this with a list comprehension
though. The trick was to figure out how to make two lists to zip
together to get the pairs to check then add. Here's the solution:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The insight was that we could just make a second list that starts
halfway through and then wraps around. I did this by adding
&lt;code&gt;data[l//2:] + data&lt;/code&gt;. &lt;code&gt;l//2&lt;/code&gt; is the integer division of the length (in
Python3). &lt;code&gt;data[l//2:]&lt;/code&gt; represents the second half of data (from the
midway point to the end). Technically I should have only added the second
half of data: &lt;code&gt;data[l//2:] + data[:l//2]&lt;/code&gt; where &lt;code&gt;data[:l//2]&lt;/code&gt; gives us
the first half of the list but since zip will just stop when it
exhausts the shorter list, this wasn't necessary.
&lt;/p&gt;

&lt;p&gt;
Day 2 also has a nice list comprehension based solution. Maybe I'll
write that up later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>adventofcode</category><category>cs</category><category>programming</category><category>python</category><guid>http://cestlaz.github.io/posts/advent-2017-1/</guid><pubDate>Sat, 02 Dec 2017 12:27:02 GMT</pubDate></item><item><title>Motivating and understanding quicksort</title><link>http://cestlaz.github.io/posts/quick-sort-starting/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org51b8cd8" class="outline-2"&gt;
&lt;h2 id="org51b8cd8"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org51b8cd8"&gt;
&lt;p&gt;
Thks question was posed the other day - how can one get students to
truly understand the quicksort algorithm?
&lt;/p&gt;

&lt;p&gt;
I've written a few posts about quicksort. The last time I did a &lt;a href="https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/"&gt;lesson
writeup&lt;/a&gt; on the subject I wrote about first looking and quickselect and
then moving to the quicksort. The class was first faced with the
problem of writing a routine to find the Kth smallest item in an
unsorted data set. The first solution was n&lt;sup&gt;2&lt;/sup&gt; and then refined to a
quickselect. This led directly to the quicksort. 
&lt;/p&gt;

&lt;p&gt;
I liked the lesson and I think it worked well when I taught it but
that was partly due to the overall tenor of that particular group of
students.
&lt;/p&gt;

&lt;p&gt;
A similar approach develops the quicksort in a similar way but is
both more direct and accessible.
&lt;/p&gt;

&lt;p&gt;
The motivating problem is to put one item in a data set in its proper
place. You could select one person in class and arrange the class so
that the selected student is in their proper size place, that is
everyone shorter on one side, taller on the other. You could also do
this for age. A similar exercise could be done with any number of
manipulatives.
&lt;/p&gt;

&lt;p&gt;
This operation of arranging the rest of the set around one selected
item or person is very easy and in fact it's trivial to show that this
can be done in linear time. 
&lt;/p&gt;

&lt;p&gt;
Once we've done this arrangement, we can discuss what we can infer
from this new arrangement. We can now tell that:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;everyone to the left of the "pivot" is less than the pivot&lt;/li&gt;
&lt;li&gt;everyone to the right is greater&lt;/li&gt;
&lt;li&gt;The pivot element is at its true location if the list were
sorted. That is, if we started arranging around item k, then we've
moved item k to the kth location in the dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
From here it's a small jump to the quicksort algorithm, just repeat
the process on the left and right data sets.
&lt;/p&gt;

&lt;p&gt;
This approach not only makes the algorithm and its development clear
and simple but it also can be used to illustrate the worst case n&lt;sup&gt;2&lt;/sup&gt;
behavior. 
&lt;/p&gt;

&lt;p&gt;
The whole thing, minus the coding, can also be done as an unplugged activity.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, I also wrote a post on subtle
implementation errors when writing the quicksort (&lt;a href="https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html"&gt;here&lt;/a&gt;) and also
looking at the qucksort from the point of view of different
programming paradigms (&lt;a href="https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html"&gt;here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms. unplugged</category><category>cs</category><category>programming</category><guid>http://cestlaz.github.io/posts/quick-sort-starting/</guid><pubDate>Tue, 21 Nov 2017 14:34:05 GMT</pubDate></item></channel></rss>