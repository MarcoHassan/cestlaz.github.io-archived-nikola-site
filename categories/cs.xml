<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about cs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/cs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 12 Feb 2018 19:18:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>APCS-P -  Bigger Intake Or Leaky Pipe</title><link>http://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org8ff8e49" class="outline-2"&gt;
&lt;h2 id="org8ff8e49"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8ff8e49"&gt;
&lt;p&gt;
Advanced Placement Computer Science got top billing on Alfred
Thompson's &lt;a href="http://blog.acthompson.net/2018/01/computer-science-education-things-im.html"&gt;Things I'm Watching in 2017&lt;/a&gt; post. Alfred talks about how
APCS-P exploded onto the scene and wonders what will happen with APCS
this year. 
&lt;/p&gt;

&lt;p&gt;
I have some questions as well but mine won't be answered for years to
come, if ever. 
&lt;/p&gt;

&lt;p&gt;
Like it or not, the College Board has an out sized influence on K12
education. As long as people are convinced that AP=good there will be
a push for more and more AP classes and APCS-P is a perfect class to
push. CS is the hot topic in K12, the topic is getting a big push
from both politicians and industry, the class has no pre-requisites
and in spite of being called a college course is somehow appropriate
for a typical tenth grader.
&lt;/p&gt;

&lt;p&gt;
The concern here is that at the end of the day. APCS-P is an exam or
rather an exam plus two other assessments. The quality can vary
greatly. I've heard of APCS-P implementations that seem pretty
rigorous and I've seen implementations that are, quite frankly, a
joke. The question is this: is APCS-P both motivating kids to go on to
the next level and just as importantly preparing them to succeed at
that level? 
&lt;/p&gt;

&lt;p&gt;
We might never know.
&lt;/p&gt;

&lt;p&gt;
A high school might only offer APCS-P. If APCS-A isn't offered, we
might not know if the student went on to take more CS and we won't
know if the student succeeded or not. I've seen this with some very
high profile, popular, after school/summer non-profits. The kids have
a great time and the non-profits rave about how much their kids learn
but then the kids take a real CS class in school and drop like
flies. Was it the teacher/professor or did the non-profit set the kids up to
fail by convincing them they knew a whole lot more than they did and
that CS was super easy all the time. 
&lt;/p&gt;

&lt;p&gt;
If credit is given for APCS-P, it looks like it will be blanket
credit. CS majors and minors will still have to take all the same classes in
college and CS so it will be very hard to tell if APCS-P is
responsible for any uptick in CS. 
&lt;/p&gt;

&lt;p&gt;
At the end of the day, the College Board is going to make a lot of
money but if APCS-P becomes the standard high school CS course will
this leave us with true, quality CS4All? I have my doubts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ap</category><category>cs</category><category>cs4all</category><guid>http://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</guid><pubDate>Mon, 01 Jan 2018 23:28:37 GMT</pubDate></item><item><title>2017 in review - Hunter Undergraduate CS</title><link>http://cestlaz.github.io/posts/2017-review-hunter-cs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org6747314" class="outline-2"&gt;
&lt;h2 id="org6747314"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6747314"&gt;
&lt;p&gt;
I usually don't do year in review posts. At Stuy, not much changed
year after year so I never felt it worth summarizing the past and
projecting the future. At Hunter, now that I'm a couple of years in,
projects are really picking up steam so I think it's worth talking
about them.
&lt;/p&gt;

&lt;p&gt;
One of my two major missions at Hunter was to build a CS Honors
program and raise the profile of Hunter's undergraduate CS program in
general. Hunter had a strong CS program before I joined the team it's
just that few people knew about it.
&lt;/p&gt;

&lt;p&gt;
My goal is to see Hunter become the "go to" institution for
undergraduate CS in New York City before my time is done.
&lt;/p&gt;

&lt;p&gt;
This is an extremely important mission. 
&lt;/p&gt;

&lt;p&gt;
There are other strong CS options besides Hunter but compare the costs:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Institution&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Annual Tuition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;NYU&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$50,464&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;NYY Tandon&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$48,750&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Columbia&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$54,504&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Hunter&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;$6,530&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8d1b84" class="outline-2"&gt;
&lt;h2 id="orgc8d1b84"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc8d1b84"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hunter is about one tenth the cost.&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
True, if you're wealthy this isn't a problem and if you're at the
bottom of the economic ladder you might get a full ride but if you
fall into that category where you earn more than the financial aid
people think is "poor" but are clearly not rich you're left in a bad place. This seems
particularly true for New Yorkers as our income seems higher than that
of people from other parts of the country but our cost of living is
higher as well.
&lt;/p&gt;

&lt;p&gt;
My wife and I are both career public educators. No one would confuse a
family of two working teachers as upper class but we were granted no
financial aid for our kids. The alternatives without a great public
option are to have saved for our entire lives and now liquidate those
savings or go into tremendous debt.
&lt;/p&gt;

&lt;p&gt;
This alone makes the mission critical. Add to that the accessibility
issue - elite private institutions only have to concern themselves
with whatever slice of the population they choose to accept. We are
charged with providing a top flight education to all - be they the
high achievers, the late bloomers, the struggling students or anyone 
else.
&lt;/p&gt;

&lt;p&gt;
So, what's happened in the past year?
&lt;/p&gt;

&lt;p&gt;
First, the Daedalus honors program is developing nicely. In our first
year we had a cohort of 12. This past year 27. I haven't seen the
applicant pool yet - Hunter applications are open until the end of
January, but I'm hoping to bring in an even larger cohort this year. I
spent a good amount of time this fall visiting high schools to talk
about Hunter CS and CS options in general. Not as many as I'd like but
more than during year one. 
&lt;/p&gt;

&lt;p&gt;
We had classes, trips, and special events but more important was that
the cohort is starting to form a community and the students want it to
be a community that includes ALL of Hunter CS, not just the honors
students.
&lt;/p&gt;

&lt;p&gt;
They've started a once a week Dojo where students can work on projects
and interact and we're starting an evening speaker series in
the Spring. 
&lt;/p&gt;

&lt;p&gt;
Overall there's a vibe of excitement and an energy around Hunter CS
that I've been told hasn't been there before.
&lt;/p&gt;

&lt;p&gt;
In my class, I've been introducing a number of real world practices
that are usually not covered in undergraduate CS and we're starting to
talk about bringing those practices into the non-honors sections.
&lt;/p&gt;

&lt;p&gt;
Finally, we've started to partner with the New York Tech
community. We're bringing together the Hunter students and the tech
professionals to raise awareness outside of Hunter of what our
students can do and to best prepare our students for their next
steps. These partnerships, in addition to internship possibilities
have led to us planning some great things this coming semester
incuding:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;workshops such as how to work on an open source project or how to do
a code review.&lt;/li&gt;
&lt;li&gt;Having industry mentors at our local Dojo sessions.&lt;/li&gt;
&lt;li&gt;Mixer events to educate our students as to the variety of pathways
they can follow when they graduate.&lt;/li&gt;
&lt;li&gt;and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This past year set the stage but there will be some challenges moving
forward.
&lt;/p&gt;

&lt;p&gt;
The biggest one is continued outreach to high schools. Getting to the
students and their parents to let them know that we have a great
program. It's also about convincing them to come to Hunter. Back in
the day CUNY was "the poor man's Harvard" but open enrollment in the
1970s killed that reputation. CUNY has been making it's way back and
Hunter has many excellent programs but reputations are decades in the
making and at Hunter CS we're just starting to get the word out.
&lt;/p&gt;

&lt;p&gt;
The other big challenge will be with time. Right now, for the most
part, I'm a team of one. I have tremendous support from my colleagues
but they all have their own full time obligations and the overall
growth in Hunter CS has already put a strain on personnel and
resources.
&lt;/p&gt;

&lt;p&gt;
In spite of the challenges, I'm not complaining. This has been an
exciting year for Hunter CS and an exciting year for me to be a part
of it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>hunter</category><guid>http://cestlaz.github.io/posts/2017-review-hunter-cs/</guid><pubDate>Tue, 26 Dec 2017 15:05:52 GMT</pubDate></item><item><title>Breaking down problems and writing</title><link>http://cestlaz.github.io/posts/whats-next/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org923d898" class="outline-2"&gt;
&lt;h2 id="org923d898"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org923d898"&gt;
&lt;p&gt;
This question appeared on Facebook a few days ago:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Does anyone have an effective way to teach students how to break down
a problem into steps and then solve each step one by one? I think my
students are struggling with a large question and breaking it in
subsequent parts.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
There were some good suggestions. I wanted to add something but didn't
have time then so I thought I'd write it up now.
&lt;/p&gt;

&lt;p&gt;
As an aside, it took me forever to find the post again over on
Facebook. If there's a way to mark posts or save a direct link I'd
love to hear it. I had to look through all the CS Ed groups I belong
to manually until I found it again.
&lt;/p&gt;

&lt;p&gt;
When I read the program I was reminded of a PD session we had to
attend back at Stuyvesant. Back then the fad was &lt;a href="https://en.wikipedia.org/wiki/Writing_across_the_curriculum"&gt;Writing Across the
Curriculum&lt;/a&gt;. Every teacher in every class was to give some significant
writing assignment, evaluate it and provide feedback. Let's forget the
fact that most of us never had any training or preparation to do so.
&lt;/p&gt;

&lt;p&gt;
On that PD day the guest speaker was &lt;a href="https://en.wikipedia.org/wiki/William_Zinsser"&gt;William Zinsser&lt;/a&gt;. The first thing
he said was that what we were being asked to do by our principal was
bunk. He then proceeded to give advice on  simple good writing.
&lt;/p&gt;

&lt;p&gt;
The procedure he recommended following was to ask yourself (or have
the student ask themselves) "what does my audience need to know next?"
That's your next sentence. Then ask the question again. Rinse and
repeat until done.
&lt;/p&gt;

&lt;p&gt;
It was simple and it made sense. It also applied to introductory CS
problems. When starting out, students have a limited CS / programming
tool box so a good question for them to ask when trying to solve a
problem is not only "what do I need to do next? but also "what can I
do next?" 
&lt;/p&gt;

&lt;p&gt;
When students have a limited CS vocabulary and set of idioms - loops,
conditionals, functions, whatever, there will only be so many things
they can do to move a problem along. If they go through the things the
&lt;b&gt;&lt;b&gt;can&lt;/b&gt;&lt;/b&gt; do they will likely fall on to what they &lt;b&gt;&lt;b&gt;should&lt;/b&gt;&lt;/b&gt; do.
&lt;/p&gt;

&lt;p&gt;
It's similar to doing a proof in geometry. Students have a set of
givens. Given that set, what can they do? They only know so many
theorems at the beginning. 
&lt;/p&gt;

&lt;p&gt;
Over time, they'll recognize patterns and develop as problem solvers.
&lt;/p&gt;

&lt;p&gt;
If you're part of the AP CS A teachers facebook group you probably saw
the question. Many good answers were posted. I just wanted to add this
thought to the collection.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>problem solving</category><guid>http://cestlaz.github.io/posts/whats-next/</guid><pubDate>Thu, 14 Dec 2017 16:14:33 GMT</pubDate></item><item><title>New York State moving forward with CS Teacher Certification</title><link>http://cestlaz.github.io/posts/NY-CS-Certificate/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org266c823" class="outline-2"&gt;
&lt;h2 id="org266c823"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org266c823"&gt;
&lt;p&gt;
Last April I woke up early and trekked up to Albany along with a few
of my Hunter College colleagues to share our thoughts on K12 Computer
Science teacher certification with the Board of Regents. We gave a
presentation to the Regents Higher Education Committee and afterwards
had a chance to talk with some of the Regents as well as other members
of the New York State Department of Education.
&lt;/p&gt;

&lt;p&gt;
I left feeling that our proposals were well received and I think
everyone present - both the Hunter and NYSED contingents hoped that
things would move forward on this important issue.
&lt;/p&gt;

&lt;p&gt;
Fast forward to today, December 8, 2017. I was up at the crack
of dawn. Driving in the dark in the snow from NYC to Albany to once
again attend a Board of Regents Higher Education Committee
meeting. This time, the agenda item was:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Proposed Amendments to Part 30 of the Regents Rules and Section 52.21
and Part 80 the Regulations of the Commissioner of Education Relating
to a New Certification Area and Tenure Area for Computer Science 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
No discussion or debate this time around just the proposal. If I
understand the process correctly, this should come up again at the
March meeting at which point it will be voted on. If approved, it
looks like we'll have a pathway towards certification for CS teachers.
&lt;/p&gt;

&lt;p&gt;
I haven't had a chance to dive into the details but at the meeting a
few key points came up:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;As the proposal indicates this will be a subject area in which a
teacher can be certified and be awarded tenure.&lt;/li&gt;
&lt;li&gt;There will be a traditional pathway for new teachers - Bachelors /
Masters degree&lt;/li&gt;
&lt;li&gt;There will be an alternative pathway for people entering from the
workforce&lt;/li&gt;
&lt;li&gt;There will be an extension for teachers with another license so they
won't have to give up tenure in their current license.&lt;/li&gt;
&lt;li&gt;There will be an "individual evaluation" pathway which sounds to me
like it could catch people who fall through the cracks.&lt;/li&gt;
&lt;li&gt;There looks to be a sensible ramp up period - until September 2022&lt;/li&gt;
&lt;li&gt;There's a grandfathering provision that looks to last 10 years.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This sounds like a smart sensible plan. Multiple pathways, shallow
ramp up and provisions to protect existing teachers.
&lt;/p&gt;

&lt;p&gt;
Of course, the devil is in the details. What's an approved program?
Can a grandfathered teacher teach all CS classes or just intro ones?
etc.
&lt;/p&gt;

&lt;p&gt;
As I said, I haven't had a chance to dive into the details yet but
this is very exciting.
&lt;/p&gt;

&lt;p&gt;
Prior to the meeting I was chatting with a few other people
attending. One, a &lt;a href="http://www.uft.org/"&gt;UFT&lt;/a&gt; representative was very excited about the
prospect. Another contingent, a group from &lt;a href="https://www.nysut.org/"&gt;NYSUT&lt;/a&gt; was very much against
a new certification area. Their position was that this would create a
teacher shortage because no one would have a CS license and no one
would get one due to the difference in salary between teaching and the
tech industry. I've already written on how I feel that this is a &lt;a href="https://cestlaz.github.io/posts/will-we-lose-cs-teachers-to-industry"&gt;red
herring&lt;/a&gt;. What shocked me though was their feeling that "we already
have many non-CS teachers effectively teaching CS across the
state. They're doing a great job and don't need any additional content
or pedagogical knowledge." I think they're wrong and I also think that
when we as a community talk about how our summer professional
development is all that's needed, we undercut CS education and
the teaching profession as a whole.
&lt;/p&gt;

&lt;p&gt;
In any event this was a big step for New York. I tried to individually
thank as many of the participants as I could for helping shepherd this
along but could only speak to a few so I'll just give a blanket thank
you here to the NY State Board of Regents, Board of Education and
State Education department.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>certification</category><category>cs</category><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/NY-CS-Certificate/</guid><pubDate>Tue, 12 Dec 2017 23:57:37 GMT</pubDate></item><item><title>Advent of Code 2017 - Day 1</title><link>http://cestlaz.github.io/posts/advent-2017-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org5cf76f3" class="outline-2"&gt;
&lt;h2 id="org5cf76f3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5cf76f3"&gt;
&lt;p&gt;
It's once again time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt;. That one a day programming
competition that's been running now for three years.
&lt;/p&gt;

&lt;p&gt;
Here are some thoughts on &lt;a href="http://adventofcode.com/2017/day/1"&gt;day 1&lt;/a&gt;. The core of the problem is that you
have a large string of digits and you have to calculate a
checksum. This is done by adding the sum of a subset of the
digits. Only the ones that are identical to the digit to their
right. To make it a little more interesting, the last digit wraps
around to the first for checksum purposes.
&lt;/p&gt;

&lt;p&gt;
For example, the input &lt;b&gt;&lt;b&gt;2234335&lt;/b&gt;&lt;/b&gt; leads to the calculate &lt;code&gt;2 + 3&lt;/code&gt; or
&lt;code&gt;5&lt;/code&gt;. The input &lt;b&gt;&lt;b&gt;234445662&lt;/b&gt;&lt;/b&gt; leads to &lt;code&gt;4+4+6+2&lt;/code&gt; or &lt;code&gt;16&lt;/code&gt;. We add 4 for
twice because the first four is adjacent the second and the second the
third. We add the 2 at the end because it wraps around to match the
one at the front.
&lt;/p&gt;

&lt;p&gt;
We first read in the data and strip off the trailing newline
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;origdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;origdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origdata&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, since we can access the elements of the string as a list (or
array) it's a simple loop to calculate the sum:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Don't forget to turn the string into an int&lt;/span&gt;

&lt;span class="c1"&gt;# data[-1] is the python way of getting the last element - here we check the wraparound&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Checksum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Pretty straightforward but I don't like the special case of checking
the last element for the wraparound. Sometimes it's possible to get
rid of edge cases like this by &lt;a href="https://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt;. We can do that here
by simply appending a copy of the first character to the end of the
list.
&lt;/p&gt;

&lt;p&gt;
This leads to a slightly cleaner solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#don't forget to turn the string into an int&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Checksum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is pretty much what I'd expect from a Python programmer that's
just starting out. We can use a couple of more advanced Python
features to make what I consider a more elegant solution.
&lt;/p&gt;

&lt;p&gt;
Python's &lt;b&gt;&lt;b&gt;zip&lt;/b&gt;&lt;/b&gt; function takes two lists and interleaves them.
&lt;code&gt;zip("abc","def")&lt;/code&gt; will yield &lt;code&gt;[ (a,d), (b,e), (c,f)]&lt;/code&gt;. If the lists
are of different length, it just zips up until the shorter list is
exhausted. We can use array slicing to zip the input string with it's
neighbor by using &lt;code&gt;new_list = zip(data,data[1:])&lt;/code&gt;. For the string "122344'
zipping gives us &lt;code&gt;[(1,2),(2,2),(2,3),(3,4),(4,4)]&lt;/code&gt;. We can put this in
a list comprehension that only keeps the tuples representing an
element with an identical neighbor and also converts it to an int:
&lt;code&gt;new_list = [int(a) for a,b in new_list if a==b]&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, we can just calculate the sum. This leads to the following
complete solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
List comprehensions for the win!!!!
&lt;/p&gt;

&lt;p&gt;
Each Advent of Code problem has two parts. You unlock the second by
solving the first. Here, the wrinkle is that instead of checking each
digit with it's neighbor to the right, you check it with the one
that's halfway around the list. 
&lt;/p&gt;

&lt;p&gt;
With loops, the solution is just a quick modification of part 1. We
just add half the length and use mod to find the digit to compare with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;# check halfway around instead of adjacent&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"part 2loop version: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I wanted to see if I could do this with a list comprehension
though. The trick was to figure out how to make two lists to zip
together to get the pairs to check then add. Here's the solution:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The insight was that we could just make a second list that starts
halfway through and then wraps around. I did this by adding
&lt;code&gt;data[l//2:] + data&lt;/code&gt;. &lt;code&gt;l//2&lt;/code&gt; is the integer division of the length (in
Python3). &lt;code&gt;data[l//2:]&lt;/code&gt; represents the second half of data (from the
midway point to the end). Technically I should have only added the second
half of data: &lt;code&gt;data[l//2:] + data[:l//2]&lt;/code&gt; where &lt;code&gt;data[:l//2]&lt;/code&gt; gives us
the first half of the list but since zip will just stop when it
exhausts the shorter list, this wasn't necessary.
&lt;/p&gt;

&lt;p&gt;
Day 2 also has a nice list comprehension based solution. Maybe I'll
write that up later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>adventofcode</category><category>cs</category><category>programming</category><category>python</category><guid>http://cestlaz.github.io/posts/advent-2017-1/</guid><pubDate>Sat, 02 Dec 2017 12:27:02 GMT</pubDate></item><item><title>Motivating and understanding quicksort</title><link>http://cestlaz.github.io/posts/quick-sort-starting/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org51b8cd8" class="outline-2"&gt;
&lt;h2 id="org51b8cd8"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org51b8cd8"&gt;
&lt;p&gt;
Thks question was posed the other day - how can one get students to
truly understand the quicksort algorithm?
&lt;/p&gt;

&lt;p&gt;
I've written a few posts about quicksort. The last time I did a &lt;a href="https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/"&gt;lesson
writeup&lt;/a&gt; on the subject I wrote about first looking and quickselect and
then moving to the quicksort. The class was first faced with the
problem of writing a routine to find the Kth smallest item in an
unsorted data set. The first solution was n&lt;sup&gt;2&lt;/sup&gt; and then refined to a
quickselect. This led directly to the quicksort. 
&lt;/p&gt;

&lt;p&gt;
I liked the lesson and I think it worked well when I taught it but
that was partly due to the overall tenor of that particular group of
students.
&lt;/p&gt;

&lt;p&gt;
A similar approach develops the quicksort in a similar way but is
both more direct and accessible.
&lt;/p&gt;

&lt;p&gt;
The motivating problem is to put one item in a data set in its proper
place. You could select one person in class and arrange the class so
that the selected student is in their proper size place, that is
everyone shorter on one side, taller on the other. You could also do
this for age. A similar exercise could be done with any number of
manipulatives.
&lt;/p&gt;

&lt;p&gt;
This operation of arranging the rest of the set around one selected
item or person is very easy and in fact it's trivial to show that this
can be done in linear time. 
&lt;/p&gt;

&lt;p&gt;
Once we've done this arrangement, we can discuss what we can infer
from this new arrangement. We can now tell that:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;everyone to the left of the "pivot" is less than the pivot&lt;/li&gt;
&lt;li&gt;everyone to the right is greater&lt;/li&gt;
&lt;li&gt;The pivot element is at its true location if the list were
sorted. That is, if we started arranging around item k, then we've
moved item k to the kth location in the dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
From here it's a small jump to the quicksort algorithm, just repeat
the process on the left and right data sets.
&lt;/p&gt;

&lt;p&gt;
This approach not only makes the algorithm and its development clear
and simple but it also can be used to illustrate the worst case n&lt;sup&gt;2&lt;/sup&gt;
behavior. 
&lt;/p&gt;

&lt;p&gt;
The whole thing, minus the coding, can also be done as an unplugged activity.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, I also wrote a post on subtle
implementation errors when writing the quicksort (&lt;a href="https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html"&gt;here&lt;/a&gt;) and also
looking at the qucksort from the point of view of different
programming paradigms (&lt;a href="https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html"&gt;here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms. unplugged</category><category>cs</category><category>programming</category><guid>http://cestlaz.github.io/posts/quick-sort-starting/</guid><pubDate>Tue, 21 Nov 2017 14:34:05 GMT</pubDate></item><item><title>Professional Development beyond Scratch</title><link>http://cestlaz.github.io/posts/election-day-pd-2017/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgea17f65" class="outline-2"&gt;
&lt;h2 id="orgea17f65"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgea17f65"&gt;
&lt;p&gt;
Today was Election Day. One of the few days each year when students
stay home and teachers spend all day attending what is generously
known as professional development.
&lt;/p&gt;

&lt;p&gt;
Years ago I was in a room with a few colleagues when my friend Dave -
one of the best math teachers I know said "you know, every time we
have a PD day in NJ and my wife and I have to scramble to take care of
the kids I get a little annoyed but then think I shouldn't get annoyed
since they're spending the day doing all sorts of valuable PD." He
then said "but then I realize that their PD is probably about as
useful as our PD and I get really angry."
&lt;/p&gt;

&lt;p&gt;
There you have it. This is not to say that there is no good PD but it
seems that the professional development opportunities provided by our
schools have over the years ranged from useless to insulting with
maybe a small bright spot here and there. Historically it's been worse
for CS teachers because we get lumped in with math teachers and have
to spend the day learning about tools and techniques we'll never use
or discussing curricula we never teach.
&lt;/p&gt;

&lt;p&gt;
So, when I spoke to JonAlf about rescuing the Stuy teachers for the
day and hosting them at Hunter, he and the other CS teachers were
pretty excited. It wasn't as though I had the magic PD answer but I
was going to provide a space and we'd figure out together what would
be productive and valuable for them.
&lt;/p&gt;

&lt;p&gt;
As it turns out, I've been spending a good amount of time these past
few weeks visiting high schools to talk about Hunter CS and when I was
at Bronx Science the topic of Election Day PD came up and I thought
that it would be nice to get the Bronx Science and Stuy teachers
together. After thinking about it more, I recalled that there were few
good PD opportunities for CS teachers who taught advanced classes as
opposed to all the CS PD floating around these days at more of a
beginner level.
&lt;/p&gt;

&lt;p&gt;
I thought that we could change this. In the end, I hosted PD today and
had teachers from Stuyvesant, Bronx Science, Brooklyn Tech, and the
Manhattan Hunter Science High School in attendance. I invited teachers
from a few more schools but in the end we had those four schools and
seventeen teachers.
&lt;/p&gt;

&lt;p&gt;
The original agenda was:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;09:00 - 10:00 : Each school describes it's program and courses&lt;/li&gt;
&lt;li&gt;10:00 - 11:00 : An intro to Git and GitHub for the classroom&lt;/li&gt;
&lt;li&gt;10:00 - 11:45 : Sharing neat lessons&lt;/li&gt;
&lt;li&gt;11:45 - 12:00 : Presentation by &lt;a href="http://chicktech.org"&gt;ChickTech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12:00 - 01:00 : Lunch&lt;/li&gt;
&lt;li&gt;01:00 - End   : Small group lesson and curriculum work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Oh boy did I mess up on the timing. The description and
discussion of school programs took all morning. It was interesting to
hear how each school's program evolved and how they fit into the
school's culture. Brooklyn Tech, for instance is a school where
students declare majors. This has a big impact on what classes kids
have to take and are able to take. This is very different from Stuy or
Science where kids programs are more open ended or MHSHS which is a
much smaller school and has restrictions related to size. It was also
interesting to note Brooklyn Tech's decision to have every student
take APCS-P. Interesting because Brooklyn Tech is one of the country's
largest high schools and most of them should have done well on the
exam. That gave NYC around 1,400 passing AP scores in one shot. On
the other hand none of the other schools present today offered APCS-P
but did have their own intro CS class that students took prior to
APCS-A.
&lt;/p&gt;

&lt;p&gt;
We finished the morning with a visit by Heather from
&lt;a href="http://chicktech.org"&gt;ChickTech&lt;/a&gt;. ChickTech is a non-profit dedicated to retaining women in
Tech. It works with both girls in K12 and also those in industry. My
hope was to get a conversation started and see if there were some
potential avenues of partnership between the organization and the
schools.
&lt;/p&gt;

&lt;p&gt;
After lunch, the group decided that we should do the Git/GitHub
workshop and JonAlf obliged.
&lt;/p&gt;

&lt;p&gt;
Overall I think the day was a success. 
&lt;/p&gt;

&lt;p&gt;
My hope is that today's attendees can form a core group of CS teachers
who teach more advanced courses and we can form something of a support
group for each other. 
&lt;/p&gt;

&lt;p&gt;
I plan to try to facilitate future meetings and hopefully we'll be
able to attract more teachers to our group.
&lt;/p&gt;

&lt;p&gt;
All in all I'm very happy with how the day went.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><category>pd</category><guid>http://cestlaz.github.io/posts/election-day-pd-2017/</guid><pubDate>Tue, 07 Nov 2017 23:08:58 GMT</pubDate></item><item><title>Early Interesting Problems - Happy Ladybugs</title><link>http://cestlaz.github.io/posts/happy_ladybug/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orga34d121" class="outline-2"&gt;
&lt;h2 id="orga34d121"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga34d121"&gt;
&lt;p&gt;
We all love interesting problems. The trouble is that it's hard to
find suitably interesting problems for students when they're just
learning the basics. In the very beginning the problems practically
dictate the solution:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;loop over a list and add all the elements or calculate the sum of a
list of integers.&lt;/li&gt;
&lt;li&gt;Determine if  number is prime&lt;/li&gt;
&lt;li&gt;Convert a word into pig-Latin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
It's not that there's no thought involved in solving these but the
students already know the mechanics of solving these by hand so it's a
direct translation into a program.
&lt;/p&gt;

&lt;p&gt;
This isn't a bad thing and it is important but it's fun when we get to the next
level. I've found that a number of the &lt;a href="http://hackerrank.com"&gt;Hacker Rank&lt;/a&gt; archived
competitions have "easy" problems that can be a good fit for
beginners. One that I found and really like is &lt;a href="https://www.hackerrank.com/challenges/happy-ladybugs"&gt;Happy Ladybugs&lt;/a&gt; problem.
&lt;/p&gt;

&lt;p&gt;
The problems is basically as follows:
&lt;/p&gt;

&lt;p&gt;
You get a string of letters. Each letter represents a ladybug of a
different color. Each letter also represents a location of the
ladybug.  A space (or underscore in the actual problem) represents a
free space. For example "AABC DDA" is a line of 2 A colored ladybugs
followed by a B colored one, C colored one, a blank space, 2 D colored and then one
more A colored. 
&lt;/p&gt;

&lt;p&gt;
You can rearrange the line of ladybugs by swapping any ladybug with a
blank space.
&lt;/p&gt;

&lt;p&gt;
A ladybug is happy if it is next to another ladybug of the same
color. The challenge is to determine if all the ladybugs can be made
happy.
&lt;/p&gt;

&lt;p&gt;
I like this problem because while it is non-trivial it is very
approachable. 
&lt;/p&gt;

&lt;p&gt;
To me, the key is that while you can rearrange the list you
don't have to. You only have to determine if it is possible to make
the ladybugs happy. You don't actually have to do so.
&lt;/p&gt;

&lt;p&gt;
The edge cases are pretty easy to deal with - a string of length one
or two but then a little thought is required.
&lt;/p&gt;

&lt;p&gt;
The first insight is that if there are no spaces, you can't rearrange
the ladybugs so all you have to do is scan through the string to test
to see if every ladybug has a neighbor of the same color.
&lt;/p&gt;

&lt;p&gt;
The next insight, and the big one is that if you have at least one
space you can arbitrarily re-order the string. You can show this is
possible  by using a single space to swap any two elements. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someletter&lt;/span&gt;
&lt;span class="n"&gt;someletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someotherletter&lt;/span&gt;
&lt;span class="n"&gt;someotherletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The final insight is that since you can arbitrarily re-order the
ladybugs as long as you have at least 2 of each color, you can make
them all happy.
&lt;/p&gt;

&lt;p&gt;
Since my class is currently just starting dictionaries in Python we
solved this with lists and then transitioned to dictionaries.
&lt;/p&gt;

&lt;p&gt;
Here's a dictionary based solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;    This might miss some of the real edge cases in the hackerrank&lt;/span&gt;
&lt;span class="sd"&gt;    problem. I haven't read the problem carefully in over a year and &lt;/span&gt;
&lt;span class="sd"&gt;    forget what it specified for things like lists of only spaces,&lt;/span&gt;
&lt;span class="sd"&gt;    lists with only one bug etc.&lt;/span&gt;

&lt;span class="sd"&gt;    Also, the Hackerrank question uses an underscore (_) instead of a space.&lt;/span&gt;
&lt;span class="sd"&gt;    '''&lt;/span&gt;
    &lt;span class="c1"&gt;# handle a string of less than 2 ladybugs&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# handle the string of 2 ladybugs - both must be the same and not a space&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;


    &lt;span class="c1"&gt;# handle the case of no spaces &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="c1"&gt;# no spaces, every item must be next to one of the same color&lt;/span&gt;
	&lt;span class="c1"&gt;# so we loop from 1 to len-1 and for each item&lt;/span&gt;
	&lt;span class="c1"&gt;# check the one before and the one after&lt;/span&gt;
	&lt;span class="c1"&gt;# if we ever have an unhappy bug, we can just return False&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

	&lt;span class="c1"&gt;# if we ever get here every bug has at least one neighbor of the same color&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# if we get here it means there's at least one space so we can rearrange the bugs&lt;/span&gt;
    &lt;span class="c1"&gt;# however we please so as long as there are at least 2 bugs of each color&lt;/span&gt;
    &lt;span class="c1"&gt;# we can make them all happy&lt;/span&gt;

    &lt;span class="c1"&gt;# replace the spaces with "" since we don't want to count them&lt;/span&gt;
    &lt;span class="c1"&gt;# Since we know they were in the string we can rearrange but&lt;/span&gt;
    &lt;span class="c1"&gt;# they're no longer needed&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# tally up all the bugs to see if there are at least 2 of each&lt;/span&gt;
    &lt;span class="n"&gt;bugcounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set to 0 the first time we see this key&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;


    &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# if there is any value of 1 in the counts then there's a lone ladybug&lt;/span&gt;
    &lt;span class="c1"&gt;# that can't be made happy&lt;/span&gt;
    &lt;span class="c1"&gt;# so we return True (happy) if there are 0 counts of 1 in our list &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 


&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"abaccbe ff eggggggg"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I love problems like these. 
&lt;/p&gt;

&lt;p&gt;
I just wish there was an easy way to find all contest problems of a
certain level like "easy" or "medium." If anybody knows please share
in the comments.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>problems</category><category>teaching</category><guid>http://cestlaz.github.io/posts/happy_ladybug/</guid><pubDate>Mon, 23 Oct 2017 12:47:46 GMT</pubDate></item><item><title>There's always something to learn (from your students)</title><link>http://cestlaz.github.io/posts/when-they-change-the-script/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orga1b4037" class="outline-2"&gt;
&lt;h2 id="orga1b4037"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga1b4037"&gt;
&lt;p&gt;
One thing I've learned from teaching is that there's always something
new to learn. For the kids, yes, but I'm talking about for the
teacher.
&lt;/p&gt;

&lt;p&gt;
The other day, I taught a lesson I've taught many times. Find the mode
of a data set. That's the problem that they solve but the lesson is
really about run time complexity, hidden complexity and using data
structures in alternate ways.
&lt;/p&gt;

&lt;p&gt;
I blogged about this &lt;a href="https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md"&gt;before&lt;/a&gt; so you can get an earlier take there
although the code isn't formatted correctly due to blog conversions.
&lt;/p&gt;

&lt;p&gt;
As with the last time, the students  had already written code to find
the largest value in a list and also to find the frequency of an item
in a list.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_max_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;max_val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
	    &lt;span class="n"&gt;max_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_val&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;requested_val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;requested_val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They had to write mode prior to the class. In the past, students would
generally come up with something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_mode_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mode_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;mode_freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mode_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mode_freq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;mode_freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
	    &lt;span class="n"&gt;mode_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mode_val&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_mode_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They'd use their existing knowledge and the 'find the largest' idiom
to find the mode by:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;find the frequency of the first item and assume it's the mode so far&lt;/li&gt;
&lt;li&gt;for each item in the list
&lt;ul class="org-ul"&gt;
&lt;li&gt;find the frequency of that idem&lt;/li&gt;
&lt;li&gt;if it occurs more than the mode so far then it becomes the new
mode so far&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There's a lot of good in this solution. The kids incrementally develop
a solution, they use and exctend code and concepts they already know
and understand and it's clear and understandable.
&lt;/p&gt;

&lt;p&gt;
We would then run the code on larger and larger data sets and notice
that it gets slow pretty quickly. This leads to an informal discussion
of run time and the fact that there's hidden complexity – the call to
&lt;code&gt;freq&lt;/code&gt; in the main loop introduces a linear component so we have a
loop within a loop and an N&lt;sup&gt;2&lt;/sup&gt; routine.
&lt;/p&gt;

&lt;p&gt;
The big takeaway is get a feel for run time and to be aware of hidden
complexity. We then move to a linear solution by using a list as
buckets. You can read more about that in the &lt;a href="https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md"&gt;original post&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
What was interesting this time around was that most of the kids came
up with a solution more like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_mode_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;freqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mode_count&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;mode_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mode_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	   &lt;span class="n"&gt;mode_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
	   &lt;span class="n"&gt;mode_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mode_value&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mode_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Instead of calculating the frequency inside the loop they made a list
of frequencies. &lt;code&gt;freq[0]&lt;/code&gt; had the frequency of &lt;code&gt;l[0]&lt;/code&gt;, &lt;code&gt;freq[1]&lt;/code&gt; the
frequency of &lt;code&gt;l[1]&lt;/code&gt; etc. They then loop through that &lt;code&gt;freq&lt;/code&gt; list to
find the largest element and that's the index of the mode value in the
original list.
&lt;/p&gt;

&lt;p&gt;
It's functionally the same as the first solution but in some ways it's
very different. They built the data set they needed ahead of time
instead of calculating the data on the fly and they used the concept
of parallel lists.
&lt;/p&gt;

&lt;p&gt;
I like the solution and it didn't prevent us from getting to the run
time stuff but this did give me something to think about. 
&lt;/p&gt;

&lt;p&gt;
Why did this class led them largely to a different solution than the
classes I've taught in the class. There are a lot of things to ponder
since it's a college class that meets twice a week with kids from a
range of backgrounds (CS and otherwise) vs a high school class that
meets 5 days a week and the kids all had the same in class experience
prior to this lesson. Did I do something differently before hand? Some
assignments? Something I modeled?  I'm not sure but it's something I'm
going to ponder.
&lt;/p&gt;

&lt;p&gt;
It will interesting to see if this was a one shot deal and my current
class will solve problems as I predict moving forward or if I'm going
to get to see a lot of new things.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><category>lessons</category><guid>http://cestlaz.github.io/posts/when-they-change-the-script/</guid><pubDate>Wed, 18 Oct 2017 15:41:49 GMT</pubDate></item><item><title>A test result is just a test result</title><link>http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgdadccb8" class="outline-2"&gt;
&lt;h2 id="orgdadccb8"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdadccb8"&gt;
&lt;p&gt;
This past weekend was &lt;a href="http://catskillsconf.com"&gt;Catskillsconf&lt;/a&gt; - my favorite event of the
year. I spent the weekend up in Ulster County with a bunch of my
students. some great friends old and new, and Devorah. It was a great
weekend but I was mostly offline.
&lt;/p&gt;

&lt;p&gt;
As a result I missed a rather heated discussion in the CS Ed Facebook
groups. The debate was over whether or not Strong AP CSP exam results
are indicative of a good curriculum or good professional development (PD).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9ce82fd" class="outline-2"&gt;
&lt;h2 id="org9ce82fd"&gt;TL;DR - NO!!!!!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9ce82fd"&gt;
&lt;p&gt;
Further, anyone who thinks that a set of exam results can tell you
that a particular PD sequence or curriculum is good shouldn't be
allowed to call themselves a teacher and I don't want them anywhere
near my kids.
&lt;/p&gt;

&lt;p&gt;
I guess that language is strong, even for me but it's true.
&lt;/p&gt;

&lt;p&gt;
Tests are designed to assess students and many tests don't even do
that well. They shouldn't be used to measure something further
removed.
&lt;/p&gt;

&lt;p&gt;
The last time this idea made its rounds was using student test results
for teacher evaluation. They do that in NY. A judge called the
practice "capricious" and "arbitrary." My friend and former
colleague Gary Rubinstein showed a year or so ago that standardized
test scores varied enough from year to year so as to make the ratings
useless &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; 
&lt;/p&gt;

&lt;p&gt;
Using test scores to say a PD sequence is good? What if that PD
focused on test prep? What if it did nothing in particular? When I was
at Stuy and when I was at Seward Park the Calc teachers' students had
great AP results. I can tell you that none of those teachers had any
quality PD specific to AP Calc.
&lt;/p&gt;

&lt;p&gt;
Curriculum? My mentor and friend Danny Jaye told me many times - "A
great teacher can save a class from a  horrible curriculum but a great
curriculum will do nothing for a class with a horrible teacher." He
was right. Again, what if the curriculum encourages test prep. What if
pressure on the teacher encourages them to focus on test prep
regardless of curriculum or PD (see my recent &lt;a href="http://cestlaz.github.io/posts/standards-who-for"&gt;post&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
An AP test measures one thing - how well the student did on the AP
test. There are so many variables that go into a class:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Is it first period at 8:00am?&lt;/li&gt;
&lt;li&gt;Is it the last class of the day?&lt;/li&gt;
&lt;li&gt;Is it before lunch or right afterwards?&lt;/li&gt;
&lt;li&gt;What about right after Gym.&lt;/li&gt;
&lt;li&gt;What's the mix of students - every class is different&lt;/li&gt;
&lt;li&gt;Is the teacher teaching the subject once a day? Two times? Five
times?&lt;/li&gt;
&lt;li&gt;How large is the class&lt;/li&gt;
&lt;li&gt;How many other classes are the kids taking?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The list goes on and on. There are so many contributing factors that
you just can't say "Good test results = good curriculum" or "good test
results = good PD."
&lt;/p&gt;

&lt;p&gt;
Want to know if a curriculum is good - have experienced teachers who
know their subject run it a few times through and ask them. Same for
PD.
&lt;/p&gt;

&lt;p&gt;
Teachers know education a lot better than test makers, curriculum
developers and PD providers. How about listening to them for a change?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;sorry, I just got back from the weekend trip and am too tired
to find the link. You can go to his site and search and while you're
there, there's lots of good stuff to read.&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>assessment</category><category>cs</category><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</guid><pubDate>Mon, 16 Oct 2017 00:17:21 GMT</pubDate></item></channel></rss>