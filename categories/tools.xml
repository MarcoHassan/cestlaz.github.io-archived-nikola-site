<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z (tools)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/tools.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 15 May 2016 19:07:43 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Shell short - tagging old posts in Nikola</title><link>http://cestlaz.github.io/posts/shell-short-tagging/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Quick post to add to the recent command line fu I've been writing
about.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/dougpete"&gt;Douglas Peterson&lt;/a&gt; had another &lt;b&gt;&lt;b&gt;Whatever happened to&lt;/b&gt;&lt;/b&gt; post. This time
on &lt;a href="https://dougpete.wordpress.com/2016/05/15/whatever-happened-to-6/"&gt;Logo&lt;/a&gt;. I wanted to reply, talk about NetLogo  and link to some of my
old NetLogo posts to help show how cool it is.
&lt;/p&gt;

&lt;p&gt;
Nikola supports tags, makes a nice &lt;a href="http://cestlaz.github.io/categories"&gt;tags&lt;/a&gt; page and for each tag, a nice
page of all the &lt;a href="http://cestlaz.github.io/categories/netlogo"&gt;links&lt;/a&gt;. 
&lt;/p&gt;


&lt;p&gt;
Nikola has a plugin &lt;b&gt;&lt;b&gt;tags&lt;/b&gt;&lt;/b&gt; which lets you manage tags from the
command line. For instance:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola tags -a netlogo posts/somepost.org
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Would add the tag &lt;b&gt;&lt;b&gt;netlogo&lt;/b&gt;&lt;/b&gt; to the specified post.
&lt;/p&gt;

&lt;p&gt;
The problem: The tags plugin only works if the post has a &lt;b&gt;&lt;b&gt;tag:&lt;/b&gt;&lt;/b&gt;
line already present in it's header comment and I hadn't put them in
my older posts.
&lt;/p&gt;

&lt;p&gt;
I had a bunch of posts, all of them in one directory. All the new ones
were &lt;b&gt;&lt;b&gt;.org&lt;/b&gt;&lt;/b&gt; files and had the tag slug. The others were &lt;b&gt;&lt;b&gt;.md&lt;/b&gt;&lt;/b&gt; markdown
files and &lt;b&gt;&lt;b&gt;.html&lt;/b&gt;&lt;/b&gt; html files. 
&lt;/p&gt;

&lt;p&gt;
Here's what a typical top block looks like:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!--
.. title: Looking for interesting questions
.. slug: 2010-01-03-looking-for-interesting-questions.html
.. date: 2010-01-03
.. type: text
--&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Sed to the rescue. Here's the what I ended up typing (from within the
posts directory) to add the
&lt;b&gt;&lt;b&gt;tags&lt;/b&gt;&lt;/b&gt; slug to the top comments right above the &lt;b&gt;&lt;b&gt;.. type: text:&lt;/b&gt;&lt;/b&gt; line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls *md *html | while read filename
do
    sed "/type: text/ i .. tags: " $filename
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
A line at a time:
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;ls *md *html&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
This lists all the files with that end in &lt;b&gt;&lt;b&gt;md&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;html&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;| while read filename&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
The vertical bar (pipe) sends the output of &lt;b&gt;&lt;b&gt;ls&lt;/b&gt;&lt;/b&gt; into the &lt;b&gt;&lt;b&gt;while read&lt;/b&gt;&lt;/b&gt;
command. The &lt;b&gt;&lt;b&gt;while&lt;/b&gt;&lt;/b&gt; command sets up a loop which, each time
through, reads the next input and places into the variable
&lt;b&gt;&lt;b&gt;filename&lt;/b&gt;&lt;/b&gt;. The body of the loop is between the &lt;b&gt;&lt;b&gt;do&lt;/b&gt;&lt;/b&gt; and the
&lt;b&gt;&lt;b&gt;done&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;sed "/ type: text/  i .. tags: " $filename&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Sed is the stream editor. The stuff between the slashes finds the line
with the text &lt;b&gt;&lt;b&gt;type: text&lt;/b&gt;&lt;/b&gt; in it. The &lt;b&gt;&lt;b&gt;i&lt;/b&gt;&lt;/b&gt; inserts a line above and
the rest of the stuff in the quotes is what to insert. The
&lt;b&gt;&lt;b&gt;$filename&lt;/b&gt;&lt;/b&gt; expands to each filename, one each time through the
loop.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Now all of my files have blank &lt;b&gt;&lt;b&gt;tag&lt;/b&gt;&lt;/b&gt; slugs so I can find my netlogo
posts and tag them:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola tags -a netlogo `grep -i -l netlogo posts/*`
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Any command in backticks expands to the result of the commmand. The
grep command has two argiments: &lt;b&gt;&lt;b&gt;-i&lt;/b&gt;&lt;/b&gt; means ignore case so it will
find netlogo, NetLogo, NETLOGO, etc.. The &lt;b&gt;&lt;b&gt;-l&lt;/b&gt;&lt;/b&gt; tells grep to just
output the filenames. So, the grep command will expand to a list of
files that mention netlogo. The full command adds the netlogo tag to
all of them.
&lt;/p&gt;

&lt;p&gt;
So, just a bit of quick shell scripting and I've:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;modified all old posts to accept tags.
&lt;/li&gt;
&lt;li&gt;added the netlogo tag to all my netlogo posts.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can find all those posts &lt;a href="http://cestlaz.github.io/categories/netlogo"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>nikola</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/shell-short-tagging/</guid><pubDate>Sun, 15 May 2016 13:58:44 GMT</pubDate></item><item><title>REPOST - Shell games - who confirmed attendance</title><link>http://cestlaz.github.io/posts/duplicate-emails/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Repost&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This is a repost from March 2015. It didn't transfer when I rebooted the blog.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Original&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;

&lt;p&gt;
We're busy organizing &lt;a href="http://cstuy.org"&gt;CSTUY's&lt;/a&gt; first &lt;a href="http://cstuy.org/programs/defhacks"&gt;hackathon&lt;/a&gt;. It's going to be at
&lt;a href="http://sumall.com"&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href="http://cstuy.org/programs/hacking_sessions"&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;

&lt;p&gt;
The kids signed up on a Google doc but we all know the story – when
people sign up for a free event, even one with free food and t-shirts,
many don't show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;

&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn't confirmed on
the second. 
&lt;/p&gt;

&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren't on sheet 2. I'm sure there's some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn't so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;

&lt;p&gt;
So, here's how a command line guy would do this.
&lt;/p&gt;

&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;e1&lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;e2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;a@a.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;b@b.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;b@b.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;F@f.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;c@c.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;c@c.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;d@d.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;d@d.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;e@e.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;f@f.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;g@g.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;h@h.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
If we put these lists together, any email that appears twice would
indicate that it's the email of someone that confirmed entry. Here we
use cat to catenate e1 and e2 and pipe them through sort.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
First problem –the upper case F – let's use &lt;b&gt;&lt;b&gt;tr&lt;/b&gt;&lt;/b&gt; to make
everything lower case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 |  tr A-Z a-z | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now we can see the duplicates next to each other. Next, &lt;b&gt;&lt;b&gt;uniq
-c&lt;/b&gt;&lt;/b&gt; tells us how many times each line appears:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-Z a-z | sort | uniq -c | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I added the sort at the end, but we didn't need it.
&lt;/p&gt;

&lt;p&gt;
Here's what we get:
&lt;/p&gt;

&lt;p class="verse"&gt;
1 a@a.com&lt;br&gt;
 1 c@c.com&lt;br&gt;
 1 c@c.dom&lt;br&gt;
 1 e@e.com&lt;br&gt;
 1 g@g.com&lt;br&gt;
 1 h@hc.om&lt;br&gt;
 2 b@b.com&lt;br&gt;
 2 d@d.com&lt;br&gt;
 2 f@f.com&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
To pull out the ones that haven't replied I used egrep with a regex
that means "any line that starts with 1 or more spaces followed by the
number 1":
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep "^ +1"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and finally to isolate the emails using sed which removes the spaces
and number 1 from the beginning of the line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep "^ +1" | sed "s/\ \+1 //g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Each of the little utilities aren't all too useful by themselves but
if you learn them over time you start thinking about how you can
combine them to solve problems. 
&lt;/p&gt;

&lt;p&gt;
If you think this way and know some basic tools, all of a sudden all
manner of text manipulation problems become pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/duplicate-emails/</guid><pubDate>Thu, 12 May 2016 13:52:25 GMT</pubDate></item><item><title>BASH scripting?</title><link>http://cestlaz.github.io/posts/bash-scripting/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over in the Facebook AP Computer Science Teachers group someone asked
for thoughts on covering BASH scripting as a post AP topic.
&lt;/p&gt;

&lt;p&gt;
A number of us made suggestions. I linked to &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzR7Et9vETt"&gt;this&lt;/a&gt; old blog post.
&lt;/p&gt;

&lt;p&gt;
One group member said she asked around for similar suggestions and the
response she got was "vi and awk." I wanted to jokingly respond "and
after they suggested that they got into their time machine and went
back to the 70's."
&lt;/p&gt;

&lt;p&gt;
In all seriousness though, I think that suggesting specific tools or
commands is off base.
&lt;/p&gt;

&lt;p&gt;
The important thing to know about Vi is how to get out of it but it
isn't really a tool in the scripting sense. I do think students should
spend a good amount of time learning a powerful editor and should try
bot Emacs (my choice) and Vim but that's another story.
&lt;/p&gt;

&lt;p&gt;
I also use AWK but as it's a programming language in it's own right,
I'm not sure if I'd introduce it right off the bat.
&lt;/p&gt;

&lt;p&gt;
There are a number of important ideas kids can take away from learning
some Linux (or other Unix flavor):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;There's something out there besides Windows and MacOS
&lt;/li&gt;
&lt;li&gt;All about free software
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;The Unix Philosophy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That last one is the biggie and more specifically, there's a huge
upside in teaching kids the value of "OS as Toolset" where they can
compose the many tools that comprise the Linux experience to get
things done. 
&lt;/p&gt;

&lt;p&gt;
I gave an example of that in the &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzSBHt9vETu"&gt;post&lt;/a&gt; I previously linked to.
&lt;/p&gt;

&lt;p&gt;
For the teacher, that means wrapping your head around that way of
working. Living in the shell and using pipes to connect program to
progarm to program.
&lt;/p&gt;

&lt;p&gt;
I'd recommend getting into a time
machine ourselves and taking a look at: 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Unix_Programming_Environment" width="250px" align="center"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif" alt="English4.gif" width="250px" align="center"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It's dated but it's really a great book on getting into the Unix way
of doing things, particularly the chapter about filters. It also has
one of the best and clearest introductions to writing a compiler in
the chapter on program development.
&lt;/p&gt;

&lt;p&gt;
As I said, it is dated - shells are much easier to use and much more
robust, there are many more tools now, and they've evolved but it's
really a must read book.
&lt;/p&gt;

&lt;p&gt;
In terms of tools, I get a lot of mileage out of:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;description&lt;/th&gt;
&lt;th scope="col" class="left"&gt;example&lt;/th&gt;
&lt;th scope="col" class="left"&gt;explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;cat&lt;/td&gt;
&lt;td class="left"&gt;catenate or display a file&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;tr&lt;/td&gt;
&lt;td class="left"&gt;Translate characters&lt;/td&gt;
&lt;td class="left"&gt;tr A-Z a-z&lt;/td&gt;
&lt;td class="left"&gt;convert upper to lower case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;sed&lt;/td&gt;
&lt;td class="left"&gt;Stream editor&lt;/td&gt;
&lt;td class="left"&gt;sed "s/a/b/g"&lt;/td&gt;
&lt;td class="left"&gt;Replace all a with b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;wc&lt;/td&gt;
&lt;td class="left"&gt;word count&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;counts words lines and chars&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;cut&lt;/td&gt;
&lt;td class="left"&gt;cut columns&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;sort&lt;/td&gt;
&lt;td class="left"&gt;sort lines&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
A nice simple thing you can do with these is clean data. Let's say you
want to do some analytics on a book from Project Gutenberg. You might
want to convert all non letters to spaces, and all letters to lower
case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat book.txt | sed "s/[^a-zA-Z ]/ /g | tr A-Z a-z"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That sends book.txt into sed which uses a regular expression to convert
no space and letters to spaces. The tr command converts all upper case
letters to lower case.
&lt;/p&gt;

&lt;p&gt;
If you want one word per line, add:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "s/\n/g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and maybe get rid of blank lines:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "/^$/d"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We can now count the number of words in the file using &lt;b&gt;&lt;b&gt;*wc&lt;/b&gt;&lt;/b&gt; or even
get counts of all the words:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sort | uniq -c | sort -n
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;sort&lt;/b&gt;&lt;/b&gt; will sort all the lines, &lt;b&gt;&lt;b&gt;uniq -c&lt;/b&gt;&lt;/b&gt; will compress the lines that are
adjacent and the same and give you a count and then &lt;b&gt;&lt;b&gt;sort -n&lt;/b&gt;&lt;/b&gt; will
sort the results numerically.
&lt;/p&gt;

&lt;p&gt;
I wrote another post a while ago about using the shell to detect
who responded on a Google form. It looks like it didn't convert when
I moved to my current blogging platform - I'll repost that shortly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/bash-scripting/</guid><pubDate>Thu, 12 May 2016 12:39:25 GMT</pubDate></item><item><title>Should We Teach HTML?</title><link>http://cestlaz.github.io/posts/teaching-html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Yesterday, &lt;a href="https://twitter.com/dougpete"&gt;Doug Peterson&lt;/a&gt; wrote a "Whatever happened to" post subtitled
&lt;a href="https://dougpete.wordpress.com/2016/05/08/whatever-happened-to-5/"&gt;HTML as an essential 21st Century skill?&lt;/a&gt; It's a nice post.
&lt;/p&gt;

&lt;p&gt;
I left a comment but thought I'd elaborate here.
&lt;/p&gt;

&lt;p&gt;
No, knowing HTML is not programming - it's markup. Even so, when I
help people design CS programs, I'll frequently recommend starting
with HTML or at least introducing it early.
&lt;/p&gt;

&lt;p&gt;
Why? 
&lt;/p&gt;

&lt;p&gt;
It's a gateway and not just to programming.
&lt;/p&gt;

&lt;p&gt;
HTML is pretty easy, you want &lt;b&gt;&lt;b&gt;something&lt;/b&gt;&lt;/b&gt; bold, you just wrap the
word in &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;b&amp;gt;something&amp;lt;/b&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's also empowering and demystifies the web. Kids can create a simple
web page and load it right into their browser.
&lt;/p&gt;

&lt;p&gt;
It's true that today's web pages are chock-full-o javascript and css
but with just the basics, students can get the idea. You can also show
them pages by right clicking and viewing source.
&lt;/p&gt;

&lt;p&gt;
You can even have them change a live page.
&lt;/p&gt;

&lt;p&gt;
Try it. 
&lt;/p&gt;

&lt;p&gt;
Right click on the top of this page where it says "Musings about…"
Chose &lt;b&gt;&lt;b&gt;inspect element&lt;/b&gt;&lt;/b&gt;. In the "debugger" window double click the
text, change it and hit enter. This is just temporary - just reload
the page but it's pretty neat for a kid to change an article and then
screenshot it.
&lt;/p&gt;

&lt;p&gt;
HTML is also a nice stepping stone towards coding. You're working in a
plain text editor by adding special code words to basic text which are
then interpreted by, in this case, the web browser.
&lt;/p&gt;

&lt;p&gt;
The big reason for teaching html actually goes beyond this. Next step
after learning HTML is having the kids programatically generating web
pages in whatever language you're using for the class. I like using
Python. This requires a little infrastructure setup to serve kids work
but then there are two huge wins.
&lt;/p&gt;

&lt;p&gt;
First, as the kids learn programming, instead of just printing out
results, they can make a web site with their results and share it with
friends, family, and the world.
&lt;/p&gt;

&lt;p&gt;
The other big bonus is that kids might be able to leverage take these
skills to other classes. If the student has a history paper to write,
maybe the teacher will accept a history web site where the student can
write code to do their analytics and build nice looking tables and
graphs with results.
&lt;/p&gt;

&lt;p&gt;
So while knowledge of HTML in and of itself isn't really needed
anymore it's still an important part of the programs I build. 
&lt;/p&gt;</description><category>cli</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/teaching-html/</guid><pubDate>Mon, 09 May 2016 23:08:58 GMT</pubDate></item><item><title>Blogging with Emacs, Jekyll and Nikola</title><link>http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Switched over from &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; to &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; yesterday.
&lt;/p&gt;

&lt;p&gt;
One of the primary reasons was that I got fed up with managing a Ruby
development environment across all my machines. In spite of my
rantings, I'm sure Ruby and Ruby installs are fine - it's just
something that I'd have to deal with on a recurring basis for one
specific task - other than for Jekyll blogging, I don't use Ruby.
&lt;/p&gt;

&lt;p&gt;
So while a platform based on Python - generally my go to language,
made sense, the other driving force for the switch was the fact that
&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; and &lt;a href="http://orgmode.org/"&gt;org-mode&lt;/a&gt; have become such major parts of my workflow and
productivity.
&lt;/p&gt;

&lt;p&gt;
What do I use org-mode for?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;lesson planning
&lt;/li&gt;
&lt;li&gt;document preparation (instead of LaTeX)
&lt;/li&gt;
&lt;li&gt;note taking
&lt;/li&gt;
&lt;li&gt;blogging
&lt;/li&gt;
&lt;li&gt;email (with mu4e)
&lt;/li&gt;
&lt;li&gt;managing my schedule
&lt;/li&gt;
&lt;li&gt;tracking bookmarks
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and probably a lot more.
&lt;/p&gt;

&lt;p&gt;
Jekyll is actually a really nice tool. It's simple. You put together a
simple directory structure: Templates in _layouts, blog posts in
_posts, drafts in _drafts. Other directories that start with an
underscore are ignored and everything else is copied up to your site.
&lt;/p&gt;

&lt;p&gt;
I love that it's "close to the metal" You can put in html files with
some meta information up top or markdown. 
&lt;/p&gt;

&lt;p&gt;
You can take a look at my old site at
&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;&lt;/a&gt;&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;https://github.com/cestlaz/cestlaz.github.io-jekyll&lt;/a&gt; if you want to
take a look.
&lt;/p&gt;

&lt;p&gt;
The beauty is that you just push your files up to GitHub and it
automatically runs Jekyll and builds your site (&lt;a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/"&gt;more info here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The problem is that Jekyll doesn't play well with org-mode and
org-markup so my workflow became something like this
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Create a post &lt;b&gt;&lt;b&gt;something.org&lt;/b&gt;&lt;/b&gt; in the _org directory.
&lt;/li&gt;
&lt;li&gt;From within emacs, publish it. I've configured org-mode to publish
by exporting the org-mode markup file to html and saving it in the
_drafts directory.
&lt;/li&gt;
&lt;li&gt;If it looks good, copy and rename the file from _drafts to the
_posts directory and push it up to GitHub.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
A little clunky, but it works. The bigger problem was the amount of
time I'd spend putting html blocks into my org formatted posts to get
them to look the way I wanted (or at least close enough).
&lt;/p&gt;

&lt;p&gt;
Enter Nikola.
&lt;/p&gt;

&lt;p&gt;
Nikola's a much more powerful tool. It does much more but as a result
is much more complex. Normally, that's not my style but in this case
since It's Python, things balance out.
&lt;/p&gt;

&lt;p&gt;
I still have to figure out the entire templating system and all the
plugins but getting started was pretty quick.
&lt;/p&gt;

&lt;p&gt;
The big win is that Nikola supports a ton of formats for your posts
and pages. Native org-mode support for me was what did it for me. On top of
that, although I haven't tested it yet, is that there's also an
org-mode plugin to export to Nikola restructure text.
&lt;/p&gt;

&lt;p&gt;
My new workflow:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Write the post as an org-mode file.
&lt;/li&gt;
&lt;li&gt;run &lt;b&gt;&lt;b&gt;nikola github_deploy&lt;/b&gt;&lt;/b&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
And that's it. You can look at my Nikola site here:
&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;&lt;/a&gt;&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;https://github.com/cestlaz/cestlaz.github.io&lt;/a&gt;.
The source code is in the &lt;b&gt;&lt;b&gt;src&lt;/b&gt;&lt;/b&gt; branch, the actual rendered blog in
the &lt;b&gt;&lt;b&gt;master&lt;/b&gt;&lt;/b&gt; branch.
&lt;/p&gt;

&lt;p&gt;
So far, I'm pretty happy with the setup.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>mathjax</category><category>tools</category><guid>http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/</guid><pubDate>Sun, 17 Apr 2016 17:12:26 GMT</pubDate></item><item><title>I hate ruby or why I'm switching blogging platforms</title><link>http://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
		I think I've got the move worked out but if you're reading this via an
		rss or atom reader, make sure to check back in a couple of days - you
		might have to re-subscribe.
&lt;/p&gt;

&lt;p&gt;
		Why am I switching?
&lt;/p&gt;

&lt;p&gt;
		Because I hate Ruby. 
&lt;/p&gt;

&lt;p&gt;
		Ok, not really - I barely know the language. I was already a  Python
		guy when Ruby came along and I didn't see any real added value to
		switching. 
&lt;/p&gt;

&lt;p&gt;
		This isn't really about Ruby though, it's really about how that which
		we don't know is strange and frightening. In this case, the ruby ecosystem.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LV0wTtiJygY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
		I started using Jekyll because that's what was supported by GitHub
		pages. It's fairly simple and it basically worked. It had a few
		warts, specifically, I've had problems getting org-mode blog posts to
		publish just the way I'd like and it's hard to debug when a post has
		some bad markup in it, but it got the job done. 
&lt;/p&gt;

&lt;p&gt;
		Recently, though, I've had to re-install Jekyll a number of  times and
		for me, that's been a nightmare.
&lt;/p&gt;

&lt;p&gt;
		One is supposed to just be able to &lt;b&gt;&lt;b&gt;sudo gem install jekyll&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
		Ok, so you need some packages installed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
		But I've got ruby 1.9 and I need ruby 2 point something. Ok:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby2.0 ruby2.0-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
		But that fails since we're still running 1.9. Every time I look for a
		solution I go down the ruby ecosystem rabbit hole. 
&lt;/p&gt;

&lt;p&gt;
		All I want is Jekyll!!!!!!
&lt;/p&gt;

&lt;p&gt;
		Why can't I just &lt;b&gt;&lt;b&gt;pip install jekyll&lt;/b&gt;&lt;/b&gt; like I can do with Python
		packages!!!!!
&lt;/p&gt;

&lt;p&gt;
		In truth, there's nothing wrong with the ruby ecosystem, It's just
		something I'm not familiar with. I probably had to go through the same
		battles with Python it's just that I did them incrementally over time.
&lt;/p&gt;

&lt;p&gt;
		The truth is, setting up a development environment should be much
		easier. It used to be that I installed Linux, it had C installed and I
		just had to install &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;make&lt;/a&gt;. Now it's all about tool chains, virtual
		environments, containers, and more.
&lt;/p&gt;

&lt;p&gt;
		I think this is what &lt;a href="https://twitter.com/roybahat"&gt;Roy&lt;/a&gt; was talking about when we traded
		tweets on using development environments in an  &lt;a href="http://cestlaz.github.io/2016/04/12/ide-or-cloud.html#.Vw_nPN9vETt"&gt;Ide or in the cloud&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
		If it's hard for me to get an environment running, imagine some poor
		soul who just went through a "learn to code" web site and now has to
		figure out how to set up his or her own machine!!!!!!
&lt;/p&gt;

&lt;p&gt;
		I don't have a solution but at least it hasn't stopped me and others
		from trying new things.
&lt;/p&gt;

&lt;p&gt;
		Two of my CS blogging friends, &lt;a href="https://gflint.wordpress.com/"&gt;Garth Flint&lt;/a&gt; and &lt;a href="http://blog.acthompson.net/"&gt;Alfred Thompson&lt;/a&gt; have in
		their own ways talked about this same issue. Garth, showing a bias
		towards VB yet still working to get his head around Python. Alfred
		shows the same disdain for Linux and the command line as I show
		towards Windows. All this leads to valuable learning experiences and
		discussions.
&lt;/p&gt;

&lt;p&gt;
		Personally, I'm also going through this battle as I continue to
		explore Clojure.
&lt;/p&gt;

&lt;p&gt;
		So, I'm going to finish the changeover to Nikola in the next day or
		two. Remember to check back in case the feeds aren't working.
&lt;/p&gt;

&lt;p&gt;
		Once I make the change, I'll talk about Jekyll vs Nikola as actual
		blogging platforms.
&lt;/p&gt;</description><category>tools</category><guid>http://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/</guid><pubDate>Thu, 14 Apr 2016 04:00:00 GMT</pubDate></item><item><title>IDE or the Cloud</title><link>http://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
This weekend, I had a conversation on Twitter with my friend &lt;a href="https://twitter.com/roybahat"&gt;Roy Bahat&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/zamansky"&gt;@zamansky&lt;/a&gt; Mike, unrelated, what do you think of &lt;a href="https://t.co/BT1ublbajF"&gt;https://t.co/BT1ublbajF&lt;/a&gt; ?&lt;/p&gt;— Roy Bahat (@roybahat) &lt;a href="https://twitter.com/roybahat/status/718835740738650112"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/roybahat"&gt;@roybahat&lt;/a&gt;Maybe I'll blog about my thoughts about online environments vs local installs&lt;/p&gt;— Mike Zamansky (@zamansky) 
&lt;a href="https://twitter.com/zamansky/status/718837282334240768"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/roybahat"&gt;@roybahat&lt;/a&gt; Agree with this but there are many issues. I'll try to write more later. Now going to see my son in &lt;a href="https://twitter.com/umgass"&gt;@umgass&lt;/a&gt; prod of Pinafore.&lt;/p&gt;— Mike Zamansky (@zamansky) &lt;a href="https://twitter.com/zamansky/status/718838508689993728"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
Another friend had just asked me about IDEs vs local installs for learning enviromnents the day before.
&lt;/p&gt;

&lt;p&gt;
So, should we use cloud based IDEs when teaching CS or should we use
local installs.
&lt;/p&gt;

&lt;p&gt;
There isn't a single right answer but I thought I'd share some of my thoughts here.
&lt;/p&gt;

&lt;p&gt;
I'm hoping this is helpful to both those of us in the trenches as well
as maybe some platform developers out there.
&lt;/p&gt;

&lt;p&gt;
Some times, you don't have a choice.
&lt;/p&gt;

&lt;p&gt;
On the web based side, does your school have the bandwidth. We're not
only talking about the pipe to the outside world but also &lt;a href="http://www.nytimes.com/2016/01/14/nyregion/bronx-science-bans-cellphones-from-wi-fi-as-students-devour-it.html?_r=0"&gt;wifi within
the school&lt;/a&gt;.  If kids can't reliably get to the web based environment,
it's not a viable option. On the other hand, cloud based software will
always be up to date and properly configured and kids can use them
from home or pretty much anywhere they have a connection.
&lt;/p&gt;

&lt;p&gt;
On the other side we have local installs. This can also present
problems. Is the teacher allowed to install locally? Does he or she
know how to do it? Who's going keep all the machines up to date and configured? 
&lt;/p&gt;

&lt;p&gt;
Assuming we can get past the technical issues we can start looking at
the education side of thing.
&lt;/p&gt;

&lt;p&gt;
On the web based side, you've got a silo. This can be both good and
bad. In an intro class, using a tool like &lt;a href="http://codesters.com"&gt;Codesters&lt;/a&gt; can keep the cost
of entry low, allow students to share work online and allow teachers
to make use of their curricular materials. If you can't tell, I'm a
big fan of Codesters and the Codesters team. The limitation is that
you have to use their simplified interface and toolset.
&lt;/p&gt;

&lt;p&gt;
Some web based IDEs like &lt;a href="http://koding.com"&gt;Koding&lt;/a&gt; offer more flexibility - one tool with
many languages as well as deployment. The cost is complexity. With
Koding, you're basically running a virtual machine in the
cloud. You've got their web based IDE and a terminal shell so it's not
as complex as doign everything from scratch locally but it's not as
structured as Codesters and is more of a general purpose site rather
than one focussed soley on learning.
&lt;/p&gt;

&lt;p&gt;
Then you have &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;. This looks to be a great platform for
experienced programmers to play with and explore new languages but I'd
be concerned about using it with beginners. It looks like they're
rolling out some teacher tools so this might be worth revisiting soon.
&lt;/p&gt;

&lt;p&gt;
In any case and with other web based products, you're living in the
providers silo. 
&lt;/p&gt;

&lt;p&gt;
Personally, I'm a command line wonk and confessed Emacs geek so I'm
generally wary of an online environment without an exit strategy to
real world tools. Eventually, if all development moves into the
browser as platform then this problem goes away, but for now, you're
not going to have the expressive power and flexibility that a local
install gives.
&lt;/p&gt;

&lt;p&gt;
Local installs let you use more powerful and flexible tools either
alone or in combination.
&lt;/p&gt;

&lt;p&gt;
Keeping kids out of silos also makes it easier for them to learn new
tools, languages, and techniques.
&lt;/p&gt;

&lt;p&gt;
Since I like generic tools, I'm not a fan of big professional IDEs
like Eclipse. I'm an Emacs geek but Atom, Sublime Text, and Vim are
all good as well.
&lt;/p&gt;

&lt;p&gt;
There are also an assortment of beginner IDEs like Dr. Racket and I'm
a fan with these for beginners as long as there's an exit strategy.
&lt;/p&gt;

&lt;p&gt;
For completeness, I should mention that if I weren't an old school
Emacs guy, I might check out something like JetBrain's IDEs. They're
much lighter weight than something like Eclipse but still full
featured. Somewhere between a true general purpose, customizable,
programmable editor and an all encompassing IDE.
&lt;/p&gt;


&lt;p&gt;
In general, I use online enviromnents with my classes early on when:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;They're pretty much identical or equivalent to the installed version.&lt;/li&gt;
&lt;li&gt;They provide some value added (&lt;a href="http://codingbat.com"&gt;codingbat&lt;/a&gt; for example) so they're not
being used as a development environment but for some other purpose.&lt;/li&gt;
&lt;li&gt;They help with student collaboration (such as cloud9 or Koding.com
for more advanced kids).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In any case, it's imporant that our kids aren't locked into any IDE be
it web based or local.
&lt;/p&gt;

&lt;p&gt;
Our kids that go on to more advanced CS studies will certainly need to
break out of sheltered world of a learning IDE and we're not doing
them a service if we shelter them too long. 
&lt;/p&gt;

&lt;p&gt;
Our other kids also benefit from seeing beyond these restrictive
environments. A student might learn to code in Python in one of our
classes, but if we do our jobs right, that student might be writing a
little Javascript to automate Google Docs.
&lt;/p&gt;

&lt;p&gt;
I can't tell you how many people I've seen go through online coding
courses in a web based enviromnent only to be unable to do anything
outside of that enviromnent.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, we want our kids to be empowered to grow on
their own. All of the things I've talked about here are merely
tools. Each has it's place. It's up to the teacher to make the roadmap
and to lead the student down the path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>pedagogy</category><category>tools</category><guid>http://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</guid><pubDate>Tue, 12 Apr 2016 04:00:00 GMT</pubDate></item><item><title>Debugging deployment</title><link>http://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
SoftDev students are hard at work on their final projects. By now,
they all have fairly complex code bases. This limits how much I can
help them with debugging.
&lt;/p&gt;

&lt;p&gt;
There are some problems, though, that they have to contend with that
even with experience, are hard to spot. Notably because the very
tools you use to debug these errors are part of the problem.
&lt;/p&gt;

&lt;p&gt;
Last week, this happened twice. Both cases were brought to me by
really strong students which just goes to underscore how insidious
these problems can be.
&lt;/p&gt;


&lt;p&gt;
Here's a fake code snippet of a &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; application that illustrates
both problems.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;from flask import Flask, render_template
&lt;span class="linenr"&gt; 2: &lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;app = Flask(__name__)
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;@app.route("/")
&lt;span class="linenr"&gt; 6: &lt;/span&gt;def index():
&lt;span class="linenr"&gt; 7: &lt;/span&gt;    return "hello"
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;@app.route('/test/&amp;lt;some_data&amp;gt;')
&lt;span class="linenr"&gt;10: &lt;/span&gt;def test():
&lt;span class="linenr"&gt;11: &lt;/span&gt;    picture_url = build_url(some_data)
&lt;span class="linenr"&gt;12: &lt;/span&gt;    result = api_test(picture_url)
&lt;span class="linenr"&gt;13: &lt;/span&gt;    do_something(result)
&lt;span class="linenr"&gt;14: &lt;/span&gt;
&lt;span class="linenr"&gt;15: &lt;/span&gt;if __name__ == "__main__":
&lt;span class="linenr"&gt;16: &lt;/span&gt;   app.debug = True
&lt;span class="linenr"&gt;17: &lt;/span&gt;   app.secret_key = "some secret key"
&lt;span class="linenr"&gt;18: &lt;/span&gt;   app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
First, the "easy" one. The student was trying to deploy the
application. We use &lt;a href="http://gunicorn.org/"&gt;Green Unicorn&lt;/a&gt; to deploy our applications,
ultimately on &lt;a href="http://digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; servers in the cloud. 
&lt;/p&gt;

&lt;p&gt;
The student was using the correct command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-shell"&gt;gunicorn -W 4 -b 0.0.0.0:8000 app:app
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
but it wasn't working. It ran, but whenever he went to the site, it
came back with an error.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
He had to change:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;if __name__ == "__main__":
   app.debug = True
   app.secret_key = "some secret key"
   app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;app.secret_key = "some secret key"
if __name__ == "__main__":
    app.debug = True
    app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Normally, when developing and testing our applications, we use the
test server that's bundled with Flask. The line that reads
"app.run…" takes care of this.
&lt;/p&gt;

&lt;p&gt;
When running the application as a "main program" - "python app.py" the
if statement is true and it runs the indented lines, setting the
secret key which is required for session management.
&lt;/p&gt;

&lt;p&gt;
When running under &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt;, the &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt; server loads the
application as a module and then runs it. In this case name isn't main
so it never sets secret key and so we have a problem.
&lt;/p&gt;

&lt;p&gt;
Pretty subtle and even though we did cover this in class, it comes up
pretty rarely so it's not an easy catch.
&lt;/p&gt;

&lt;p&gt;
Then there was this problem.
&lt;/p&gt;

&lt;p&gt;
The setup for this one's a little more complicated. The group was
using a facial recognition api. You provide the API with the url to an
image, it fetches it and does recognition.
&lt;/p&gt;

&lt;p&gt;
It's also important to note that when Flask is running, it will serve
files from a static directory, so, if I'm running my flask server on
myhost, port 800 and you stored an image named picture.jpg in the
static directory, going to:
&lt;/p&gt;

&lt;verbatim&gt;
 http://myhost:8000/static/picture.jpg
&lt;/verbatim&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
would get that image.
&lt;/p&gt;

&lt;p&gt;
The group did things right. They ran the Flask test server to serve
the static files and then wrote a small python program to test the
api:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;picture_url = build_url(some_data)
result = api_test(picture_url)
do_something(result)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Everything worked fine. 
&lt;/p&gt;

&lt;p&gt;
But, when they put this code in as a route in their web app (as in the
top code fragment), it froze. 
&lt;/p&gt;

&lt;p&gt;
They couldn't figure it out.
&lt;/p&gt;

&lt;p&gt;
The code worked as a "stand alone" but not in the web app.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
Once again, the built in Flask development server.
&lt;/p&gt;

&lt;p&gt;
The development server runs in a single thread / process. This means
it can only do one thing at a time. When they ran their test as a
separate program, the api they used made a request to their app to
serve up the static picture file and it worked.
&lt;/p&gt;

&lt;p&gt;
When they ran from the Flask application itself, their app made a call
to the web api (line 12) and then blocked while waiting for the
response. The web api tried to request the image from the Flask app
but it was blocked – &lt;b&gt;&lt;b&gt;deadlock&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Again, the solution was to run the web app using a server that could
handle multiple requests - gunicorn.
&lt;/p&gt;

&lt;p&gt;
Once again, that solved the problem.
&lt;/p&gt;

&lt;p&gt;
Both of these problems were fairly subtle and very hard to catch -
even with experience. I remember the hours I lost when I was learning
this stuff.
&lt;/p&gt;

&lt;p&gt;
Some times kids get caught up in algorithms or poor code design but
sometimes, it's just the tools.
&lt;/p&gt;</description><category>pedagogy</category><category>tools</category><guid>http://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</guid><pubDate>Sat, 23 Jan 2016 05:00:00 GMT</pubDate></item><item><title>Know your tools - intermediate Emacs</title><link>http://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
A good workman is known by his tools, or so the saying goes. My tools
of choice are my terminal shell and Emacs.
&lt;/p&gt;

&lt;p&gt;
I suppose if I was a full time developer working with a limited set of
tools I might like an IDE like JetBrains or Eclipse but no matter how
many alternatives I try, I always end back in Emacs.
&lt;/p&gt;

&lt;p&gt;
I recommend that my students spend time not only in Emacs but also in
tools like Vim or Sublime Text.
&lt;/p&gt;

&lt;p&gt;
I do warn them, though, that as a commercial product, Sublime might
not be around forever, I mean before Sublime was sublime, TextMate was
sublime. If you go back to the 1980s, Brief was sublime. 
&lt;/p&gt;

&lt;p&gt;
Commercial tools come and go but I've been using Emacs since the mid
eighties.
&lt;/p&gt;

&lt;p&gt;
A few students have been asking me for some pointers on going past the
basics of Emacs so here we go.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-orgheadline2" class="outline-2"&gt;
&lt;h2 id="orgheadline2"&gt;Notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline2"&gt;
&lt;p&gt;
This post just has some getting started notes. There are mode powerful
and advanced ways of doing most things.
&lt;/p&gt;

&lt;p&gt;
I think I'll just talk about a few of the basics here and will write
about code development with Emacs in a later post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline3" class="outline-2"&gt;
&lt;h2 id="orgheadline3"&gt;Starting out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline3"&gt;
&lt;p&gt;
Once you're OK with the basics (by using the built in tutorial or
on line resources) start to fore yourself to get to know:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-3"&gt;
&lt;h3 id="orgheadline4"&gt;Buffers&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgheadline4"&gt;
&lt;p&gt;
when you find a new file &lt;b&gt;&lt;b&gt;(C-x C-f)&lt;/b&gt;&lt;/b&gt; it opens it into a new
buffer. You can also open a new buffer using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and rather than
selecting a buffer typing in a new buffer name.
&lt;/p&gt;

&lt;p&gt;
Each buffer can hold a file and you can switch quickly between them
using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and hitting &lt;b&gt;&amp;lt;Enter&amp;gt;&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
You can kill the current buffer with &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Using buffers lets you edit multiple files in a project quickly and
efficiently.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline5" class="outline-3"&gt;
&lt;h3 id="orgheadline5"&gt;Windows&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgheadline5"&gt;
&lt;p&gt;
Your Emacs frame can be split into multiple windows. &lt;b&gt;&lt;b&gt;C-x 2&lt;/b&gt;&lt;/b&gt; splits
the window top and bottom, &lt;b&gt;&lt;b&gt;C-x3&lt;/b&gt;&lt;/b&gt; left and right. You can switch
between windows using &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; for other window. Switching to one
window is done with &lt;b&gt;&lt;b&gt;C-x 1&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgheadline6" class="outline-2"&gt;
&lt;h2 id="orgheadline6"&gt;Getting Help&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline6"&gt;
&lt;p&gt;
Get to know the built in help. You can always use functions like
&lt;b&gt;&lt;b&gt;M-x describe-function&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;M-x describe-key&lt;/b&gt;&lt;/b&gt; and of course
you can use completion to help speed things up but the help functions
are bound to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;C-h k  for describe key&lt;/li&gt;
&lt;li&gt;C-h f  for describe function&lt;/li&gt;
&lt;li&gt;C-h a for search for command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can usually type &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt; to close the help.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline7" class="outline-2"&gt;
&lt;h2 id="orgheadline7"&gt;Navigation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline7"&gt;
&lt;p&gt;
Use search for navigation rather than arrow keys.
&lt;/p&gt;

&lt;p&gt;
This can change the way you edit. 
&lt;/p&gt;

&lt;p&gt;
For example ,if I wanted to go up to the word Navigation, above,
rather than using traditional motion keys, I'd do a reverse search
(&lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt;) and search for Nav.
&lt;/p&gt;

&lt;p&gt;
Incremental search forward (&lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt;) and back are your friends.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline8" class="outline-2"&gt;
&lt;h2 id="orgheadline8"&gt;Packages&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline8"&gt;
&lt;p&gt;
You can check out my emacs configuration here: 
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/zamansky/dotemacs"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/dotemacs"&gt;https://github.com/zamansky/dotemacs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
You can find basic installation instructions there or you can use the
interactive package manager, invoking it with &lt;b&gt;&lt;b&gt;M-x list-packages&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Some of my favorite general purpose packages are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt; - for navigation and finding files&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nflath/hungry-delete"&gt;Hungry Delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/magnars/expand-region.el"&gt;Expand Region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/ace-window"&gt;Ace Window&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline9" class="outline-2"&gt;
&lt;h2 id="orgheadline9"&gt;Next steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline9"&gt;
&lt;p&gt;
We haven't even talked about code development or killer packages like
org-mode but I think this will do for a start.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/</guid><pubDate>Wed, 28 Oct 2015 04:00:00 GMT</pubDate></item><item><title>Shell games - who confirmed attendence</title><link>http://cestlaz.github.io/posts/2015-03-19-duplicate-emails.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;

&lt;p&gt;
We're busy organizing &lt;a href="http://cstuy.org"&gt;CSTUY's&lt;/a&gt; first &lt;a href="http://cstuy.org/programs/defhacks"&gt;hackathon&lt;/a&gt;. It's going to be at
&lt;a href="http://sumall.com"&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href="http://cstuy.org/programs/hacking_sessions"&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;

&lt;p&gt;
The kids signed up on a Google doc but we all know the story – when
people sign up for a free event, even one with free food and t-shirts,
many don't show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;

&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn't confirmed on
the second. 
&lt;/p&gt;

&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren't on sheet 2. I'm sure there's some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn't so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;

&lt;p&gt;
So, here's how a command line guy would do this.
&lt;/p&gt;

&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-org"&gt;|&lt;/pre&gt;&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/2015-03-19-duplicate-emails.html/</guid><pubDate>Thu, 19 Mar 2015 04:00:00 GMT</pubDate></item></channel></rss>