<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z (Posts about tools)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/tools.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 31 Jul 2017 20:16:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs 36 - A Touch of Elisp</title><link>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I've been working on a vue.js project this summer. During the school
year I really can't dive into code so it's been fun.
&lt;/p&gt;

&lt;p&gt;
I've already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn't easily do was arrange windows the way I
wanted.
&lt;/p&gt;

&lt;p&gt;
I've been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp.png" alt="touch-elisp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp2.png" alt="touch-elisp2.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;

&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/swap-windowsn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ace-swap-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aw-flip-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;z-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'z/swap-windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The video goes into more details but it shows that if you're not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/NQhud2ZNd1w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid><pubDate>Sun, 30 Jul 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs 35 - Blogging</title><link>http://cestlaz.github.io/posts/using-emacs-35-blogging/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Very little new Emacs in today's episode of Using Emacs. The video
shows my old blogging workflow and what I'm playing with now.
&lt;/p&gt;

&lt;p&gt;
The only new Emacs covered is the &lt;a href="https://github.com/rejeep/prodigy.el"&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href="https://getnikola.com/blog/index.html"&gt;Nikola&lt;/a&gt;'s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;

&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href="https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/"&gt;here&lt;/a&gt; and
&lt;a href="https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/"&gt;here&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
There's not much more to say here so enjoy the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wSeTic9obKw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-35-blogging/</guid><pubDate>Tue, 27 Jun 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs - 34 - ibuffer and emmet</title><link>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;

&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you'll start
to accumulate buffers. Last time, I talked about using &lt;a href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump"&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;

&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;b&gt;&lt;b&gt;list-buffers&lt;/b&gt;&lt;/b&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the list-buffers buffer brings up
more details. 
&lt;/p&gt;

&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the buffer
brings up help). 
&lt;/p&gt;

&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href="http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html"&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration (mostly stolen from Owen):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-saved-filter-groups&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dired"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dired-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^.*org$"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;js2-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eshell-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;shell-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mu4e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\*mu4e\*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"programming"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;python-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;c++-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emacs"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*scratch\\*$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*Messages\\*$"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-mode-hook&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-auto-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-switch-to-saved-filter-groups&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; don't show these&lt;/span&gt;
					&lt;span class="c1"&gt;;(add-to-list 'ibuffer-never-show-predicates "zowie")&lt;/span&gt;
&lt;span class="c1"&gt;;; Don't show filter groups if there are no buffers in that group&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-show-empty-filter-groups&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Don't ask for confirmation to delete marked buffers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-expert&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The video also shows &lt;a href="https://github.com/smihica/emmet-mode"&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href="https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s"&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It's a real winner.
&lt;/p&gt;


&lt;p&gt;
Here's the config I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;emmet-mode&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'sgml-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'web-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'css-mode-hook&lt;/span&gt;  &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; enable Emmet's css abbreviation.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check them both out:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yUfA-7wWNKA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid><pubDate>Thu, 15 Jun 2017 19:00:26 GMT</pubDate></item><item><title>Python - Editor or IDE</title><link>http://cestlaz.github.io/posts/python-editors/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Earlier today I read Garth Flint's latest post on &lt;a href="https://gflint.wordpress.com/2017/05/25/python-editors-simple-wins/%0A"&gt;choosing a Python
environment for his classes&lt;/a&gt;. While our classes and populations are
different it looks like Garth and I share a lot of thoughts on the
subject.
&lt;/p&gt;

&lt;p&gt;
I started to write a comment to leave on Garth's blog but since it was
getting a little long I thought I'd write it up as a post.
&lt;/p&gt;

&lt;p&gt;
The question of development environment can be an important one and
can make a big difference. When I designed the intro course at Stuy,
the fact that Dr. Scheme existed made the use of Scheme in the class
an option. Without it as a supportive and simple environment for the
students I probably wouldn't have been able to use Scheme even though
I really liked it as a teaching and learning tool.
&lt;/p&gt;

&lt;p&gt;
Garth writes about issues relating to choosing a local development
environment so that's what I'm going to stick to here. If you want an
online environment check out &lt;a href="http://codesters.com"&gt;Codesters&lt;/a&gt; - a terrific online Python
environment with lots of educational support materials and features
and &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt; - an online environment that supports many languages and
is also developing great teacher and class support – I very much like
both of these platforms.
&lt;/p&gt;

&lt;p&gt;
The first question is editor or IDE?
&lt;/p&gt;

&lt;p&gt;
As a user, I'm very pro editor. Learn a tool that you can customize to
your tastes and that will work for all sorts of text editing chores
from coding to document preparation to scheduling and more and you're
in great shape. Personally, I'm an &lt;a href="http://cestlaz.github.io/stories/emacs"&gt;Emacs wonk&lt;/a&gt; but there are other
choices as well.
&lt;/p&gt;

&lt;p&gt;
As a teacher, though, Emacs or another programmers editor can be
overwhelming for younger students and rank beginners. 
&lt;/p&gt;

&lt;p&gt;
This can make IDEs attractive.
&lt;/p&gt;

&lt;p&gt;
Some IDEs are too big and cumbersome and can add even more cognitive
load than an editor - think Eclipse for Java development. If you think
writing
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
is a lot of overhead, just wait until you have a novice try to start a
Java project in Eclipse.
&lt;/p&gt;

&lt;p&gt;
Other IDEs are more streamlined. One common choice is
Idle. It's big advantage is that it's always available and is "part"
of Python. On the other hand, it doesn't seem to add much to a bare
editor and I've found that it can be somewhat confusing.
&lt;/p&gt;

&lt;p&gt;
Garth seems to have settled on &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from &lt;a href="https://jetbrains.com"&gt;JetBrains&lt;/a&gt;. It's pretty
streamlined and really easy to get up and running. JetBrains also
provides a free community edition as well as a heavier professional
one available for purchase. Garth notes that it's a Python only IDE
but JetBrains has similar IDEs for a whole bunch of languages and I
seem to recall you can add plugins across their IDEs to basically make
them multi-language development environments.
&lt;/p&gt;

&lt;p&gt;
I really like the JetBrains products and if I used an IDE I'm pretty
sure I'd use their products. As a teacher though, I find their IDEs a
little too powerful for my tastes. I want a learner IDE to provide the
bare minimum of features - an interactive REPL, a code window, run and
debug buttons, some completion and help - but to make those features
really easy to use. JetBrains does a little too much. 
&lt;/p&gt;

&lt;p&gt;
What I ended up using in the past is &lt;a href="http://drpython.sourceforge.net/"&gt;Dr Python&lt;/a&gt;. For me it hit the
sweet spot. As an added bonus we were already using Dr. Racket (nee
Dr. Scheme) and Dr. Java so our students had a similar environment
across languages and even NetLogo looked and behaved similarly. 
&lt;/p&gt;

&lt;p&gt;
Is there a right answer? Probably not. Just as with choosing a first
language there are always trade offs. Besides, if you don't have the
right solution, there will be another one next week. Just recently I
saw &lt;a href="http://thonny.org/"&gt;this project&lt;/a&gt;. A new beginners IDE for python. It looks interesting
and worth checking out.
&lt;/p&gt;

&lt;p&gt;
The right IDE can make a big difference while keeping the overhead low
and giving just the right amount of support. For me, the last time
around it was Dr. Python. For Garth, it looks like PyCharm fits the
bill. Looking at the overall plan, I usually start the kids off with a
simple learners IDE and then transition them to a programmers editor
like Emacs as they gain more comfort and experience.
&lt;/p&gt;

&lt;p&gt;
As a postscript, let me share these links on how I use Emacs for
Python development (each with a video) as well as my series on how I
use Emacs in general:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs/"&gt;http://cestlaz.github.io/stories/emacs/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/using-emacs-12-python"&gt;http://cestlaz.github.io/posts/using-emacs-12-python&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet"&gt;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>teaching</category><category>tools</category><guid>http://cestlaz.github.io/posts/python-editors/</guid><pubDate>Thu, 25 May 2017 19:47:37 GMT</pubDate></item><item><title>Using Emacs - 33 - projectile, dumb-jump</title><link>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href="https://github.com/ericdanan/counsel-projectile"&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; projectile&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;projectile-global-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;projectile-completion-system&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel-projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;counsel-projectile-on&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it's a
git or other source control repo, if it's created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;b&gt;&lt;b&gt;.projectile&lt;/b&gt;&lt;/b&gt; in
the root directory of the project.
&lt;/p&gt;

&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;

&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;b&gt;&lt;b&gt;which-key&lt;/b&gt;&lt;/b&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;

&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href="http://projectile.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The other package I show is &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;. It's basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;

&lt;p&gt;
Here's my current config:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"M-g o"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g x"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external-other-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-selector&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="c1"&gt;;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dumb-jump-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wBfZzaff77g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid><pubDate>Fri, 28 Apr 2017 13:00:26 GMT</pubDate></item><item><title>GitHub as a tool for education</title><link>http://cestlaz.github.io/posts/sigcse-2017-github-4/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
When I started using git and GitHub with my students it was a natural
progression having started with started with CVS and then, as
technology changed moving through Subversion and then Mercurial. It
was all about using sensible professional software development
techniques while making it easier for students to submit work and for
me to evaluate their submissions.
&lt;/p&gt;

&lt;p&gt;
Over time, I found that git and GitHub in fact provided some extra
support for educators right out of the box.
&lt;/p&gt;

&lt;p&gt;
In my &lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-3"&gt;last github post&lt;/a&gt; I talked about using the results of &lt;code&gt;git log&lt;/code&gt;
and looking at diffs. Both provide ways of seeing what a student did
and when. The commit log and history make it easier to hold students accountable to working
through a project and not leavings for the last minute. The diffs make
it easier to see what's changed both to see progress and also to help
support students as they develop their projects.
&lt;/p&gt;

&lt;p&gt;
If you use Emacs, as I do, you can use the &lt;a href="https://github.com/pidu/git-timemachine"&gt;git timemachine&lt;/a&gt; package
which does a great job visualizing changes:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-github/timemachine.gif" alt="timemachine.gif" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Other editors might have a similar feature.
&lt;/p&gt;

&lt;p&gt;
The contribution graphs also provide a quick snapshot which shows what
team members are contributing and when:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-github/githubgraph.png" alt="githubgraph.png" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The punchcard graph is also useful to see when students actually do
their work.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-github/githubgraph2.png" alt="githubgraph2.png" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
GitHub also make it easy to set up starter code or to have students
"take over" each others projects by forking.
&lt;/p&gt;

&lt;p&gt;
I'm very happy using git and GitHub as is but if you want more
support, check out &lt;a href="https://classroom.github.com/"&gt;GitHub Classroom&lt;/a&gt;. Had it existed when I started,
I'd probably have used it but since I had already gotten used to my
work flows I've stuck with raw git and github.
&lt;/p&gt;

&lt;p&gt;
In case you missed the earlier posts describing the process I use to
introduce github to my classes here they are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-1"&gt;Part 1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-2"&gt;Part 2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/sigcse-2017-github-3"&gt;Part 3&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'm hoping some of you have found this set of four posts useful or at
least interesting.
&lt;/p&gt;</description><category>pedagogy</category><category>tools</category><guid>http://cestlaz.github.io/posts/sigcse-2017-github-4/</guid><pubDate>Tue, 11 Apr 2017 23:11:30 GMT</pubDate></item><item><title>SIGCSE 2017 - a path to github part 3</title><link>http://cestlaz.github.io/posts/sigcse-2017-github-3/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I wanted to write this up earlier but, as so frequently happens all my
dormant work projects decided it was time to rise up and demand
instant attention.
&lt;/p&gt;

&lt;p&gt;
When we left off, we had students pulling code and submitting homework
via github.
&lt;/p&gt;

&lt;p&gt;
Form here, it's an easy step to have them working on a small project
in their own repo. In fact, sometimes, I'll jump right to a two person
project where one person creates the repo and invites the other (and
me) as a collaborator.
&lt;/p&gt;

&lt;p&gt;
Once here, it's important to emphasize the normal workflow:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;edit stuff with an occasional &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt;,  or &lt;code&gt;got mv&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;commit
&lt;/li&gt;
&lt;li&gt;and an occasional &lt;code&gt;git push&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Regardless of how much you emphasize the workflow you're now going to
have to cover merges as well how to recover from problems by going to
an earlier revision.
&lt;/p&gt;

&lt;p&gt;
For going back to earlier versions or otherwise recovering from
disasters, I don't show them the "right" way of doing things. I show
them a way that's easy to remember and reliably works without tons of
searching for answers.
&lt;/p&gt;

&lt;p&gt;
First, given some repo, I have them clone a version under another
name:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:hunterdaedalus/classcode.git newdirname
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now, they have the original repo and a clone under the directory
&lt;b&gt;&lt;b&gt;newdirname&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
I have them go into that new copy and use &lt;code&gt;git log&lt;/code&gt; to go through the
logs to find an earlier version that they want to go back to.
&lt;/p&gt;

&lt;p&gt;
The log will look something like this:
&lt;/p&gt;

&lt;p class="verse"&gt;
commit 67eceb5e0a01ca5f5fb54ace65a4fe134f71edae&lt;br&gt;
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;&lt;br&gt;
Date:   Sat Feb 25 12:32:26 2017 -0500&lt;br&gt;
&lt;br&gt;
    updated Makefile&lt;br&gt;
&lt;br&gt;
commit 7efed10eb6015276b0cb82874ce786dc68a683ae&lt;br&gt;
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;&lt;br&gt;
Date:   Sat Feb 25 08:45:34 2017 -0500&lt;br&gt;
&lt;br&gt;
    broke out main –&amp;gt; main and shapes&lt;br&gt;
&lt;br&gt;
commit e8b5c240123a7cb17920d52b4aba9cf5787ddab2&lt;br&gt;
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;&lt;br&gt;
Date:   Sat Feb 25 08:36:29 2017 -0500&lt;br&gt;
&lt;br&gt;
    added lab3 code&lt;br&gt;
&lt;br&gt;
commit 6d5bcf866306334ddc5c6a48e8f49fb39ddbcb18&lt;br&gt;
Author: Some other coder &amp;lt;somone@somewhere.net&amp;gt;&lt;br&gt;
Date:   Sun Feb 19 19:29:51 2017 -0500&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;
Find the hash that they want to get back to and &lt;b&gt;&lt;b&gt;checkout&lt;/b&gt;&lt;/b&gt; that
version (you normally only have to use the first few characters of
the hash):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout 7efed10
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now they can grab what they want, copy it into the working copy of the
repo, &lt;b&gt;&lt;b&gt;commit&lt;/b&gt;&lt;/b&gt; the changes and &lt;b&gt;&lt;b&gt;push&lt;/b&gt;&lt;/b&gt; them back.
&lt;/p&gt;


&lt;p&gt;
For Merging, I start by having them do it manually. I'll have them
load the file in question into their editor and look for the chunks
that look like this:
&lt;/p&gt;

&lt;p class="verse"&gt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; A&lt;br&gt;
lines in file A&lt;br&gt;
&lt;code&gt;=====&lt;/code&gt;&lt;br&gt;
lines in file B&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; B&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
They'll manually make the changes, then save, commit and push back.
&lt;/p&gt;

&lt;p&gt;
Later, I'll show them a couple of tools to help along the way. I
usually show ediff in emacs along with meld.
&lt;/p&gt;

&lt;p&gt;
Once they've been doing this for a while, it's easy to expand group
sizes. After that, I'll introduce &lt;b&gt;&lt;b&gt;issues&lt;/b&gt;&lt;/b&gt; via the github interface.
&lt;/p&gt;

&lt;p&gt;
The last big topic is branches.
&lt;/p&gt;

&lt;p&gt;
First I show basic branches and merging. Here's a pretty good &lt;a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"&gt;run
through&lt;/a&gt;. Afterwards, I'll show how branching works in conjunction with
github. This is also a good time to emphasize that students have to
actually read the messages that git gives them when things don't  go
well. In most cases, the message will contain the exact thing to type
to fix the problem (such as linking a branch with a branch up on
github).
&lt;/p&gt;

&lt;p&gt;
Now is also the time to introduce pull requests and how to use them to
support code review. The general setup I recommend is one branch per
group member and a main "deployment" branch with group members
creating more branches as they see fit.
&lt;/p&gt;

&lt;p&gt;
That's about it. I've followed this process, more or less, over a
semester, over a year, and over multiple years. It's worked for me, I
hope some of this helps you as well.
&lt;/p&gt;

&lt;p&gt;
In the next and probably last git/github post I'll talk about the
educational benefits that I've discovered along the way. After that,
I'll get back to some emacs videos, other SIGCSE stuff and my normal rants.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>tools</category><guid>http://cestlaz.github.io/posts/sigcse-2017-github-3/</guid><pubDate>Thu, 30 Mar 2017 18:02:31 GMT</pubDate></item><item><title>SIGCSE 2017 - a path to github part 2</title><link>http://cestlaz.github.io/posts/sigcse-2017-github-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Note:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Just for some quick context. The process I started to describe in the
last post and continue here chronicles what I did at Stuy with high
schoolers. Now that I'm at Hunter college, I'm adapting the process
but the overarching themes remain the same.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Post starts here:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Now that your students have been pulling the classcode repo regularly
it's time to move to the next step - adding and pushing files to a
repo.
&lt;/p&gt;

&lt;p&gt;
I don't claim to do this the "right way" or the best way but it's
worked for me and it's gotten my students up to speed.
&lt;/p&gt;

&lt;p&gt;
I ease my students into adding and pushing files using git through
homework submission. I create a single repo, usually named
&lt;b&gt;&lt;b&gt;submissions&lt;/b&gt;&lt;/b&gt; and make a folder for each student underneath looking
something like this:
&lt;/p&gt;
&lt;p class="verse"&gt;
.&lt;br&gt;
└── submissions&lt;br&gt;
    ├── abram_sarah&lt;br&gt;
    ├── chen_stuart&lt;br&gt;
    └── thompson_steve&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
Before going any further, let me clear up one thing. The repo is
public so all the students have access to each others work. I'm OK
with that. We could have each student make their own repo and use git
&lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodules&lt;/a&gt; to make a submissions repo but administration is much
trickier and we lose the chance to build a culture of cooperation and
trust. We can lock down our submission systems as much as we want. If
students want to share assignments there's nothing we can do about
it. 
&lt;/p&gt;

&lt;p&gt;
My preference is to try to build a culture that minimizes bad
behavior and rewards good behavior. I'd rather see an incorrect
homework so that I can tell what we need to work on than a copied
perfect assignment. I'd rather see students cite each other, share
properly, and support each other than copy in the shadows. 
&lt;/p&gt;

&lt;p&gt;
I'm not naive enough to believe that copying doesn't happen in my
classes but I still prefer erring on the side of openness.
&lt;/p&gt;

&lt;p&gt;
Once the repo is set up, I give all the students access. This is a
little onerous since I have to type each of their GitHub usernames
under the collaborators section of the submissions repo but I only
have to do this once a semester.
&lt;/p&gt;

&lt;p&gt;
Then I teach the workflow. Assignments go into a file or folder under
their directory named ##_name where ## is the assignment number
(01,02,03, etc) and name is the assignment name. The student workflow
is:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;git pull
&lt;/li&gt;
&lt;li&gt;git add (sometimes)
&lt;/li&gt;
&lt;li&gt;git commit
&lt;/li&gt;
&lt;li&gt;git push
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Since every student is working in their own directory, things
basically work.
&lt;/p&gt;

&lt;p&gt;
The first issue that students come up with is when another student
pushes before another student. The second student merely has to do
another &lt;b&gt;&lt;b&gt;git pull&lt;/b&gt;&lt;/b&gt; before proceeding. This provides an easy
introduction to dealing with the distributed nature of git.
&lt;/p&gt;

&lt;p&gt;
There will occasionally be other issues when students don't follow
procedure exactly so I'll have to fix the repo every now and then but
nothing too bad and each time is a opportunity to show the class:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;you can pretty much always restore and fix things once you commit
them.
&lt;/li&gt;
&lt;li&gt;the specifics to fix things.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
There will be a few bumps in the road but after a few assignments the
sailing will be pretty smooth.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, the students are a little closer to being fully
fluent using git, they're hopefully using each others code as
resources but in a proper way and since the students are all using a
consistent assignment naming convention I can use simple scripts and
shell commands to do all sorts of processing on assignments.
&lt;/p&gt;

&lt;p&gt;
That's the end of phase two. The next step  brings us to small
projects using git.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>tools</category><guid>http://cestlaz.github.io/posts/sigcse-2017-github-2/</guid><pubDate>Sun, 19 Mar 2017 14:11:00 GMT</pubDate></item><item><title>SIGCSE 2017 - a path to github part 1</title><link>http://cestlaz.github.io/posts/sigcse-2017-github-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes. 
&lt;/p&gt;

&lt;p&gt;
This series is not meant to be a git or &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I've linked to below).  This is
about the process I use with my students to get them up to speed. 
&lt;/p&gt;

&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool. 
&lt;/p&gt;

&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I'll talk about that at the end of the
series.
&lt;/p&gt;


&lt;p&gt;
Here's part one. 
&lt;/p&gt;

&lt;p&gt;
I'm doing this with git and GitHub but there's no reason why other
systems and hosts can't be used. I'd also recommend that any educator
or student sign up for the assorted &lt;a href="https://education.github.com/"&gt;discounts&lt;/a&gt; offered by GitHub.
&lt;/p&gt;

&lt;p&gt;
I've followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Step 1 - code distribution&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
To start, I don't even talk about version control. We start with code
distribution. For years, I've looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments. 
&lt;/p&gt;

&lt;p&gt;
I've tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.
&lt;/p&gt;

&lt;p&gt;
At Stuy, we've always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.
&lt;/p&gt;

&lt;p&gt;
Uploading to a CMS system was also problematic - I'm a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.
&lt;/p&gt;

&lt;p&gt;
Enter git. Now, of course, if you're going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://try.github.io/"&gt;https://try.github.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0fKg7e37bQE"&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href="https://classroom.github.com/"&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don't use it because, as I said,
I'm an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I'd take some time to look at their
current offerings before jumping in.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Set up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;This&lt;/a&gt; help page
has more information. You'll want to register an ssh key from every
machine you use - home, work, laptop. 
&lt;/p&gt;


&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;b&gt;&lt;b&gt;classcode&lt;/b&gt;&lt;/b&gt;. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; when creating the repo, make sure to
check the "initialize this repository with a README" box. If you don't
you'll be given a set of instructions on how to set things up once you
click &lt;b&gt;&lt;b&gt;Create repository&lt;/b&gt;&lt;/b&gt; but it's easier and easier to follow if
you start with an initialized repo with a README.
&lt;/p&gt;

&lt;p&gt;
I make the repo public – it's code I'm distributing – nothing to
hide here. If you aren't comfortable with that, just make the repo
private. If you've registered as a teacher with GitHub, you can set up
an organization and you'll be able to set up free private repos within
it. The other downside here is that you'll have to individually give
each student access to the repo. That's a mild annoyance but it only
has to be done once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Teacher use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Next, clone out the repo. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;b&gt;&lt;b&gt;clone&lt;/b&gt;&lt;/b&gt; button, it says "Clone with SSH." If not, just
click the "Use SSH" link in the same box. Students will clone the
using https.
&lt;/p&gt;

&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git pull&lt;/b&gt;&lt;/b&gt; at the start of class
&lt;/li&gt;
&lt;li&gt;write code throughout class
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git add&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;git commit&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git push&lt;/b&gt;&lt;/b&gt; at the end of class
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I use a similar flow when I want to add files in my office or at home.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Student use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;b&gt;&lt;b&gt;git
pull&lt;/b&gt;&lt;/b&gt;. That's all there is to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Thoughts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
That's it. The kids are now using GitHub – they're probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;b&gt;&lt;b&gt;git status&lt;/b&gt;&lt;/b&gt;,
&lt;b&gt;&lt;b&gt;git log&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git diff&lt;/b&gt;&lt;/b&gt; to set the stage for step 2 of this
process and beyond.
&lt;/p&gt;

&lt;p&gt;
Since the students aren't adding, committing or pushing, you probably won't
get any errors. 
&lt;/p&gt;

&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven't pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.
&lt;/p&gt;


&lt;p&gt;
I'm happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.
&lt;/p&gt;

&lt;p&gt;
The next step  is having the students add files to a repo. That's the
next post in this series.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>tools</category><guid>http://cestlaz.github.io/posts/sigcse-2017-github-1/</guid><pubDate>Thu, 16 Mar 2017 13:11:00 GMT</pubDate></item><item><title>Using Emacs - 32 - C++</title><link>http://cestlaz.github.io/posts/using-emacs-32-cpp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;

&lt;p&gt;
The big difference is instead of building on my &lt;a href="https://github.com/zamansky/using-emacs"&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It's all
pulled from the main config with one additional package.
&lt;/p&gt;

&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; in a
directory off of your home directory named &lt;b&gt;&lt;b&gt;.emacs.d&lt;/b&gt;&lt;/b&gt; and run emacs,
it will install everything and you'll be good to go.
&lt;/p&gt;

&lt;p&gt;
If you've been following this series, the only new package is &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Package&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;which-key&lt;/td&gt;
&lt;td class="left"&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;auto-complete&lt;/td&gt;
&lt;td class="left"&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;flycheck&lt;/td&gt;
&lt;td class="left"&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;yasnippet&lt;/td&gt;
&lt;td class="left"&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;ggtags&lt;/td&gt;
&lt;td class="left"&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;color-theme&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;moe-theme&lt;/td&gt;
&lt;td class="left"&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The video also show me using &lt;b&gt;&lt;b&gt;counsel-ag&lt;/b&gt;&lt;/b&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href="http://cestlaz.github.io/posts/using-emacs-6-swiper"&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;b&gt;&lt;b&gt;smartparens&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;hungry-delete&lt;/b&gt;&lt;/b&gt; and
probably a few more.
&lt;/p&gt;

&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;

&lt;p&gt;
If you're an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven't done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;

&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;


&lt;p&gt;
Here's the configuration code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; set up package sources&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; small interface tweaks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; bring up help for key bindings&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; Auto completion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; on the fly syntax checking&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; snippets and snippet expansion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;;; Theme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;color-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;moe-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;moe-light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7SQmleA4EMo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-32-cpp/</guid><pubDate>Sat, 04 Mar 2017 13:00:26 GMT</pubDate></item></channel></rss>