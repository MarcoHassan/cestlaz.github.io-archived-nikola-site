<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z (tools)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/tools.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 26 May 2016 14:39:58 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs - Setting up the Package Manager</title><link>http://cestlaz.github.io/posts/using-emacs-1-setup/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video will step you through setting up Emacs to use &lt;a href="http://melpa.org/#/"&gt;MELPA&lt;/a&gt; for packages.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/49kBWM3RQQ8?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
We configured emacs by creating a folder named &lt;b&gt;.emacs.d&lt;/b&gt; and creating a
file within it named &lt;b&gt;init.el&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
Here's the contents of that file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
	&lt;span class="nv"&gt;:config&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The last two &lt;b&gt;inituse-package&lt;/b&gt; clauses install two helpful packages:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;try&lt;/b&gt;: let's you try packages without installing them.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;which-key&lt;/b&gt;: brings up help on key combinations.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Relavent links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Melpa and packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://melpa.org"&gt;&lt;/a&gt;&lt;a href="http://melpa.org"&gt;http://melpa.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/larstvei/Try"&gt;try&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-1-setup/</guid><pubDate>Mon, 23 May 2016 17:29:36 GMT</pubDate></item><item><title>Using Emacs - 3 - How to think about Emacs</title><link>http://cestlaz.github.io/posts/using-emacs-3-elisp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nyQxRarVYH4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
&lt;/p&gt;

&lt;p&gt;
In some ways, it's like those new fangled interactive programming environments where you type in code and the updates are reflected instantly. 
&lt;/p&gt;

&lt;p&gt;
In this video, I try to explain the way I think about Emacs and why it's so cool.
&lt;/p&gt;

&lt;p&gt;
The only change we made to our configuration was adding:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gets rid of the tool bar at the top.
&lt;/p&gt;

&lt;p&gt;
Next time, we start talking about efficiently using Emacs.
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-3-elisp"&gt;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-3-elisp/</guid><pubDate>Mon, 23 May 2016 17:29:36 GMT</pubDate></item><item><title>Using Emacs - Intro to Org Mode</title><link>http://cestlaz.github.io/posts/using-emacs-2-org/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/x5KiYDd9s8k?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
This video is a brief introduction to org-mode, a mode I use for all
sorts of things.
&lt;/p&gt;

&lt;p&gt;
We'll dive into org-mode later in the series. Right now I just want
you to see the basics since we'll be using org-mode for any notes that
are written up during this series. 
&lt;/p&gt;

&lt;p&gt;
Actually, all my blog posts are written in org-mode.
&lt;/p&gt;

&lt;p&gt;
Here are the important lines to add to your Emacs &lt;b&gt;init.el&lt;/b&gt; file  to
get the nice looking bullets when in org-mode:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;org-bullets&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-bullets-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
About a month ago, Emacs user Harry Schwartz gave a nice overview talk
on org-mode. If you want to get a better idea as to all the things you
can do with it, check it out: &lt;a href="https://www.youtube.com/watch?v=SzA2YODtgK4"&gt;https://www.youtube.com/watch?v=SzA2YODtgK4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Next time, we'll look at a little Elisp. After that, we'll dive in to
using Emacs effectively and efficiently. 
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;https://github.com/zamansky/using-emacs/tree/lesson-2-org&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/sabof/org-bullets"&gt;org-bullets&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-2-org/</guid><pubDate>Mon, 23 May 2016 17:29:36 GMT</pubDate></item><item><title>Using Emacs - Introduction</title><link>http://cestlaz.github.io/posts/using-emacs-introduction/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'm sure I've mentioned that I've been an Emacs wonk for
decades. Since the mid-80's in fact. I've spent time using other
editors, word processors, and development tools but always find my way
back.
&lt;/p&gt;

&lt;p&gt;
I recommend that budding computer science students develop a good tool
set and encourage them to explore Emacs but while it's pretty easy to
load Emacs and find your way around, particularly if you use the mouse
and menus there isn't a clear path to take you from beginner to using
it as an efficient tool let alone customizing it.
&lt;/p&gt;

&lt;p&gt;
Inspired by &lt;a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/featured"&gt;Mattias Petter Johansson&lt;/a&gt;, or MPJ who make a weekly video,
I decided to try to create a series of YouTube videos and matching
blog posts. I'll try to post one a week and I'll try to keep the
videos, at least after the first couple to just a few minutes and have
them focus on &lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;micro-habits&lt;/a&gt; - one or two small things that you can
bring to your work flow and internalize.
&lt;/p&gt;

&lt;p&gt;
The first three four (this one and the next three) will focus on
setting things up. After this post we'll have
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Setting up the package manager
&lt;/li&gt;
&lt;li&gt;Intro to org-mode (just so that you recognize the markup)
&lt;/li&gt;
&lt;li&gt;Intro to Elisp (just so you have an idea of those configuration
lines)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then we're off to the races. Here's what I'm thinking about for
the first few topics after the above mentioned ones:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Efficient Navigation
&lt;/li&gt;
&lt;li&gt;Windows and Buffers
&lt;/li&gt;
&lt;li&gt;Theming
&lt;/li&gt;
&lt;li&gt;Auto Completion
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then a series of short topics to show some of my favorite editing
tools. We'll also cover some larger topics including:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Python Development
&lt;/li&gt;
&lt;li&gt;C/C++ Development
&lt;/li&gt;
&lt;li&gt;Document Preparation
&lt;/li&gt;
&lt;li&gt;Scheduling / Calendaring / Note Taking
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll put together an index to these posts along with any ancillary
materials here: &lt;a href="file:///stories/emacs"&gt;&lt;/a&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Getting started&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This series is going to assume you've installed emacs and worked your
way through the included tutorial.
&lt;/p&gt;

&lt;p&gt;
To help you get to that point, here are some links to posts and sites
that I've found useful:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.braveclojure.com/basic-emacs/"&gt;http://www.braveclojure.com/basic-emacs/&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.masteringemacs.org/article/beginners-guide-to-emacs"&gt;https://www.masteringemacs.org/article/beginners-guide-to-emacs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs"&gt;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux"&gt;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here's a 10 minute getting started guide:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/K3_SFerNIeI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
So, stay tuned.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-introduction/</guid><pubDate>Mon, 23 May 2016 14:07:18 GMT</pubDate></item><item><title>Collaborative Coding or Cheating</title><link>http://cestlaz.github.io/posts/collaborative-coding-or-cheating/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I haven't been teaching this past semester. That's why I haven't been
writing much about lessons. I miss working with students but that will
resume in the fall and this semester has allowed me to get a jump on
new projects.
&lt;/p&gt;

&lt;p&gt;
It's also allowed me to look at some student issues from a bit of a
distance.
&lt;/p&gt;

&lt;p&gt;
One issue that keeps coming up is cheating. 
&lt;/p&gt;

&lt;p&gt;
Some of it, classroom cheating. my friend &lt;a href="https://twitter.com/cscheerleader"&gt;Ria&lt;/a&gt; recently asked a
question on Facebook about it. A nice thread ensued but unfortunately,
it's locked in the Facebook silo. I've got a lot to say on that and
hope to explore it soon but today let's focus on project
cheating - something that could just as easily apply to homeworks and
student essays and research papers as well.
&lt;/p&gt;

&lt;p&gt;
One part of the question is on students using code they find out in
the wild. &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred&lt;/a&gt; wrote a bit about it on his blog &lt;a href="http://blog.acthompson.net/2016/05/copying-codesteal-from-best.html"&gt;here&lt;/a&gt; where he points
out some pluses, some minuses, and raises some good thought points.
&lt;/p&gt;

&lt;p&gt;
I want to keep it in the class - code sharing amongst students,
project and source code submission, and group projects.
&lt;/p&gt;

&lt;p&gt;
Teachers have all sorts of options these days including:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Using a CMS like Blackboard or Moodle
&lt;/li&gt;
&lt;li&gt;Dropbox based solutions
&lt;/li&gt;
&lt;li&gt;Emailing projects
&lt;/li&gt;
&lt;li&gt;Using development tools and sites such as git with GitHub, BitBucket
or other repository hosting services
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I've always been a fan of having the kids learn real software
engineering skills along with the CS so Git, GitHub and public repos
have been my weapon of choice.
&lt;/p&gt;

&lt;p&gt;
Interesting enough, I've gotten an earful both from fellow teachers
and professors and online for my stance on public repos. 
&lt;/p&gt;

&lt;p&gt;
I keep hearing "the kids will copy from each other" or something like
that. 
&lt;/p&gt;

&lt;p&gt;
As Alfred said in his post: "Students have been copying from
classmates for years."
&lt;/p&gt;

&lt;p&gt;
Students who want to copy assignments have done so long before we've
been teaching CS and they'll be doing it for years to come. 
&lt;/p&gt;

&lt;p&gt;
Using a hidden submission system doesn't help and could hurt.
&lt;/p&gt;

&lt;p&gt;
Far better to create an open environment. You get an opportunity to
talk about code sharing, attribution, learning from each other,
supporting each other, and where to draw the line.
&lt;/p&gt;

&lt;p&gt;
On top of that, the students learn a real tool set and have a chance
to learn real development methodologies.
&lt;/p&gt;

&lt;p&gt;
It's a win all around.
&lt;/p&gt;

&lt;p&gt;
Will open repos stop cheating and irresponsible copying? Certainly
not. It could, however, raise awareness. 
&lt;/p&gt;

&lt;p&gt;
So what do I do on the cheating front?
&lt;/p&gt;

&lt;p&gt;
Besides trying to create a culture where cheating is discouraged,
cooperation is encouraged but where students know the line, I will try
to keep them honest. 
&lt;/p&gt;

&lt;p&gt;
Frequently, the day a big project is due, I'll give a quiz on the
project. Students will have to describe parts of the project and what
they did. Either a student will have had to contributed or at least
will have had to have studied the rest of the teams code to pass the
quiz.
&lt;/p&gt;

&lt;p&gt;
GitHub also gives tools that help. 
&lt;/p&gt;

&lt;p&gt;
Here's the GitHub graph for a project:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/github-graph.png" alt="github-graph.png" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
You can see who did what and when. The teacher can drill down further
to examine the diffs – what code did each student write, when, and
from where. If two students submit very similar code, the commit
timestamps will even tell you who was first.
&lt;/p&gt;

&lt;p&gt;
The tooling for teachers could be better but the infrastructure is
there.
&lt;/p&gt;

&lt;p&gt;
Technology isn't going to prevent cheating and more often than not, it
seems that measures taken don't stop the bad guys but inconvenience
those trying to do it right.
&lt;/p&gt;

&lt;p&gt;
Much better to build a class culture where the kids want to do it the
right way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cheating</category><category>git</category><category>github</category><category>policy</category><category>tools</category><guid>http://cestlaz.github.io/posts/collaborative-coding-or-cheating/</guid><pubDate>Fri, 20 May 2016 11:25:13 GMT</pubDate></item><item><title>Shell short - tagging old posts in Nikola</title><link>http://cestlaz.github.io/posts/shell-short-tagging/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Quick post to add to the recent command line fu I've been writing
about.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/dougpete"&gt;Douglas Peterson&lt;/a&gt; had another &lt;b&gt;&lt;b&gt;Whatever happened to&lt;/b&gt;&lt;/b&gt; post. This time
on &lt;a href="https://dougpete.wordpress.com/2016/05/15/whatever-happened-to-6/"&gt;Logo&lt;/a&gt;. I wanted to reply, talk about NetLogo  and link to some of my
old NetLogo posts to help show how cool it is.
&lt;/p&gt;

&lt;p&gt;
Nikola supports tags, makes a nice &lt;a href="http://cestlaz.github.io/categories"&gt;tags&lt;/a&gt; page and for each tag, a nice
page of all the &lt;a href="http://cestlaz.github.io/categories/netlogo"&gt;links&lt;/a&gt;. 
&lt;/p&gt;


&lt;p&gt;
Nikola has a plugin &lt;b&gt;&lt;b&gt;tags&lt;/b&gt;&lt;/b&gt; which lets you manage tags from the
command line. For instance:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola tags -a netlogo posts/somepost.org
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Would add the tag &lt;b&gt;&lt;b&gt;netlogo&lt;/b&gt;&lt;/b&gt; to the specified post.
&lt;/p&gt;

&lt;p&gt;
The problem: The tags plugin only works if the post has a &lt;b&gt;&lt;b&gt;tag:&lt;/b&gt;&lt;/b&gt;
line already present in it's header comment and I hadn't put them in
my older posts.
&lt;/p&gt;

&lt;p&gt;
I had a bunch of posts, all of them in one directory. All the new ones
were &lt;b&gt;&lt;b&gt;.org&lt;/b&gt;&lt;/b&gt; files and had the tag slug. The others were &lt;b&gt;&lt;b&gt;.md&lt;/b&gt;&lt;/b&gt; markdown
files and &lt;b&gt;&lt;b&gt;.html&lt;/b&gt;&lt;/b&gt; html files. 
&lt;/p&gt;

&lt;p&gt;
Here's what a typical top block looks like:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!--
.. title: Looking for interesting questions
.. slug: 2010-01-03-looking-for-interesting-questions.html
.. date: 2010-01-03
.. type: text
--&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Sed to the rescue. Here's the what I ended up typing (from within the
posts directory) to add the
&lt;b&gt;&lt;b&gt;tags&lt;/b&gt;&lt;/b&gt; slug to the top comments right above the &lt;b&gt;&lt;b&gt;.. type: text:&lt;/b&gt;&lt;/b&gt; line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls *md *html | while read filename
do
    sed "/type: text/ i .. tags: " $filename
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
A line at a time:
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;ls *md *html&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
This lists all the files with that end in &lt;b&gt;&lt;b&gt;md&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;html&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;| while read filename&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
The vertical bar (pipe) sends the output of &lt;b&gt;&lt;b&gt;ls&lt;/b&gt;&lt;/b&gt; into the &lt;b&gt;&lt;b&gt;while read&lt;/b&gt;&lt;/b&gt;
command. The &lt;b&gt;&lt;b&gt;while&lt;/b&gt;&lt;/b&gt; command sets up a loop which, each time
through, reads the next input and places into the variable
&lt;b&gt;&lt;b&gt;filename&lt;/b&gt;&lt;/b&gt;. The body of the loop is between the &lt;b&gt;&lt;b&gt;do&lt;/b&gt;&lt;/b&gt; and the
&lt;b&gt;&lt;b&gt;done&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;sed "/ type: text/  i .. tags: " $filename&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Sed is the stream editor. The stuff between the slashes finds the line
with the text &lt;b&gt;&lt;b&gt;type: text&lt;/b&gt;&lt;/b&gt; in it. The &lt;b&gt;&lt;b&gt;i&lt;/b&gt;&lt;/b&gt; inserts a line above and
the rest of the stuff in the quotes is what to insert. The
&lt;b&gt;&lt;b&gt;$filename&lt;/b&gt;&lt;/b&gt; expands to each filename, one each time through the
loop.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Now all of my files have blank &lt;b&gt;&lt;b&gt;tag&lt;/b&gt;&lt;/b&gt; slugs so I can find my netlogo
posts and tag them:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola tags -a netlogo `grep -i -l netlogo posts/*`
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Any command in backticks expands to the result of the commmand. The
grep command has two argiments: &lt;b&gt;&lt;b&gt;-i&lt;/b&gt;&lt;/b&gt; means ignore case so it will
find netlogo, NetLogo, NETLOGO, etc.. The &lt;b&gt;&lt;b&gt;-l&lt;/b&gt;&lt;/b&gt; tells grep to just
output the filenames. So, the grep command will expand to a list of
files that mention netlogo. The full command adds the netlogo tag to
all of them.
&lt;/p&gt;

&lt;p&gt;
So, just a bit of quick shell scripting and I've:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;modified all old posts to accept tags.
&lt;/li&gt;
&lt;li&gt;added the netlogo tag to all my netlogo posts.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can find all those posts &lt;a href="http://cestlaz.github.io/categories/netlogo"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>nikola</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/shell-short-tagging/</guid><pubDate>Sun, 15 May 2016 13:58:44 GMT</pubDate></item><item><title>REPOST - Shell games - who confirmed attendance</title><link>http://cestlaz.github.io/posts/duplicate-emails/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Repost&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This is a repost from March 2015. It didn't transfer when I rebooted the blog.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Original&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;

&lt;p&gt;
We're busy organizing &lt;a href="http://cstuy.org"&gt;CSTUY's&lt;/a&gt; first &lt;a href="http://cstuy.org/programs/defhacks"&gt;hackathon&lt;/a&gt;. It's going to be at
&lt;a href="http://sumall.com"&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href="http://cstuy.org/programs/hacking_sessions"&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;

&lt;p&gt;
The kids signed up on a Google doc but we all know the story – when
people sign up for a free event, even one with free food and t-shirts,
many don't show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;

&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn't confirmed on
the second. 
&lt;/p&gt;

&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren't on sheet 2. I'm sure there's some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn't so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;

&lt;p&gt;
So, here's how a command line guy would do this.
&lt;/p&gt;

&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;e1&lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;e2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;a@a.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;b@b.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;b@b.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;F@f.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;c@c.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;c@c.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;d@d.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;d@d.com&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;e@e.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;f@f.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;g@g.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;h@h.com&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
If we put these lists together, any email that appears twice would
indicate that it's the email of someone that confirmed entry. Here we
use cat to catenate e1 and e2 and pipe them through sort.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
First problem –the upper case F – let's use &lt;b&gt;&lt;b&gt;tr&lt;/b&gt;&lt;/b&gt; to make
everything lower case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 |  tr A-Z a-z | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now we can see the duplicates next to each other. Next, &lt;b&gt;&lt;b&gt;uniq
-c&lt;/b&gt;&lt;/b&gt; tells us how many times each line appears:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-Z a-z | sort | uniq -c | sort
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I added the sort at the end, but we didn't need it.
&lt;/p&gt;

&lt;p&gt;
Here's what we get:
&lt;/p&gt;

&lt;p class="verse"&gt;
1 a@a.com&lt;br&gt;
 1 c@c.com&lt;br&gt;
 1 c@c.dom&lt;br&gt;
 1 e@e.com&lt;br&gt;
 1 g@g.com&lt;br&gt;
 1 h@hc.om&lt;br&gt;
 2 b@b.com&lt;br&gt;
 2 d@d.com&lt;br&gt;
 2 f@f.com&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
To pull out the ones that haven't replied I used egrep with a regex
that means "any line that starts with 1 or more spaces followed by the
number 1":
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep "^ +1"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and finally to isolate the emails using sed which removes the spaces
and number 1 from the beginning of the line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep "^ +1" | sed "s/\ \+1 //g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Each of the little utilities aren't all too useful by themselves but
if you learn them over time you start thinking about how you can
combine them to solve problems. 
&lt;/p&gt;

&lt;p&gt;
If you think this way and know some basic tools, all of a sudden all
manner of text manipulation problems become pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/duplicate-emails/</guid><pubDate>Thu, 12 May 2016 13:52:25 GMT</pubDate></item><item><title>BASH scripting?</title><link>http://cestlaz.github.io/posts/bash-scripting/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over in the Facebook AP Computer Science Teachers group someone asked
for thoughts on covering BASH scripting as a post AP topic.
&lt;/p&gt;

&lt;p&gt;
A number of us made suggestions. I linked to &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzR7Et9vETt"&gt;this&lt;/a&gt; old blog post.
&lt;/p&gt;

&lt;p&gt;
One group member said she asked around for similar suggestions and the
response she got was "vi and awk." I wanted to jokingly respond "and
after they suggested that they got into their time machine and went
back to the 70's."
&lt;/p&gt;

&lt;p&gt;
In all seriousness though, I think that suggesting specific tools or
commands is off base.
&lt;/p&gt;

&lt;p&gt;
The important thing to know about Vi is how to get out of it but it
isn't really a tool in the scripting sense. I do think students should
spend a good amount of time learning a powerful editor and should try
bot Emacs (my choice) and Vim but that's another story.
&lt;/p&gt;

&lt;p&gt;
I also use AWK but as it's a programming language in it's own right,
I'm not sure if I'd introduce it right off the bat.
&lt;/p&gt;

&lt;p&gt;
There are a number of important ideas kids can take away from learning
some Linux (or other Unix flavor):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;There's something out there besides Windows and MacOS
&lt;/li&gt;
&lt;li&gt;All about free software
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;The Unix Philosophy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That last one is the biggie and more specifically, there's a huge
upside in teaching kids the value of "OS as Toolset" where they can
compose the many tools that comprise the Linux experience to get
things done. 
&lt;/p&gt;

&lt;p&gt;
I gave an example of that in the &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzSBHt9vETu"&gt;post&lt;/a&gt; I previously linked to.
&lt;/p&gt;

&lt;p&gt;
For the teacher, that means wrapping your head around that way of
working. Living in the shell and using pipes to connect program to
progarm to program.
&lt;/p&gt;

&lt;p&gt;
I'd recommend getting into a time
machine ourselves and taking a look at: 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Unix_Programming_Environment" width="250px" align="center"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif" alt="English4.gif" width="250px" align="center"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It's dated but it's really a great book on getting into the Unix way
of doing things, particularly the chapter about filters. It also has
one of the best and clearest introductions to writing a compiler in
the chapter on program development.
&lt;/p&gt;

&lt;p&gt;
As I said, it is dated - shells are much easier to use and much more
robust, there are many more tools now, and they've evolved but it's
really a must read book.
&lt;/p&gt;

&lt;p&gt;
In terms of tools, I get a lot of mileage out of:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;description&lt;/th&gt;
&lt;th scope="col" class="left"&gt;example&lt;/th&gt;
&lt;th scope="col" class="left"&gt;explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;cat&lt;/td&gt;
&lt;td class="left"&gt;catenate or display a file&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;tr&lt;/td&gt;
&lt;td class="left"&gt;Translate characters&lt;/td&gt;
&lt;td class="left"&gt;tr A-Z a-z&lt;/td&gt;
&lt;td class="left"&gt;convert upper to lower case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;sed&lt;/td&gt;
&lt;td class="left"&gt;Stream editor&lt;/td&gt;
&lt;td class="left"&gt;sed "s/a/b/g"&lt;/td&gt;
&lt;td class="left"&gt;Replace all a with b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;wc&lt;/td&gt;
&lt;td class="left"&gt;word count&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;counts words lines and chars&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;cut&lt;/td&gt;
&lt;td class="left"&gt;cut columns&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;sort&lt;/td&gt;
&lt;td class="left"&gt;sort lines&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
A nice simple thing you can do with these is clean data. Let's say you
want to do some analytics on a book from Project Gutenberg. You might
want to convert all non letters to spaces, and all letters to lower
case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat book.txt | sed "s/[^a-zA-Z ]/ /g | tr A-Z a-z"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That sends book.txt into sed which uses a regular expression to convert
no space and letters to spaces. The tr command converts all upper case
letters to lower case.
&lt;/p&gt;

&lt;p&gt;
If you want one word per line, add:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "s/\n/g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and maybe get rid of blank lines:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "/^$/d"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We can now count the number of words in the file using &lt;b&gt;&lt;b&gt;*wc&lt;/b&gt;&lt;/b&gt; or even
get counts of all the words:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sort | uniq -c | sort -n
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;sort&lt;/b&gt;&lt;/b&gt; will sort all the lines, &lt;b&gt;&lt;b&gt;uniq -c&lt;/b&gt;&lt;/b&gt; will compress the lines that are
adjacent and the same and give you a count and then &lt;b&gt;&lt;b&gt;sort -n&lt;/b&gt;&lt;/b&gt; will
sort the results numerically.
&lt;/p&gt;

&lt;p&gt;
I wrote another post a while ago about using the shell to detect
who responded on a Google form. It looks like it didn't convert when
I moved to my current blogging platform - I'll repost that shortly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/bash-scripting/</guid><pubDate>Thu, 12 May 2016 12:39:25 GMT</pubDate></item><item><title>Should We Teach HTML?</title><link>http://cestlaz.github.io/posts/teaching-html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Yesterday, &lt;a href="https://twitter.com/dougpete"&gt;Doug Peterson&lt;/a&gt; wrote a "Whatever happened to" post subtitled
&lt;a href="https://dougpete.wordpress.com/2016/05/08/whatever-happened-to-5/"&gt;HTML as an essential 21st Century skill?&lt;/a&gt; It's a nice post.
&lt;/p&gt;

&lt;p&gt;
I left a comment but thought I'd elaborate here.
&lt;/p&gt;

&lt;p&gt;
No, knowing HTML is not programming - it's markup. Even so, when I
help people design CS programs, I'll frequently recommend starting
with HTML or at least introducing it early.
&lt;/p&gt;

&lt;p&gt;
Why? 
&lt;/p&gt;

&lt;p&gt;
It's a gateway and not just to programming.
&lt;/p&gt;

&lt;p&gt;
HTML is pretty easy, you want &lt;b&gt;&lt;b&gt;something&lt;/b&gt;&lt;/b&gt; bold, you just wrap the
word in &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;b&amp;gt;something&amp;lt;/b&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's also empowering and demystifies the web. Kids can create a simple
web page and load it right into their browser.
&lt;/p&gt;

&lt;p&gt;
It's true that today's web pages are chock-full-o javascript and css
but with just the basics, students can get the idea. You can also show
them pages by right clicking and viewing source.
&lt;/p&gt;

&lt;p&gt;
You can even have them change a live page.
&lt;/p&gt;

&lt;p&gt;
Try it. 
&lt;/p&gt;

&lt;p&gt;
Right click on the top of this page where it says "Musings about…"
Chose &lt;b&gt;&lt;b&gt;inspect element&lt;/b&gt;&lt;/b&gt;. In the "debugger" window double click the
text, change it and hit enter. This is just temporary - just reload
the page but it's pretty neat for a kid to change an article and then
screenshot it.
&lt;/p&gt;

&lt;p&gt;
HTML is also a nice stepping stone towards coding. You're working in a
plain text editor by adding special code words to basic text which are
then interpreted by, in this case, the web browser.
&lt;/p&gt;

&lt;p&gt;
The big reason for teaching html actually goes beyond this. Next step
after learning HTML is having the kids programatically generating web
pages in whatever language you're using for the class. I like using
Python. This requires a little infrastructure setup to serve kids work
but then there are two huge wins.
&lt;/p&gt;

&lt;p&gt;
First, as the kids learn programming, instead of just printing out
results, they can make a web site with their results and share it with
friends, family, and the world.
&lt;/p&gt;

&lt;p&gt;
The other big bonus is that kids might be able to leverage take these
skills to other classes. If the student has a history paper to write,
maybe the teacher will accept a history web site where the student can
write code to do their analytics and build nice looking tables and
graphs with results.
&lt;/p&gt;

&lt;p&gt;
So while knowledge of HTML in and of itself isn't really needed
anymore it's still an important part of the programs I build. 
&lt;/p&gt;</description><category>cli</category><category>shell</category><category>tools</category><guid>http://cestlaz.github.io/posts/teaching-html/</guid><pubDate>Mon, 09 May 2016 23:08:58 GMT</pubDate></item><item><title>Blogging with Emacs, Jekyll and Nikola</title><link>http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Switched over from &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; to &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; yesterday.
&lt;/p&gt;

&lt;p&gt;
One of the primary reasons was that I got fed up with managing a Ruby
development environment across all my machines. In spite of my
rantings, I'm sure Ruby and Ruby installs are fine - it's just
something that I'd have to deal with on a recurring basis for one
specific task - other than for Jekyll blogging, I don't use Ruby.
&lt;/p&gt;

&lt;p&gt;
So while a platform based on Python - generally my go to language,
made sense, the other driving force for the switch was the fact that
&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; and &lt;a href="http://orgmode.org/"&gt;org-mode&lt;/a&gt; have become such major parts of my workflow and
productivity.
&lt;/p&gt;

&lt;p&gt;
What do I use org-mode for?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;lesson planning
&lt;/li&gt;
&lt;li&gt;document preparation (instead of LaTeX)
&lt;/li&gt;
&lt;li&gt;note taking
&lt;/li&gt;
&lt;li&gt;blogging
&lt;/li&gt;
&lt;li&gt;email (with mu4e)
&lt;/li&gt;
&lt;li&gt;managing my schedule
&lt;/li&gt;
&lt;li&gt;tracking bookmarks
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and probably a lot more.
&lt;/p&gt;

&lt;p&gt;
Jekyll is actually a really nice tool. It's simple. You put together a
simple directory structure: Templates in _layouts, blog posts in
_posts, drafts in _drafts. Other directories that start with an
underscore are ignored and everything else is copied up to your site.
&lt;/p&gt;

&lt;p&gt;
I love that it's "close to the metal" You can put in html files with
some meta information up top or markdown. 
&lt;/p&gt;

&lt;p&gt;
You can take a look at my old site at
&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;&lt;/a&gt;&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;https://github.com/cestlaz/cestlaz.github.io-jekyll&lt;/a&gt; if you want to
take a look.
&lt;/p&gt;

&lt;p&gt;
The beauty is that you just push your files up to GitHub and it
automatically runs Jekyll and builds your site (&lt;a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/"&gt;more info here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The problem is that Jekyll doesn't play well with org-mode and
org-markup so my workflow became something like this
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Create a post &lt;b&gt;&lt;b&gt;something.org&lt;/b&gt;&lt;/b&gt; in the _org directory.
&lt;/li&gt;
&lt;li&gt;From within emacs, publish it. I've configured org-mode to publish
by exporting the org-mode markup file to html and saving it in the
_drafts directory.
&lt;/li&gt;
&lt;li&gt;If it looks good, copy and rename the file from _drafts to the
_posts directory and push it up to GitHub.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
A little clunky, but it works. The bigger problem was the amount of
time I'd spend putting html blocks into my org formatted posts to get
them to look the way I wanted (or at least close enough).
&lt;/p&gt;

&lt;p&gt;
Enter Nikola.
&lt;/p&gt;

&lt;p&gt;
Nikola's a much more powerful tool. It does much more but as a result
is much more complex. Normally, that's not my style but in this case
since It's Python, things balance out.
&lt;/p&gt;

&lt;p&gt;
I still have to figure out the entire templating system and all the
plugins but getting started was pretty quick.
&lt;/p&gt;

&lt;p&gt;
The big win is that Nikola supports a ton of formats for your posts
and pages. Native org-mode support for me was what did it for me. On top of
that, although I haven't tested it yet, is that there's also an
org-mode plugin to export to Nikola restructure text.
&lt;/p&gt;

&lt;p&gt;
My new workflow:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Write the post as an org-mode file.
&lt;/li&gt;
&lt;li&gt;run &lt;b&gt;&lt;b&gt;nikola github_deploy&lt;/b&gt;&lt;/b&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
And that's it. You can look at my Nikola site here:
&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;&lt;/a&gt;&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;https://github.com/cestlaz/cestlaz.github.io&lt;/a&gt;.
The source code is in the &lt;b&gt;&lt;b&gt;src&lt;/b&gt;&lt;/b&gt; branch, the actual rendered blog in
the &lt;b&gt;&lt;b&gt;master&lt;/b&gt;&lt;/b&gt; branch.
&lt;/p&gt;

&lt;p&gt;
So far, I'm pretty happy with the setup.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>mathjax</category><category>tools</category><guid>http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/</guid><pubDate>Sun, 17 Apr 2016 17:12:26 GMT</pubDate></item></channel></rss>