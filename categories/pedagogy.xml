<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z (pedagogy)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/pedagogy.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 26 Dec 2016 15:56:36 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A Teacher looks at Advent of Code 2016 #2</title><link>http://cestlaz.github.io/posts/advent-of-code-2016-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today we're looking at &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href="http://adventofcode.com/2016/day/2"&gt;number 2&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To change things up, I thought I'd do a video where I live code a solution.
&lt;/p&gt;

&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code. 
&lt;/p&gt;

&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;

&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href="http://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt; to take
away edge and special cases. 
&lt;/p&gt;

&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;

&lt;p&gt;
Here's the video, I hope you enjoy it:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EC8gSrYQ11g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><category>cs</category><category>pedagogy</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016-2/</guid><pubDate>Thu, 08 Dec 2016 13:40:49 GMT</pubDate></item><item><title>A Teacher looks at Advent of Code 2016 #1</title><link>http://cestlaz.github.io/posts/advent-code-2016-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I recently &lt;a href="http://cestlaz.github.io/posts/advent-of-code-2016/"&gt;posted&lt;/a&gt; about &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;

&lt;p&gt;
I thought I'd share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://adventofcode.com/2016/day/1"&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there's a problem - there are no limits on coordinates and we
can't make an unlimited size array.
&lt;/p&gt;

&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; location changes over
time. In the solution below, we start at &lt;b&gt;&lt;b&gt;(0,0)&lt;/b&gt;&lt;/b&gt; and count the steps as
we update two variables &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; and we have the number of steps taken to get there.
&lt;/p&gt;

&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I'm not arguing that what's written is
superior in any way, it's just what I ended up writing).
&lt;/p&gt;

&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which assigns &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; to the first item in the tuple and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt; the
second. I used that a number of times 
&lt;/p&gt;

&lt;p&gt;
I also use a list  I call &lt;b&gt;&lt;b&gt;dirs&lt;/b&gt;&lt;/b&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;

&lt;p&gt;
Here's all the code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# assume our starting location is 0,0&lt;/span&gt;

&lt;span class="c1"&gt;# we start with d=0 -&amp;gt; facing north&lt;/span&gt;
&lt;span class="c1"&gt;# as we turn left or right, we can just increment or decrement d&lt;/span&gt;
&lt;span class="c1"&gt;# and dirs[d] will give us the appropriate dx and dy to update&lt;/span&gt;
&lt;span class="c1"&gt;# our locatoin for the next step&lt;/span&gt;
&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# This is only needed for part 2  - We track visited locations&lt;/span&gt;
&lt;span class="c1"&gt;# by adding them to the dictionary. If we try to add a location&lt;/span&gt;
&lt;span class="c1"&gt;# that's already been visited we know that we've found our final &lt;/span&gt;
&lt;span class="c1"&gt;# location&lt;/span&gt;
&lt;span class="c1"&gt;# locs={}  # uncomment this line for part 2&lt;/span&gt;


&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# the first char in i is the direction to turn in (L or R)&lt;/span&gt;
    &lt;span class="c1"&gt;# the rest represents the number of steps.&lt;/span&gt;
    &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

	&lt;span class="c1"&gt;# Uncomment this block for part 2&lt;/span&gt;
	&lt;span class="c1"&gt;# each time we have a new location, see if it's already in&lt;/span&gt;
	&lt;span class="c1"&gt;# locs, if it isn't, add it.&lt;/span&gt;
	&lt;span class="c1"&gt;# if it is, we're visiting somewhere twice so we're done.&lt;/span&gt;
	&lt;span class="c1"&gt;#if ((x,y) not in locs):&lt;/span&gt;
	&lt;span class="c1"&gt;#    locs[(x,y)]=1&lt;/span&gt;
	&lt;span class="c1"&gt;#else:&lt;/span&gt;
	&lt;span class="c1"&gt;#    print((x,y))&lt;/span&gt;
	&lt;span class="c1"&gt;#    print(abs(x)+abs(y)) # the answer&lt;/span&gt;
	&lt;span class="c1"&gt;#    sys.exit(0)&lt;/span&gt;
	&lt;span class="c1"&gt;#    break&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the answer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;</description><category>cs</category><category>pedagogy</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-code-2016-1/</guid><pubDate>Tue, 06 Dec 2016 15:46:17 GMT</pubDate></item><item><title>New Term, New Tool - repl.it</title><link>http://cestlaz.github.io/posts/new-term-new-tool-replit/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
We're now a week in to my first class at Hunter. It's a little early
for me to really compare and contrast the high school to college
experience but I thought I'd share some thoughts on a tool that I've
recently started to play with.
&lt;/p&gt;

&lt;p&gt;
My students were all supposed to be issued laptops at the beginning of
the semester. The plan was to have them learn Linux, the command line,
and a little DevOps along the way. I guess I shouldn't have been too
surprised to learn that the laptops weren't going to come in until
late September.
&lt;/p&gt;

&lt;p&gt;
Scratch all that advance lesson planning. A brief scramble and I was
able to relocate the class into a computer lab but now we can't
customize the kids environments. 
&lt;/p&gt;

&lt;p&gt;
Time to look for an online solution.
&lt;/p&gt;

&lt;p&gt;
We're starting the kids off in Python, a choice that I'll talk about
in some future post and normally my online go to for Python is
&lt;a href="http://codesters.com"&gt;codesters.com&lt;/a&gt;. I'm a big fan of the codesters team and product. This
time, though, I decided to try something else. Specifically &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;. Partly because, as with
codesters, I like the people behind it. It's also pretty simple and it
supports a lot of different languages:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
APL, ES2015 ,Bloop, BrainF, C, CoffeeScript, C++, C++11, C#, Emoticon,
Forth, F#, Go, Java, JavaScript, LOLCODE, Lua, Nodejs, PHP, Python,
Python3, QBasic, Roy, Ruby, Rust, Scheme, Swift, Unlambda, and HTML, CSS, JS
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
It's still a pretty new product so there are occasional hiccups but
I'm really liking things so far. Some of the things I like include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;a simple clean interface.
&lt;/li&gt;
&lt;li&gt;sharing and embedding code:
&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="//repl.it/embed/DF3m/19.js"&gt;&lt;/script&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;project mode which allows multi file projects
&lt;/li&gt;
&lt;li&gt;examples to get you started
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
But the thing I'm really liking are the teacher features they're
working on. The teacher interface isn't fancy. I like that. Things are
simple and clean and they let me get the job done.
&lt;/p&gt;

&lt;p&gt;
I had two extra minutes in class yesterday and in that time, I was
able to:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Make a classroom
&lt;/li&gt;
&lt;li&gt;Invite all my students by email
&lt;/li&gt;
&lt;li&gt;Create 2 quick assignments.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The assignment page lets you give starter code as well as instructions
and it also lets you put in tests that are run when a student submits
their work for instant feedback.
&lt;/p&gt;

&lt;p&gt;
I really like the tests feature on projects. So far, I've only played
with Python unit tests. Repl.it uses a really easy to follow
interface and has a sample test to guide you. There's also an option
for input/output matching which includes flexible matching and regular
expressions but I haven't played with it yet.
&lt;/p&gt;

&lt;p&gt;
Overall, I'm liking this tool. When the kids get their laptops we'll
probably use it somewhat less as they start to learn to use their own
systems but I'm glad to have repl.it in my teaching arsenal.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>pedagogy</category><category>tools</category><guid>http://cestlaz.github.io/posts/new-term-new-tool-replit/</guid><pubDate>Fri, 02 Sep 2016 13:26:02 GMT</pubDate></item><item><title>Lesson plans - scripts to springboards</title><link>http://cestlaz.github.io/posts/lesson-plans/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I spent last Saturday up at the Microsoft offices in Times Square
observing a &lt;a href="https://www.tealsk12.org/"&gt;TEALS&lt;/a&gt; training session. My fried &lt;a href="https://twitter.com/nathanielgranor"&gt;Nathaniel Granor&lt;/a&gt;, Teals
Regional Manager in the east has invited me a number of times and this
time I was able to make it.
&lt;/p&gt;

&lt;p&gt;
If you don't know, TEALS is a program that takes volunteers in the
tech industry and places them in classrooms. Unlike other programs,
the TEALS volunteers work with the teachers while the kids learn some
CS. The idea is that the teacher will learn about CS from the
volunteer and the volunteer will learn something about teaching.
&lt;/p&gt;

&lt;p&gt;
It's not the same as having a strong, knowledgeable CS teacher in the
classroom but until we get there, TEALS is doing great work giving
kids something that they need and otherwise wouldn't get.
&lt;/p&gt;

&lt;p&gt;
At one point, Nathaniel started to talk to the volunteers about lesson
plans emphasizing the fact that TEALS would provide all the lesson materials and
the plans so these new to teaching tech volunteers wouldn't have to
make curricular decisions. 
&lt;/p&gt;

&lt;p&gt;
The lesson plan form was pretty traditional and pretty formulaic:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;warm up
&lt;/li&gt;
&lt;li&gt;hook
&lt;/li&gt;
&lt;li&gt;instruction 
&lt;/li&gt;
&lt;li&gt;practice
&lt;/li&gt;
&lt;li&gt;Assessment
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Very similar to what I was shown back in the day during my two day
"teaching boot camp" that kicked off my career &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/lesson-plans/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; and very
appropriate as an effective and efficient way to prepare these
volunteers for their first days. 
&lt;/p&gt;

&lt;p&gt;
This got me thinking about my lesson planning over the years.
&lt;/p&gt;

&lt;p&gt;
When I started, I was teaching math but I wasn't really a math
guy - I was CS all the way. I had to remember the math from high
school, learn the new topics, and figure out how to teach it.
&lt;/p&gt;

&lt;p&gt;
I had a very supportive department but they were busy with their own
classes and this was pre internet. Fortunately, the NYC DOE published
lesson plan books. They were basically bound volumes of xerox copies
of hand written and typed lesson plans provided by experienced
teachers.
&lt;/p&gt;

&lt;p&gt;
I spent many hours copying them, studying  them, and then later
tweaking them.
&lt;/p&gt;

&lt;p&gt;
They were a life saver back then. How was the teaching? OK. Not
great. I got the material to the kids but I was nothing special. This
is where I started to form my bias against the scripted teaching
that's being pushed down today.
&lt;/p&gt;

&lt;p&gt;
As I developed my chops, I started to design my own experiences for my
classes and things improved. By the time I was done teaching math -
maybe 4 years in, I was just scratching the surface of being a math
teacher.
&lt;/p&gt;

&lt;p&gt;
One year in, I started teaching CS along with math at Seward
Park. When I was bumped to Stuy, I went back to math for  a year and a
half and then it was all CS all the time.
&lt;/p&gt;

&lt;p&gt;
For CS, we didn't have lesson plan books so I had to craft everything
from scratch. It was a lot of work but the results were much better.
&lt;/p&gt;

&lt;p&gt;
At first, I would actually write out lesson plans a la math lesson
plans. A "do now," "instructional objectives," "applications,"
"Homework," etc. The only thing I never formally wrote out was a
"medial summary."
&lt;/p&gt;

&lt;p&gt;
Over time, my lessons got better but my lesson plans looked worse and
worse. 
&lt;/p&gt;

&lt;p&gt;
There were times a lesson plan might look something like this:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/lesson-plans/plan.jpg" alt="plan.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
OK, not exactly but as I developed at my craft, I didn't need a laid
out script to follow line for line  rather, just a set of little
reminders and maybe some printed out code. If we were going to develop
a complicated algorithm or derivation, though, I would still write out
all the steps.
&lt;/p&gt;

&lt;p&gt;
This doesn't mean that as my career progressed I planned any less. It
might appear that I'm winging it but even if little to nothing is
written down, there is a plan and there's always a lot of pre work
before class begins.
&lt;/p&gt;

&lt;p&gt;
Now, to bring this back to TEALS.
&lt;/p&gt;

&lt;p&gt;
It's interesting how what's good in one context is not so much in
another.
&lt;/p&gt;

&lt;p&gt;
What TEALS is doing is great - they've got to get a lot of
technologists in to classrooms quickly but once there, they'll be with
real, hopefully experienced teachers. What they're doing gets them
ready to go. It's a starting point, not an end.
&lt;/p&gt;

&lt;p&gt;
On the other hand, when I see scripted curriculum being sold as the
special sauce, be it in CS teacher "training," Teach for America
summer prep or in the name of charter school uniformity, I run the
other way.
&lt;/p&gt;

&lt;p&gt;
Let's prepare curricular  materials for important programs like TEALS
and for beginning teachers just starting out but let's not confuse a
scripted lesson that can be delivered by one and all to be anything
close to the work of a master educator and craftsman.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/lesson-plans/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;full disclosure: I
came in to teaching with zero education credentials and took the
minimum number of ed classes for my license after I started.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>curriculum</category><category>pedagogy</category><category>teals</category><guid>http://cestlaz.github.io/posts/lesson-plans/</guid><pubDate>Thu, 23 Jun 2016 23:31:11 GMT</pubDate></item><item><title>Robots platforms and practicalities</title><link>http://cestlaz.github.io/posts/robot-survey/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I received an email from a friend the other day asking me about a
particular robotics platform she recently saw.
&lt;/p&gt;

&lt;p&gt;
I've played with robotics on and off over the years ranging from
building them from (not using) scratch using Atmel chips and programming them in
assembly to using Arduino based platforms to using pre-built robot
platforms. They're really cool and since they interact with the real
world you can do all sorts of interesting and motivational things with students.
&lt;/p&gt;

&lt;p&gt;
I've done these on my own as a hobbyist and also with students either
individually or in small groups, but never as part of a class I had
been teaching.
&lt;/p&gt;

&lt;p&gt;
Why not?
&lt;/p&gt;

&lt;p&gt;
The biggest reason is that the classes I've taught are already so
packed full of CS goodness that we can't even get everything done
that's theoretically on the syllabi.
&lt;/p&gt;

&lt;p&gt;
The other has to do with practical concerns.
&lt;/p&gt;

&lt;p&gt;
Equipment costs - Let's say we can get our platform at $100 a pop. I
just can't see a public school with 34 kids in a class getting one per
student or one for every two.
&lt;/p&gt;

&lt;p&gt;
So, what's the robot to student ratio and how much actual access do
the kids get? If they're designing  building, do they all get to
design and build? Same question with coding and operating.
&lt;/p&gt;

&lt;p&gt;
Then there's space – if we're talking about a mobile platform as
opposed to something that sits on the desk and is near stationary, we
have a problem. The classrooms I've taught in can barely hold the
students.
&lt;/p&gt;

&lt;p&gt;
There are also issues with breakage, loss, theft and long term
maintainability - will we be able to or even want to fill in with
compatible units in a few years as needed or will we have to reboot
the program from scratch.
&lt;/p&gt;

&lt;p&gt;
All that to deal with before we even get to the fun of teaching and learning.
&lt;/p&gt;

&lt;p&gt;
I'm really curious about the experiences of those of you who do teach
using robots and similar platforms. 
&lt;/p&gt;

&lt;p&gt;
If you are such a teacher, could you please fill out this form or
leave a comment for anything that the form doesn't cover?
&lt;/p&gt;


&lt;iframe src="https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true" width="760" height="500" frameborder="0" marginheight="0" marginwidth="0"&gt;Loading...&lt;/iframe&gt;</description><category>hardware</category><category>pedagogy</category><category>robotics</category><category>robots</category><category>tools</category><guid>http://cestlaz.github.io/posts/robot-survey/</guid><pubDate>Wed, 15 Jun 2016 13:08:28 GMT</pubDate></item><item><title>Navajo Math Circles</title><link>http://cestlaz.github.io/posts/navajo-circles/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Yesterday, I saw the New York Premiere of &lt;a href="http://www.zalafilms.com/navajo/"&gt;Navajo Math Circles&lt;/a&gt;, a
documentary on a &lt;a href="http://www.mathcircles.org/"&gt;Math Circle&lt;/a&gt; put in place to support and enrich the
currently under-served community in the Navajo educational system.
&lt;/p&gt;

&lt;p&gt;
At their core, Math Circles are math outreach and enrichment
programs. I'm most familiar with the &lt;a href="https://www.nymathcircle.org/"&gt;New York Math Circle&lt;/a&gt;. I'm friends
with many of their teachers and organizers and my son took part in
their summer program for a couple of years.
&lt;/p&gt;

&lt;p&gt;
Over in the southwest, these Math Circles have been bringing together
students, frequently across great distances each day to explore
problem solving and creativity through mathematics.
&lt;/p&gt;

&lt;p&gt;
As someone who's worked hard to bring educational opportunities to the
have nots, I love the program. Some of the highlights include the kids
working on open ended problems, focusing on process and techniques
more than specific results, working both collaboratively but also
developing self sufficiency, and more. I also love the fact that
they've started teacher math circles to help to bring some of that
math circle magic to the everyday classroom.
&lt;/p&gt;

&lt;p&gt;
I enjoyed the film and recommend you check it out to see what's
possible and I want to share my two big takeaways.
&lt;/p&gt;

&lt;p&gt;
First, early on in the film, one of the people running the program
talked about developing a math enrichment program through and with
Navajo traditions and culture. This is HUGE and I feel it's something
we're losing. America is so diverse from coast to coast and here in
New York City you can see radically different ways of life living
right across the street from each other. Everyone pays lip service to
"making the work interesting and relevant to the student" but few
people walk the walk. These folk do.
&lt;/p&gt;

&lt;p&gt;
Second, I left the documentary with a sour taste in my mouth. Not
because of the program but because the Navajo Math Circle project and
projects like it are scraping together what little resources they can
to try to do what the school systems should be doing to begin with.
&lt;/p&gt;


&lt;p&gt;
As we move to scripted lessons, national standards, curricula dictated
or at least influenced by large private concerns and standardized
tests, our schools are moving further and further away from community
and local culture.
&lt;/p&gt;

&lt;p&gt;
In the documentary, one student pointed out that in math class, they
have to use the textbook. They learn the process and then have to
solve the problems. In Math Circle, there are no textbooks. 
&lt;/p&gt;

&lt;p&gt;
Afterwards, the students in from the Math Circle did some Q&amp;amp;A. I asked
them to elaborate - what's the difference between there Math Circle
experiences and their in school ones. I got:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Math Circle is fun!!!!
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I think that says it all.
&lt;/p&gt;

&lt;p&gt;
I know many great teachers who try to bring culture and community to
their classes. One of my son's best teachers, &lt;a href="http://www.heinemann.com/authors/828.aspx"&gt;Paula Rogovin&lt;/a&gt; did it all
the time. Many of my friends and colleagues try to do so as well but
the powers that be make it harder and harder. 
&lt;/p&gt;

&lt;p&gt;
Until we win back public education it's important to support programs
like Math Circles (and, if I do say so myself, programs like our own
&lt;a href="http://cstuy.org"&gt;CSTUY&lt;/a&gt;) and it's also critical that we work to try to bring community
and culture to our regular classes.
&lt;/p&gt;</description><category>curriculum</category><category>education</category><category>pedagogy</category><category>policy</category><guid>http://cestlaz.github.io/posts/navajo-circles/</guid><pubDate>Wed, 08 Jun 2016 11:03:55 GMT</pubDate></item><item><title>As curricula changes, what's falling through the cracks?</title><link>http://cestlaz.github.io/posts/semaphores/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Edit:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Just a brief note to clarify a couple of things. As indicated in the
comments, this post isn't  about what's appropriate for HS CS. It's
more about what kids have after they finish their education - be it
high school, college, code school, or other. 
&lt;/p&gt;

&lt;p&gt;
Some of my thoughts are the results of pondering on the exacerbations
of friends after interviewing people for entry level positions.
&lt;/p&gt;

&lt;p&gt;
The two examples are just to illustrate the point. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Original Post:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I enjoy reading blogs. It's one of the ways I keep current. Not only
in terms of what's going on in CS Education, but also trends in CS -
academic or professional as well as on a range of other topics.
&lt;/p&gt;

&lt;p&gt;
One of the blogs I enjoy is authored by &lt;a href="https://twitter.com/b0rk"&gt;Julia Evans&lt;/a&gt;. I don't know
Julia, but we do have some mutual friends. I've enjoyed her &lt;a href="http://jvns.ca"&gt;blog&lt;/a&gt;. She
does a nice job talking about any number of systems related
issue. I've tried to leave comments a few times but for some reason,
my comments always end up deleted or otherwise not showing up.
&lt;/p&gt;

&lt;p&gt;
One recent post, one on &lt;a href="http://jvns.ca/blog/2016/03/29/thread-pools-part-ii-i-love-blocking/"&gt;concurrency&lt;/a&gt; got me thinking. Since the comment
I left there didn't take, I thought I'd write about it here.
&lt;/p&gt;

&lt;p&gt;
It's a nice post but the thing that caught my eye was when Julia
said that she " didn't know what a semaphore was until I read this
code and I was like OH THIS IS AMAZING AND SO USEFUL AND WOW." I was a
little surprised, semaphores seem to be one of those basic concepts
that you just know but that is, of course incorrect. I first learned
about semaphores in my honors Systems class with my mentor, the late
&lt;a href="https://en.wikipedia.org/wiki/Robert_Dewar"&gt;Robert Dewar&lt;/a&gt;. We started from test and set and worked our way up. I
had two other undergraduate classes that at least mentioned the topic.
&lt;/p&gt;

&lt;p&gt;
Then again, I knew that many undergrads would never get a good
treatment of concurrency so I tried to build a bit in to the System
Level Programming  course I designed while at Stuy.
&lt;/p&gt;

&lt;p&gt;
This got me thinking - according to her linked in, Julia was a CS
major at McGill - a university that I hold in high regard but either
semaphores were never covered or their treatment didn't make enough of
an impact to be worth remembering. What topics do we cover in our
classes that kids just let fall to the wayside and what topics do we
end up losing as curricula change and we don't have an eye on the big
picture.
&lt;/p&gt;

&lt;p&gt;
One big one is memory management. When APCS and college 101 classes
went to Java, memory management went out the window. Not a problem, as
long as memory issues are covered in some other course. Unfortunately
the don't seem to be. You can make a case that kids don't need to
understand memory management or anything about garbage collection but
I'd argue that while one might never have to do their own memory
management a good CS person should have some understanding of what's
going on under the hood or as my friend Gerry says "never use a
technology you couldn't write yourself."
&lt;/p&gt;

&lt;p&gt;
Another biggie that I lived through was the IBM PC era. Prior to the
mid to late 80's when the IBM PC ruled the world, kids learned about
CS on timesharing systems. Once the PC took hold, every kid learning
programming or studying CS was working on their own machine. They had
full access to everything and the machine just supported a single
thread. 
&lt;/p&gt;

&lt;p&gt;
On the one hand, it was nice since you could easily play with low
level programming and hardware but on the other hand, a hole
generation didn't learn about the complexities of multiple users and
multiple processes. 
&lt;/p&gt;

&lt;p&gt;
Early in my career I designed courses and only later did I realize
that you can't just design a course, you have to look at the full arc
of a students education. 
&lt;/p&gt;

&lt;p&gt;
I think it's interesting to think about what concepts are getting left
on the side of the road and I wonder if the big players driving CS
education spend any time thinking about this bigger picture.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>pedagogy</category><category>policy</category><guid>http://cestlaz.github.io/posts/semaphores/</guid><pubDate>Sun, 01 May 2016 13:08:36 GMT</pubDate></item><item><title>IDE or the Cloud</title><link>http://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
This weekend, I had a conversation on Twitter with my friend &lt;a href="https://twitter.com/roybahat"&gt;Roy Bahat&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/zamansky"&gt;@zamansky&lt;/a&gt; Mike, unrelated, what do you think of &lt;a href="https://t.co/BT1ublbajF"&gt;https://t.co/BT1ublbajF&lt;/a&gt; ?&lt;/p&gt;— Roy Bahat (@roybahat) &lt;a href="https://twitter.com/roybahat/status/718835740738650112"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/roybahat"&gt;@roybahat&lt;/a&gt;Maybe I'll blog about my thoughts about online environments vs local installs&lt;/p&gt;— Mike Zamansky (@zamansky) 
&lt;a href="https://twitter.com/zamansky/status/718837282334240768"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/roybahat"&gt;@roybahat&lt;/a&gt; Agree with this but there are many issues. I'll try to write more later. Now going to see my son in &lt;a href="https://twitter.com/umgass"&gt;@umgass&lt;/a&gt; prod of Pinafore.&lt;/p&gt;— Mike Zamansky (@zamansky) &lt;a href="https://twitter.com/zamansky/status/718838508689993728"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
Another friend had just asked me about IDEs vs local installs for learning enviromnents the day before.
&lt;/p&gt;

&lt;p&gt;
So, should we use cloud based IDEs when teaching CS or should we use
local installs.
&lt;/p&gt;

&lt;p&gt;
There isn't a single right answer but I thought I'd share some of my thoughts here.
&lt;/p&gt;

&lt;p&gt;
I'm hoping this is helpful to both those of us in the trenches as well
as maybe some platform developers out there.
&lt;/p&gt;

&lt;p&gt;
Some times, you don't have a choice.
&lt;/p&gt;

&lt;p&gt;
On the web based side, does your school have the bandwidth. We're not
only talking about the pipe to the outside world but also &lt;a href="http://www.nytimes.com/2016/01/14/nyregion/bronx-science-bans-cellphones-from-wi-fi-as-students-devour-it.html?_r=0"&gt;wifi within
the school&lt;/a&gt;.  If kids can't reliably get to the web based environment,
it's not a viable option. On the other hand, cloud based software will
always be up to date and properly configured and kids can use them
from home or pretty much anywhere they have a connection.
&lt;/p&gt;

&lt;p&gt;
On the other side we have local installs. This can also present
problems. Is the teacher allowed to install locally? Does he or she
know how to do it? Who's going keep all the machines up to date and configured? 
&lt;/p&gt;

&lt;p&gt;
Assuming we can get past the technical issues we can start looking at
the education side of thing.
&lt;/p&gt;

&lt;p&gt;
On the web based side, you've got a silo. This can be both good and
bad. In an intro class, using a tool like &lt;a href="http://codesters.com"&gt;Codesters&lt;/a&gt; can keep the cost
of entry low, allow students to share work online and allow teachers
to make use of their curricular materials. If you can't tell, I'm a
big fan of Codesters and the Codesters team. The limitation is that
you have to use their simplified interface and toolset.
&lt;/p&gt;

&lt;p&gt;
Some web based IDEs like &lt;a href="http://koding.com"&gt;Koding&lt;/a&gt; offer more flexibility - one tool with
many languages as well as deployment. The cost is complexity. With
Koding, you're basically running a virtual machine in the
cloud. You've got their web based IDE and a terminal shell so it's not
as complex as doign everything from scratch locally but it's not as
structured as Codesters and is more of a general purpose site rather
than one focussed soley on learning.
&lt;/p&gt;

&lt;p&gt;
Then you have &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;. This looks to be a great platform for
experienced programmers to play with and explore new languages but I'd
be concerned about using it with beginners. It looks like they're
rolling out some teacher tools so this might be worth revisiting soon.
&lt;/p&gt;

&lt;p&gt;
In any case and with other web based products, you're living in the
providers silo. 
&lt;/p&gt;

&lt;p&gt;
Personally, I'm a command line wonk and confessed Emacs geek so I'm
generally wary of an online environment without an exit strategy to
real world tools. Eventually, if all development moves into the
browser as platform then this problem goes away, but for now, you're
not going to have the expressive power and flexibility that a local
install gives.
&lt;/p&gt;

&lt;p&gt;
Local installs let you use more powerful and flexible tools either
alone or in combination.
&lt;/p&gt;

&lt;p&gt;
Keeping kids out of silos also makes it easier for them to learn new
tools, languages, and techniques.
&lt;/p&gt;

&lt;p&gt;
Since I like generic tools, I'm not a fan of big professional IDEs
like Eclipse. I'm an Emacs geek but Atom, Sublime Text, and Vim are
all good as well.
&lt;/p&gt;

&lt;p&gt;
There are also an assortment of beginner IDEs like Dr. Racket and I'm
a fan with these for beginners as long as there's an exit strategy.
&lt;/p&gt;

&lt;p&gt;
For completeness, I should mention that if I weren't an old school
Emacs guy, I might check out something like JetBrain's IDEs. They're
much lighter weight than something like Eclipse but still full
featured. Somewhere between a true general purpose, customizable,
programmable editor and an all encompassing IDE.
&lt;/p&gt;


&lt;p&gt;
In general, I use online enviromnents with my classes early on when:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;They're pretty much identical or equivalent to the installed version.&lt;/li&gt;
&lt;li&gt;They provide some value added (&lt;a href="http://codingbat.com"&gt;codingbat&lt;/a&gt; for example) so they're not
being used as a development environment but for some other purpose.&lt;/li&gt;
&lt;li&gt;They help with student collaboration (such as cloud9 or Koding.com
for more advanced kids).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In any case, it's imporant that our kids aren't locked into any IDE be
it web based or local.
&lt;/p&gt;

&lt;p&gt;
Our kids that go on to more advanced CS studies will certainly need to
break out of sheltered world of a learning IDE and we're not doing
them a service if we shelter them too long. 
&lt;/p&gt;

&lt;p&gt;
Our other kids also benefit from seeing beyond these restrictive
environments. A student might learn to code in Python in one of our
classes, but if we do our jobs right, that student might be writing a
little Javascript to automate Google Docs.
&lt;/p&gt;

&lt;p&gt;
I can't tell you how many people I've seen go through online coding
courses in a web based enviromnent only to be unable to do anything
outside of that enviromnent.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, we want our kids to be empowered to grow on
their own. All of the things I've talked about here are merely
tools. Each has it's place. It's up to the teacher to make the roadmap
and to lead the student down the path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>pedagogy</category><category>tools</category><guid>http://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</guid><pubDate>Tue, 12 Apr 2016 04:00:00 GMT</pubDate></item><item><title>DevOps, or You don't know what the F you're doing!</title><link>http://cestlaz.github.io/posts/2016-01-31-devops.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Having just concluded almost a quarter century at one job in one
place, I've been reflecting on a number of things.
&lt;/p&gt;

&lt;p&gt;
What I accomplished, what I've failed to accomplish, highlights,
low lights and everything in between.
&lt;/p&gt;

&lt;p&gt;
I've also learned a lot over these twenty five years.
&lt;/p&gt;

&lt;p&gt;
One thing I learned is DevOps and System Administration. 
&lt;/p&gt;

&lt;p&gt;
Back around 1993 or 1994 Stuy wasn't really on the internet. Yes, we
were able to scam stuy.edu even though we were a high school and yes
we did have a class B address block but no one really had access.
&lt;/p&gt;

&lt;p&gt;
Somehow, Bruce, a student of mine at the time and I ended up with the
job of getting Stuy onto the internet. Bruce was one of our superstar
kids and people thought I had extensive experience setting up and
running networks. Truth be told I messed around a bit but there's no
way I would have hired myself for the job.
&lt;/p&gt;

&lt;p&gt;
Nonetheless, we were off. 
&lt;/p&gt;

&lt;p&gt;
We were able to take one of the RS/6000 AIX workstations that were
supposed to be used as CAD stations and repurposed it as a server. We
made email accounts for everyone and were off.
&lt;/p&gt;

&lt;p&gt;
Neither Bruce nor I really knew what we were doing but we figured
things out. I learned a lot from him and I'd like to think he also got
some benefit out of working with me. Fortunately, we seemed to have a
knack for &lt;a href="http://www.amazon.com/Linux-System-Administration-Handbook-Edition/dp/0131480057/ref=pd_sim_14_2?ie=UTF8&amp;amp;dpID=61%2B57ajucML&amp;amp;dpSrc=sims&amp;amp;preST=_AC_UL160_SR117%2C160_&amp;amp;refRID=164V89GZMZM2X9M2S8AH"&gt;finding the answers&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
Of course, we had our moments. Once, we got a critical patch
announcement from IBM. It said that if we needed the patch and didn't
apply it were were in big trouble but if our machine didn't need it,
applying the patch would kill our system. It was unclear whether we
needed the patch or not.
&lt;/p&gt;

&lt;p&gt;
After about a half hour research, we determined that we didn't need
the patch.
&lt;/p&gt;

&lt;p&gt;
But applied it anyway :-(.
&lt;/p&gt;

&lt;p&gt;
D'Oh.
&lt;/p&gt;

&lt;p&gt;
After a brief set of panic attacks and a bunch of fumbling around, we
did manage to restore things.
&lt;/p&gt;

&lt;p&gt;
So, Bruce and I ran the system for a year or so and as I said, I
learned a lot. Now, Bruce was close to graduating so I was starting to
worry that I'd have to figure this all out myself soon. That was a
seriously frightening thought. 
&lt;/p&gt;

&lt;p&gt;
I figured it would be good to bring in a couple of new super smart
students. As it turns out, Jon was one of them. 
&lt;/p&gt;

&lt;p&gt;
At one point, there was some problem and Bruce and I were going to
head to the office to try to figure it out. Jon asked if he could come
and watch. I thought that was a great idea so I agreed.
&lt;/p&gt;

&lt;p&gt;
We all went to the office and Bruce and I went to work. After about
fifteen minutes, Jon blurted out:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
"I just figured how you guys do it!!!"
&lt;/p&gt;

&lt;p&gt;
"You guys have no idea what the F you're doing!!!!!"
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
We all cracked up.
&lt;/p&gt;

&lt;p&gt;
He was absolutely right. We had no clue. We didn't know what we were
doing but we had become pretty good at figuring things out.
&lt;/p&gt;

&lt;p&gt;
Truth be told, that really is the norm. If you already knew how to
solve the problem, well, then it really wouldn't have been a problem
to begin with.
&lt;/p&gt;

&lt;p&gt;
So, you learn to figure it out. It's something I learned not to be
afraid of a long time ago. I hope that it's something I've been able
to convey to my students.
&lt;/p&gt;</description><category>pedagogy</category><guid>http://cestlaz.github.io/posts/2016-01-31-devops.html/</guid><pubDate>Sun, 31 Jan 2016 05:00:00 GMT</pubDate></item><item><title>Debugging deployment</title><link>http://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
SoftDev students are hard at work on their final projects. By now,
they all have fairly complex code bases. This limits how much I can
help them with debugging.
&lt;/p&gt;

&lt;p&gt;
There are some problems, though, that they have to contend with that
even with experience, are hard to spot. Notably because the very
tools you use to debug these errors are part of the problem.
&lt;/p&gt;

&lt;p&gt;
Last week, this happened twice. Both cases were brought to me by
really strong students which just goes to underscore how insidious
these problems can be.
&lt;/p&gt;


&lt;p&gt;
Here's a fake code snippet of a &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; application that illustrates
both problems.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;from flask import Flask, render_template
&lt;span class="linenr"&gt; 2: &lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;app = Flask(__name__)
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;@app.route("/")
&lt;span class="linenr"&gt; 6: &lt;/span&gt;def index():
&lt;span class="linenr"&gt; 7: &lt;/span&gt;    return "hello"
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;@app.route('/test/&amp;lt;some_data&amp;gt;')
&lt;span class="linenr"&gt;10: &lt;/span&gt;def test():
&lt;span class="linenr"&gt;11: &lt;/span&gt;    picture_url = build_url(some_data)
&lt;span class="linenr"&gt;12: &lt;/span&gt;    result = api_test(picture_url)
&lt;span class="linenr"&gt;13: &lt;/span&gt;    do_something(result)
&lt;span class="linenr"&gt;14: &lt;/span&gt;
&lt;span class="linenr"&gt;15: &lt;/span&gt;if __name__ == "__main__":
&lt;span class="linenr"&gt;16: &lt;/span&gt;   app.debug = True
&lt;span class="linenr"&gt;17: &lt;/span&gt;   app.secret_key = "some secret key"
&lt;span class="linenr"&gt;18: &lt;/span&gt;   app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
First, the "easy" one. The student was trying to deploy the
application. We use &lt;a href="http://gunicorn.org/"&gt;Green Unicorn&lt;/a&gt; to deploy our applications,
ultimately on &lt;a href="http://digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; servers in the cloud. 
&lt;/p&gt;

&lt;p&gt;
The student was using the correct command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-shell"&gt;gunicorn -W 4 -b 0.0.0.0:8000 app:app
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
but it wasn't working. It ran, but whenever he went to the site, it
came back with an error.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
He had to change:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;if __name__ == "__main__":
   app.debug = True
   app.secret_key = "some secret key"
   app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;app.secret_key = "some secret key"
if __name__ == "__main__":
    app.debug = True
    app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Normally, when developing and testing our applications, we use the
test server that's bundled with Flask. The line that reads
"app.run…" takes care of this.
&lt;/p&gt;

&lt;p&gt;
When running the application as a "main program" - "python app.py" the
if statement is true and it runs the indented lines, setting the
secret key which is required for session management.
&lt;/p&gt;

&lt;p&gt;
When running under &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt;, the &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt; server loads the
application as a module and then runs it. In this case name isn't main
so it never sets secret key and so we have a problem.
&lt;/p&gt;

&lt;p&gt;
Pretty subtle and even though we did cover this in class, it comes up
pretty rarely so it's not an easy catch.
&lt;/p&gt;

&lt;p&gt;
Then there was this problem.
&lt;/p&gt;

&lt;p&gt;
The setup for this one's a little more complicated. The group was
using a facial recognition api. You provide the API with the url to an
image, it fetches it and does recognition.
&lt;/p&gt;

&lt;p&gt;
It's also important to note that when Flask is running, it will serve
files from a static directory, so, if I'm running my flask server on
myhost, port 800 and you stored an image named picture.jpg in the
static directory, going to:
&lt;/p&gt;

&lt;verbatim&gt;
 http://myhost:8000/static/picture.jpg
&lt;/verbatim&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
would get that image.
&lt;/p&gt;

&lt;p&gt;
The group did things right. They ran the Flask test server to serve
the static files and then wrote a small python program to test the
api:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;picture_url = build_url(some_data)
result = api_test(picture_url)
do_something(result)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Everything worked fine. 
&lt;/p&gt;

&lt;p&gt;
But, when they put this code in as a route in their web app (as in the
top code fragment), it froze. 
&lt;/p&gt;

&lt;p&gt;
They couldn't figure it out.
&lt;/p&gt;

&lt;p&gt;
The code worked as a "stand alone" but not in the web app.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
Once again, the built in Flask development server.
&lt;/p&gt;

&lt;p&gt;
The development server runs in a single thread / process. This means
it can only do one thing at a time. When they ran their test as a
separate program, the api they used made a request to their app to
serve up the static picture file and it worked.
&lt;/p&gt;

&lt;p&gt;
When they ran from the Flask application itself, their app made a call
to the web api (line 12) and then blocked while waiting for the
response. The web api tried to request the image from the Flask app
but it was blocked – &lt;b&gt;&lt;b&gt;deadlock&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Again, the solution was to run the web app using a server that could
handle multiple requests - gunicorn.
&lt;/p&gt;

&lt;p&gt;
Once again, that solved the problem.
&lt;/p&gt;

&lt;p&gt;
Both of these problems were fairly subtle and very hard to catch -
even with experience. I remember the hours I lost when I was learning
this stuff.
&lt;/p&gt;

&lt;p&gt;
Some times kids get caught up in algorithms or poor code design but
sometimes, it's just the tools.
&lt;/p&gt;</description><category>pedagogy</category><category>tools</category><guid>http://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</guid><pubDate>Sat, 23 Jan 2016 05:00:00 GMT</pubDate></item></channel></rss>