<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about emacs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 31 Jan 2018 15:31:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs 40 - Atomic Chrome</title><link>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgb1d6e6f" class="outline-2"&gt;
&lt;h2 id="orgb1d6e6f"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb1d6e6f"&gt;
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I'll try to get to them in the coming months.
&lt;/p&gt;

&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6743aaa" class="outline-2"&gt;
&lt;h2 id="org6743aaa"&gt;UPATE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6743aaa"&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;

&lt;p&gt;
All you have to do is:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Go to &lt;b&gt;&lt;b&gt;chrome://extensions&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;On the bottom of the page you'll see a button to set &lt;b&gt;&lt;b&gt;keyboard shortcuts&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Set the shortcut for Atomic Chrome&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wyPZws66Sic" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid><pubDate>Wed, 31 Jan 2018 11:00:00 GMT</pubDate></item><item><title>Using Emacs 2017 Recap</title><link>http://cestlaz.github.io/posts/using-emacs-2017-recap/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org0b0d500" class="outline-2"&gt;
&lt;h2 id="org0b0d500"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0b0d500"&gt;
&lt;p&gt;
This past year I recorded 14 Using Emacs videos. This is on top of the
25 videos I made last year. The fall off in production is
understandable. I got through my day to day configuration in the
late 20s and since then the videos have just been on things I've
rediscovered, things that became useful and things that I just found
interesting. It was also a busier year.
&lt;/p&gt;

&lt;p&gt;
Why did I start the series? Mostly for my students. There's the built
in Emacs tutorial and other beginner resources but how do you go from
the basics to a real working configuration? For years I would show my
kids Emacs and use it in class but there was never a path for them to
follow from beginner to craftsman. I hoped the videos would fill the
void.
&lt;/p&gt;

&lt;p&gt;
It probably didn't. I don't think I'm getting greater Emacs adoption
from my students but on the other hand, I've found making the series
rewarding for other reasons.
&lt;/p&gt;

&lt;p&gt;
First and foremost, it's allowed me to be an active contributing
member of the Emacs community. I haven't written any Emacs packages
nor am I an active guy on any Emacs forums but this is a way I can do
my part. 
&lt;/p&gt;

&lt;p&gt;
Second, although there hasn't been a great deal of comments on the
videos or blog posts I've gotten to know a few people that I wouldn't
have gotten to know otherwise.
&lt;/p&gt;

&lt;p&gt;
It also shows that that if you put things out there people might find
it useful. I don't know how many people saw my Emacs posts at the
start but a year and half later I've got 1,700 YouTube
subscribers. Sure, that's nothing compared to many YouTubers but 
for a guy making schlocky videos at his desk about an as much as I hate to admit it
non-maintream editor, I think it's pretty cool.
&lt;/p&gt;

&lt;p&gt;
The question is what to make videos on moving forward? 
&lt;/p&gt;

&lt;p&gt;
I thought I'd throw it out to the community. Here's an embedded
poll. Feel free to suggest other topics either on the blog or
as a Twitter reply.
&lt;/p&gt;

&lt;p&gt;
I can't promise I'll get to all or any but I'll certainly check out
the popular suggestions.
&lt;/p&gt;

&lt;script type="text/javascript" src="http://www.easypolls.net/ext/scripts/emPoll.js?p=5a46abd4e4b04ebe73ddc4de"&gt;&lt;/script&gt;&lt;a class="OPP-powered-by" href="http://www.objectplanet.com/opinio/" style="text-decoration:none;"&gt;&lt;div style="font: 9px arial; color: gray;"&gt;survey service&lt;/div&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>http://cestlaz.github.io/posts/using-emacs-2017-recap/</guid><pubDate>Fri, 29 Dec 2017 18:17:53 GMT</pubDate></item><item><title>Using Emacs 39 - mu4e</title><link>http://cestlaz.github.io/posts/using-emacs-39-mu4e/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I've been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account. 
&lt;/p&gt;

&lt;p&gt;
I've had lots of requests for a video on what I do but I've been
hesitant for two reasons:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;There are parts of my configuration that are copied from others and
I really don't understand.
&lt;/li&gt;
&lt;li&gt;I wasn't happy with the complexity and some of the tooling.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
While there are still parts of my configuration that I'm not 100%
clear on I've cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync. 
&lt;/p&gt;

&lt;p&gt;
Here's a writeup on configuring things with video at the end.
&lt;/p&gt;

&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Get the email from the server to the local machine using IMAP.
&lt;/li&gt;
&lt;li&gt;Setting up mu.
&lt;/li&gt;
&lt;li&gt;Access the email locally from Emacs.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Part 1 Getting the email to your local machine using mbsync&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href="https://twitter.com/robstewartUK"&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html"&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href="https://sourceforge.net/p/isync/isync/ci/master/tree/"&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./autogen.sh
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I followed Rob's instructions basically verbatim for the password and
authentication stuff so I suggest you do the same. 
&lt;/p&gt;

&lt;p&gt;
You'll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Part 2 - setting up mu.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html"&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.
&lt;/p&gt;


&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mu index
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href="http://www.djcbsoftware.nl/code/mu/cheatsheet.html"&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Setting up mu4e in emacs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob's
configuration in his post or my &lt;a href="https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el"&gt;sample&lt;/a&gt; config. You'll have to take a
few minutes to go through either and make the appropriate changes but 
the required changes should be cleared.
&lt;/p&gt;

&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.
&lt;/p&gt;

&lt;p&gt;
I'm very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.
&lt;/p&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;


&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/newRHXKm4H4"&gt;https://www.youtube.com/embed/newRHXKm4H4&lt;/a&gt;" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid><pubDate>Sun, 24 Dec 2017 13:00:00 GMT</pubDate></item><item><title>Using Emacs 38 - dired</title><link>http://cestlaz.github.io/posts/using-emacs-38-dired/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The 38th installment of Using Emacs is about &lt;b&gt;&lt;b&gt;dired&lt;/b&gt;&lt;/b&gt;, Emacs' built
in mode for navigating and working with directories.
&lt;/p&gt;

&lt;p&gt;
I'm not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I'd love to hear some configuration and
use suggestions from people who use it regularly.
&lt;/p&gt;

&lt;p&gt;
Here's the configuration I use:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dired+&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'dired+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which merely adds dired+ into the mix.
&lt;/p&gt;

&lt;p&gt;
I also started playing with &lt;a href="https://github.com/joddie/pcre2el"&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;pcre2el&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pcre-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href="http://irreal.org/blog/?p=6760"&gt;link&lt;/a&gt;, &lt;a href="https://oremacs.com/2017/11/18/dired-occur/"&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href="https://github.com/mhayashi1120/Emacs-wgrep"&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; which looks to be
useful.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;wgrep&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;counsel-fzf-cmd&lt;/span&gt; &lt;span class="s"&gt;"/home/zamansky/.fzf/bin/fzf -f %s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To help get started here are links to a couple of cheat sheets:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf"&gt;dired reference card&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf"&gt;another dired cheat sheet&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll probably use dired more frequently but again, would love to hear
how other people are using it.
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/Fg7HmmRYWy8"&gt;https://www.youtube.com/embed/Fg7HmmRYWy8&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-38-dired/</guid><pubDate>Fri, 24 Nov 2017 13:00:00 GMT</pubDate></item><item><title>Using Emacs 37 - Treemacs file browser</title><link>http://cestlaz.github.io/posts/using-emacs-37-treemacs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I've been meaning to get back to making Emacs videos but I've been
having trouble figuring out what to record.
&lt;/p&gt;

&lt;p&gt;
People have asked for &lt;a href="https://github.com/magit/magit"&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I'd also like to
get more comfortable with DIRED mode and then do a video on it but I'm
not there yet. I've also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;

&lt;p&gt;
This morning I saw an post on the &lt;a href="https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/"&gt;Emacs subreddit&lt;/a&gt; about &lt;a href="https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs"&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It's pretty
slick. I particularly like the integration with &lt;a href="https://github.com/bbatsov/projectile"&gt;projectile&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I suspect I won't integrate a file browser side bar into my workflow -
I've probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/ACg6RnVdw8k"&gt;https://www.youtube.com/embed/ACg6RnVdw8k&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid><pubDate>Sun, 24 Sep 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs 36 - A Touch of Elisp</title><link>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I've been working on a vue.js project this summer. During the school
year I really can't dive into code so it's been fun.
&lt;/p&gt;

&lt;p&gt;
I've already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn't easily do was arrange windows the way I
wanted.
&lt;/p&gt;

&lt;p&gt;
I've been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp.png" alt="touch-elisp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp2.png" alt="touch-elisp2.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;

&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/swap-windowsn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ace-swap-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aw-flip-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;z-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'z/swap-windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The video goes into more details but it shows that if you're not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;


&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/NQhud2ZNd1w"&gt;https://www.youtube.com/embed/NQhud2ZNd1w&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid><pubDate>Sun, 30 Jul 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs 35 - Blogging</title><link>http://cestlaz.github.io/posts/using-emacs-35-blogging/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Very little new Emacs in today's episode of Using Emacs. The video
shows my old blogging workflow and what I'm playing with now.
&lt;/p&gt;

&lt;p&gt;
The only new Emacs covered is the &lt;a href="https://github.com/rejeep/prodigy.el"&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href="https://getnikola.com/blog/index.html"&gt;Nikola&lt;/a&gt;'s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;

&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href="https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/"&gt;here&lt;/a&gt; and
&lt;a href="https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/"&gt;here&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
There's not much more to say here so enjoy the video:
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/wSeTic9obKw"&gt;https://www.youtube.com/embed/wSeTic9obKw&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-35-blogging/</guid><pubDate>Tue, 27 Jun 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs - 34 - ibuffer and emmet</title><link>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;

&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you'll start
to accumulate buffers. Last time, I talked about using &lt;a href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump"&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;

&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;b&gt;&lt;b&gt;list-buffers&lt;/b&gt;&lt;/b&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the list-buffers buffer brings up
more details. 
&lt;/p&gt;

&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the buffer
brings up help). 
&lt;/p&gt;

&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href="http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html"&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration (mostly stolen from Owen):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-saved-filter-groups&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dired"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dired-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^.*org$"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;js2-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eshell-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;shell-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mu4e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\*mu4e\*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"programming"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;python-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;c++-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emacs"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*scratch\\*$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*Messages\\*$"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-mode-hook&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-auto-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-switch-to-saved-filter-groups&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; don't show these&lt;/span&gt;
					&lt;span class="c1"&gt;;(add-to-list 'ibuffer-never-show-predicates "zowie")&lt;/span&gt;
&lt;span class="c1"&gt;;; Don't show filter groups if there are no buffers in that group&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-show-empty-filter-groups&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Don't ask for confirmation to delete marked buffers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-expert&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The video also shows &lt;a href="https://github.com/smihica/emmet-mode"&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href="https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s"&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It's a real winner.
&lt;/p&gt;


&lt;p&gt;
Here's the config I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;emmet-mode&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'sgml-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'web-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'css-mode-hook&lt;/span&gt;  &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; enable Emmet's css abbreviation.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check them both out:
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/yUfA-7wWNKA"&gt;https://www.youtube.com/embed/yUfA-7wWNKA&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid><pubDate>Thu, 15 Jun 2017 19:00:26 GMT</pubDate></item><item><title>Using Emacs - 33 - projectile, dumb-jump</title><link>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href="https://github.com/ericdanan/counsel-projectile"&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; projectile&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;projectile-global-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;projectile-completion-system&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel-projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;counsel-projectile-on&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it's a
git or other source control repo, if it's created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;b&gt;&lt;b&gt;.projectile&lt;/b&gt;&lt;/b&gt; in
the root directory of the project.
&lt;/p&gt;

&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;

&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;b&gt;&lt;b&gt;which-key&lt;/b&gt;&lt;/b&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;

&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href="http://projectile.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The other package I show is &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;. It's basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;

&lt;p&gt;
Here's my current config:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"M-g o"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g x"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external-other-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-selector&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="c1"&gt;;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dumb-jump-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;




&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/wBfZzaff77g"&gt;https://www.youtube.com/embed/wBfZzaff77g&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid><pubDate>Fri, 28 Apr 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 32 - C++</title><link>http://cestlaz.github.io/posts/using-emacs-32-cpp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;

&lt;p&gt;
The big difference is instead of building on my &lt;a href="https://github.com/zamansky/using-emacs"&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It's all
pulled from the main config with one additional package.
&lt;/p&gt;

&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; in a
directory off of your home directory named &lt;b&gt;&lt;b&gt;.emacs.d&lt;/b&gt;&lt;/b&gt; and run emacs,
it will install everything and you'll be good to go.
&lt;/p&gt;

&lt;p&gt;
If you've been following this series, the only new package is &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Package&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;which-key&lt;/td&gt;
&lt;td class="left"&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;auto-complete&lt;/td&gt;
&lt;td class="left"&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;flycheck&lt;/td&gt;
&lt;td class="left"&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;yasnippet&lt;/td&gt;
&lt;td class="left"&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;ggtags&lt;/td&gt;
&lt;td class="left"&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;color-theme&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;moe-theme&lt;/td&gt;
&lt;td class="left"&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The video also show me using &lt;b&gt;&lt;b&gt;counsel-ag&lt;/b&gt;&lt;/b&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href="http://cestlaz.github.io/posts/using-emacs-6-swiper"&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;b&gt;&lt;b&gt;smartparens&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;hungry-delete&lt;/b&gt;&lt;/b&gt; and
probably a few more.
&lt;/p&gt;

&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;

&lt;p&gt;
If you're an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven't done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;

&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;


&lt;p&gt;
Here's the configuration code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; set up package sources&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; small interface tweaks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; bring up help for key bindings&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; Auto completion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; on the fly syntax checking&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; snippets and snippet expansion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;;; Theme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;color-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;moe-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;moe-light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/7SQmleA4EMo"&gt;https://www.youtube.com/embed/7SQmleA4EMo&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-32-cpp/</guid><pubDate>Sat, 04 Mar 2017 13:00:26 GMT</pubDate></item></channel></rss>