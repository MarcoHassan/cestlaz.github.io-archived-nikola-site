<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about emacs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 22 Apr 2018 21:38:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs 48 Silversearcher</title><link>http://cestlaz.github.io/posts/using-emacs-48-silversearcher/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org67b566e" class="outline-2"&gt;
&lt;h2 id="org67b566e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67b566e"&gt;
&lt;p&gt;
A couple of days ago I wrote about on my &lt;a href="http://cestlaz.github.io/posts/unit-tests-grading-workflow"&gt;lab grading workflow&lt;/a&gt;. In the
post I mentioned that I used Emacs to easily navigate between student
folders and files so I can actually look at their work in addition to
their programs output and test results.
&lt;/p&gt;

&lt;p&gt;
The key is a combination of &lt;code&gt;dired&lt;/code&gt; and &lt;a href="https://github.com/Wilfred/ag.el"&gt;ag&lt;/a&gt;, Emacs's interface to &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;the
Silver Searcher&lt;/a&gt; which is something like a recursive code grep on
steroids. I also briefly try to show &lt;a href="https://github.com/mhayashi1120/Emacs-wgrep"&gt;wgrep&lt;/a&gt; in the video which allows
you to edit Emacs grep buffers, effectively allowing you to make
changes across a set of files all at once. It ended up not working
with silversearcher - if anyone out there knows why, please chime in.
&lt;/p&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-sFTkCQ774o" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>editing</category><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-48-silversearcher/</guid><pubDate>Sun, 22 Apr 2018 21:28:41 GMT</pubDate></item><item><title>Unit Tests Grading Workflow</title><link>http://cestlaz.github.io/posts/unit-tests-grading-workflow/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgab2bca9" class="outline-2"&gt;
&lt;h2 id="orgab2bca9"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgab2bca9"&gt;
&lt;p&gt;
I've talked before about unit testing (&lt;a href="http://cestlaz.github.io/posts/testing-testing"&gt;here&lt;/a&gt;, and &lt;a href="http://cestlaz.github.io/posts/testing-part2"&gt;here&lt;/a&gt;). My premise is
that in addition to being an important industry technique, it's a
sound practice for students studying CS. I also contend that it can
make grading easier on the teacher. Maybe not as easy as an
auto-grader but those have &lt;a href="https://cestlaz.github.io/posts/2015-10-16-graders.html/#.WtplHHXwZhE"&gt;their own problems&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Since I spent most of today grading I thought I'd share my current
workflow and how unit tests have made me more efficient.
&lt;/p&gt;

&lt;p&gt;
I have each student make a single GitHub repo for all individual
homeworks, labs and small projects. They'll make additional repos for
larger and group projects. They fill out a Google form to give me the
repo link. I download the form and end up with a CSV file something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Doe, John, git@github.com:johndoe/mymoework.git
Doe, Jane, git@github.com:janedoe/labs.git
etc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
My goal is to clone each students repo into a directory and then
throughout the term, they add assignments to their own repos using the
names and specifications I give them. For example, after assigning
three assignments, I could pull everything from their repos and I
would have a directory structure something like this:
&lt;/p&gt;


&lt;pre class="example"&gt;
hw
├── doe_jane
│   ├── hw_01
│   ├── hw_02
│   └── hw_03
│ 
└── doe_john
    ├── hw_01
    └── hw_02
&lt;/pre&gt;

&lt;p&gt;
To get there, I have to change the csv file to a small shell script:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:johndoe/mymoework.git doe_john
git clone git@github.com:janedoe/labs.git doe_jane
etc.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I usually do this in Emacs with a macro.
&lt;/p&gt;

&lt;p&gt;
Now I'm ready to go.
&lt;/p&gt;

&lt;p&gt;
Whenever there's a new assignment, I just have to update all the
repos. I go into the root hw directory and loop through all the
subdirectoryes:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cs /path/to/hw_root
for i in `ls`
do 
  cd /path/to/hw_root/$i
  git pull
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
At this point I could go into each repo but we can do better. Since I
have all of my students submit a Makefile with a default target to
build an executable named &lt;code&gt;main&lt;/code&gt; and also a target named &lt;code&gt;tests&lt;/code&gt; which
will build an executable to run the unit tests named &lt;code&gt;tests&lt;/code&gt; I do this
instead of a straight pull:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cs /path/to/hw_root
for i in `ls`
do 
  cd /path/to/hw_root/$i
  git pull
  cd hw_03 # or whatever assignment I'm grading
  make tests
  make 
done
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now, if I want, I can go into each directory, run the tests by typing
&lt;code&gt;./tests&lt;/code&gt;  and the hw or project with &lt;code&gt;./main&lt;/code&gt;. I can also add a
couple of lines to the for loop above like:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "$i Test Report\n----------------\n" &amp;gt;&amp;gt; /path/to/hw_root/test_report
./tests &amp;gt;&amp;gt; /path/to/hw_root/test_rport
echo "----------------------\n\n"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This gives me a single file with everyone's test results. Either by
doing this or by running the tests in each folder manually I can
quickly see what works and what doesn't.
&lt;/p&gt;

&lt;p&gt;
While I'm doing this, I have Emacs up and with &lt;b&gt;dired mode&lt;/b&gt; and more
specifically &lt;b&gt;ag-dired-regexp&lt;/b&gt; which lets me easily
navigate to any student's files. Combined with the test results I can
quickly evaluate the entire assignment.
&lt;/p&gt;

&lt;p&gt;
Put all of this together and it makes grading somewhat bearable. I can
work through well written, correct assignments extremely quickly and
drill down into the other projects efficiently as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>grading</category><category>testing</category><category>workflow</category><guid>http://cestlaz.github.io/posts/unit-tests-grading-workflow/</guid><pubDate>Fri, 20 Apr 2018 21:49:28 GMT</pubDate></item><item><title>Using Emacs Episode 47 - Magit</title><link>http://cestlaz.github.io/posts/using-emacs-47-magit/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org86de79d" class="outline-2"&gt;
&lt;h2 id="org86de79d"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org86de79d"&gt;
&lt;p&gt;
I've been holding off on doing a &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt; video for a while. Mostly
because I wasn't using it exclusively and also because there are
already a number of good Magit videos and resources out there.
&lt;/p&gt;

&lt;p&gt;
What changed? Along with the new version of Magin, Jonas Bernoulli
wrote up &lt;a href="https://emacsair.me/2017/09/01/magit-walk-through/"&gt;a walkthrough of the Magit interface&lt;/a&gt;. For whatever reason,
it all finally clicked. 
&lt;/p&gt;

&lt;p&gt;
In spite of what the documentation says, Magit &lt;b&gt;is not&lt;/b&gt; an interface
for git. Magit is a &lt;b&gt;command and control&lt;/b&gt; center for git. You can
launch it just to execute some git commands but you can also leave it
up and running in an Emacs window or frame as a constant project
overview.
&lt;/p&gt;

&lt;p&gt;
Wow. Mind blown!!!
&lt;/p&gt;

&lt;p&gt;
If you use Emacs for Deveopment, you &lt;b&gt;have to&lt;/b&gt; use Magit. If you don't
use Emacs, you can load it on the side for Magit. If you're not a
developer, learn to code so you can use Magit!!!!!
&lt;/p&gt;

&lt;p&gt;
I tried to do justice to the package in the video. Magit along with &lt;a href="https://orgmode.org/"&gt;Org
Mode&lt;/a&gt; are arguably Emacs killer apps - enough in and of themselves to
justify using Emacs.
&lt;/p&gt;

&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1IYsiHXR620" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>editing</category><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-47-magit/</guid><pubDate>Sat, 07 Apr 2018 13:05:36 GMT</pubDate></item><item><title>Using Emacs 46 Auto Yasnippets</title><link>http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orge453c51" class="outline-2"&gt;
&lt;h2 id="orge453c51"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge453c51"&gt;
&lt;p&gt;
The other day I discovered &lt;a href="https://github.com/abo-abo/auto-yasnippet"&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href="https://github.com/abo-abo"&gt;Oleh Krehel&lt;/a&gt; or abo-abo.
&lt;/p&gt;

&lt;p&gt;
It looks like it's going to be a great way to solve a particular
problem that come up now and again.
&lt;/p&gt;

&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of_red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue. 
&lt;/p&gt;

&lt;p&gt;
You could use a yasnippet but it's unlikely that you'll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.
&lt;/p&gt;

&lt;p&gt;
Very cool.
&lt;/p&gt;


&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/utrMabxgXbg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>editing</category><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</guid><pubDate>Fri, 16 Mar 2018 00:05:36 GMT</pubDate></item><item><title>Using Emacs 45 - Company or Autocomplete</title><link>http://cestlaz.github.io/posts/using-emacs-45-company/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org33b7b2c" class="outline-2"&gt;
&lt;h2 id="org33b7b2c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org33b7b2c"&gt;
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://planet.emacsen.org/"&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what's going on in emacs every week on her &lt;a href="http://sachachua.com/blog/category/geek/emacs/"&gt;blog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
on the video front, &lt;a href="https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g"&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we'll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.
&lt;/p&gt;

&lt;p&gt;
today, i watched dave's video on &lt;a href="https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s"&gt;company&lt;/a&gt; mode for auto
completion. I've always used &lt;a href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.
&lt;/p&gt;

&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href="https://github.com/zamansky/using-emacs"&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I've also pulled
out the relevant code and am placing it down under the video.
&lt;/p&gt;

&lt;p&gt;
Here's what I've found so far:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/srFQwTvbaxY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0580de9" class="outline-2"&gt;
&lt;h2 id="org0580de9"&gt;Company config (so far):&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0580de9"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-idle-delay&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-company-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-irony&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-cdb-autosetup-compile-options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony-eldoc&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'irony-eldoc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:config&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/python-mode-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-jedi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'my/python-mode-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org67bf776" class="outline-2"&gt;
&lt;h2 id="org67bf776"&gt;Autocomplete config&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67bf776"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;py-python-command&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:ac-setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-45-company/</guid><pubDate>Sun, 11 Mar 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 44 - An org-mode workflow for application processing</title><link>http://cestlaz.github.io/posts/using-emacs-44-pdf/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orga34b33a" class="outline-2"&gt;
&lt;h2 id="orga34b33a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga34b33a"&gt;
&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It's something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program. 
&lt;/p&gt;

&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you're a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href="http://samsungnext.com/"&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href="http://www.catskillsconf.com/"&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year. 
&lt;/p&gt;

&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there's not enough information, I've been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I'm provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.
&lt;/p&gt;

&lt;p&gt;
For the first cohort, this wasn't a big deal. I hadn't even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;

&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;

&lt;p&gt;
This year, there are well over 100 applicants (and we're looking to
grow the program by a large number of students). All of a sudden, it
wasn't so easy to navigate all the pdf files.
&lt;/p&gt;

&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href="https://github.com/politza/pdf-tools"&gt;pdf-tools&lt;/a&gt;, and
&lt;a href="https://melpa.org/#/org-pdfview"&gt;org-pdfview&lt;/a&gt; I've come up with a workflow that I very much like.
&lt;/p&gt;

&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LFO2UbzbZhA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>pdf</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-44-pdf/</guid><pubDate>Sat, 03 Mar 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 43 - Music with MPD</title><link>http://cestlaz.github.io/posts/using-emacs-43-music/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org208ddec" class="outline-2"&gt;
&lt;h2 id="org208ddec"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org208ddec"&gt;
&lt;p&gt;
I like to listen to music at work. Sometimes I just stream from
YouTube, Soundcloud, Spotify or some other online source but if you're
a person of a certain age, like me, you probably have quite an mp3
collection. All those CDs that have been ripped not to mention some
converted vinyl.
&lt;/p&gt;

&lt;p&gt;
I used to use the &lt;a href="https://www.musicpd.org/"&gt;Music Player Daemon&lt;/a&gt; or MPD back in the day. It would
run in the background and you could connect to it using lots of
&lt;a href="https://www.musicpd.org/clients/"&gt;clients&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
When I was running Ubuntu and Mint Linux, I had some trouble setting
up MPD but the process is much smoother using Manjaro which is Arch
based and I'm currently enjoying.
&lt;/p&gt;

&lt;p&gt;
Here's a video on how I set up MPD and also use Emacs to control it.
&lt;/p&gt;

&lt;p&gt;
Coincidentally, on the same day I recorded this, &lt;a href="https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/feed"&gt;Uncle Dave&lt;/a&gt; put up a
similar &lt;a href="https://www.youtube.com/watch?v=xTVN8UDScqk"&gt;video&lt;/a&gt;. Dave also sets up MPD on an Arch based linux but he
uses EMMS for his player. I ultimately end up with Simple-MPC with
briefs stops at the built in MPC mode and Mingus along the way.
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LWd60rc_rQ0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>mpd</category><category>music</category><guid>http://cestlaz.github.io/posts/using-emacs-43-music/</guid><pubDate>Tue, 20 Feb 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 42 - Git Gutter and Time Machine</title><link>http://cestlaz.github.io/posts/using-emacs-42-git-gutter/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org916ae49" class="outline-2"&gt;
&lt;h2 id="org916ae49"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org916ae49"&gt;
&lt;p&gt;
One day I'll do a Magit video but since there are already some good
ones out there I thought I'd share a couple of other great git related
packages.
&lt;/p&gt;

&lt;p&gt;
The first is &lt;a href="https://github.com/syohex/emacs-git-gutter/tree/00c05264af046b5ce248e5b0bc42f117d9c27a09"&gt;Git Gutter&lt;/a&gt; which adds markers on the side gutter of your
buffer so you know what's changed since you're last commit. I pretty
much use it exclusively for that visual but it can also be used to
cmmit and revert individual chunks of your changes. 
&lt;/p&gt;

&lt;p&gt;
The second is &lt;a href="https://github.com/pidu/git-timemachine"&gt;Git Timemachine&lt;/a&gt; which lets you move forward and back
between commits. 
&lt;/p&gt;

&lt;p&gt;
The video demos both. 
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/P-mLxkb-EE8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>git</category><guid>http://cestlaz.github.io/posts/using-emacs-42-git-gutter/</guid><pubDate>Sun, 18 Feb 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 41 Pandoc</title><link>http://cestlaz.github.io/posts/using-emacs-41-pandoc/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9929ccd" class="outline-2"&gt;
&lt;h2 id="org9929ccd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9929ccd"&gt;
&lt;p&gt;
Another Emacs quick hit today. Actually, not really Emacs. Today's
video is a quick, really quick, look at &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;. Pandoc is a document
converter. 
&lt;/p&gt;

&lt;p&gt;
Here are the formats that Pandoc can covert read from:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored Markdown,
MultiMarkdown, and (subsets of) Textile, reStructuredText, HTML,
LaTeX, MediaWiki markup, TWiki markup, TikiWiki markup, Creole 1.0,
Haddock markup, OPML, Emacs Org mode, DocBook, JATS, Muse, txt2tags,
Vimwiki, EPUB, ODT, and Word docx.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And here are the ones it can write to:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
plain text, Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored
Markdown, MultiMarkdown, reStructuredText, XHTML, HTML5, LaTeX
(including beamer slide shows), ConTeXt, RTF, OPML, DocBook, JATS,
OpenDocument, ODT, Word docx, GNU Texinfo, MediaWiki markup, DokuWiki
markup, ZimWiki markup, Haddock markup, EPUB (v2 or v3), FictionBook2,
Textile, groff man, groff ms, Emacs Org mode, AsciiDoc, InDesign ICML,
TEI Simple, Muse, PowerPoint slide shows and Slidy, Slideous,
DZSlides, reveal.js, PDF
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
That's pretty impressive
&lt;/p&gt;

&lt;p&gt;
I was faced with an html file describing a lab for all the CSCI13500
students at Hunter. I wanted to modify it for my class and that was
going to be a bear. I also wanted an easy way to have it render up on
GitHub. With pandoc, it was trivial. I just typed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pandoc -f html -t org -o lab3.org lab3.html
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which converted the file to org-mode. This was trivial to edit and
then I uploaded it to GitHub as the lab's Readme.org file which GitHub
automatically renders on the project page.
&lt;/p&gt;

&lt;p&gt;
Pandoc for the win.
&lt;/p&gt;

&lt;p&gt;
I've also used pandoc to move between org-mode and word files. 
&lt;/p&gt;

&lt;p&gt;
If you haven't checked out pandoc, you should.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/qVUZsH-MDRM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>http://cestlaz.github.io/posts/using-emacs-41-pandoc/</guid><pubDate>Tue, 13 Feb 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 40 - Atomic Chrome</title><link>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org1432f66" class="outline-2"&gt;
&lt;h2 id="org1432f66"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1432f66"&gt;
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I'll try to get to them in the coming months.
&lt;/p&gt;

&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1fd9c1a" class="outline-2"&gt;
&lt;h2 id="org1fd9c1a"&gt;UPDATE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1fd9c1a"&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;

&lt;p&gt;
All you have to do is:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Go to &lt;b&gt;&lt;b&gt;chrome://extensions&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;On the bottom of the page you'll see a button to set &lt;b&gt;&lt;b&gt;keyboard shortcuts&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Set the shortcut for Atomic Chrome&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wyPZws66Sic" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid><pubDate>Wed, 31 Jan 2018 11:00:00 GMT</pubDate></item></channel></rss>