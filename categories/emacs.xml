<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C'est la Z (Posts about emacs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 25 Sep 2017 12:49:20 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs 37 - Treemacs file browser</title><link>http://cestlaz.github.io/posts/using-emacs-37-treemacs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org717bfbf" class="outline-2"&gt;
&lt;h2 id="org717bfbf"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org717bfbf"&gt;
&lt;p&gt;
I've been meaning to get back to making Emacs videos but I've been
having trouble figuring out what to record.
&lt;/p&gt;

&lt;p&gt;
People have asked for &lt;a href="https://github.com/magit/magit"&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I'd also like to
get more comfortable with DIRED mode and then do a video on it but I'm
not there yet. I've also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;

&lt;p&gt;
This morning I saw an post on the &lt;a href="https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/"&gt;Emacs subreddit&lt;/a&gt; about &lt;a href="https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs"&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It's pretty
slick. I particularly like the integration with &lt;a href="https://github.com/bbatsov/projectile"&gt;projectile&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I suspect I won't integrate a file browser side bar into my workflow -
I've probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ACg6RnVdw8k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid><pubDate>Sun, 24 Sep 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs 36 - A Touch of Elisp</title><link>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9c673e1" class="outline-2"&gt;
&lt;h2 id="org9c673e1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9c673e1"&gt;
&lt;p&gt;
I've been working on a vue.js project this summer. During the school
year I really can't dive into code so it's been fun.
&lt;/p&gt;

&lt;p&gt;
I've already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn't easily do was arrange windows the way I
wanted.
&lt;/p&gt;

&lt;p&gt;
I've been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp.png" alt="touch-elisp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/touch-elisp2.png" alt="touch-elisp2.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;

&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/swap-windowsn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ace-swap-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aw-flip-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;z-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'z/swap-windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The video goes into more details but it shows that if you're not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/NQhud2ZNd1w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid><pubDate>Sun, 30 Jul 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs 35 - Blogging</title><link>http://cestlaz.github.io/posts/using-emacs-35-blogging/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org4ba0b90" class="outline-2"&gt;
&lt;h2 id="org4ba0b90"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4ba0b90"&gt;
&lt;p&gt;
Very little new Emacs in today's episode of Using Emacs. The video
shows my old blogging workflow and what I'm playing with now.
&lt;/p&gt;

&lt;p&gt;
The only new Emacs covered is the &lt;a href="https://github.com/rejeep/prodigy.el"&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href="https://getnikola.com/blog/index.html"&gt;Nikola&lt;/a&gt;'s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;

&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href="https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/"&gt;here&lt;/a&gt; and
&lt;a href="https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/"&gt;here&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
There's not much more to say here so enjoy the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wSeTic9obKw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-35-blogging/</guid><pubDate>Tue, 27 Jun 2017 15:22:54 GMT</pubDate></item><item><title>Using Emacs - 34 - ibuffer and emmet</title><link>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org16dd636" class="outline-2"&gt;
&lt;h2 id="org16dd636"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org16dd636"&gt;
&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;

&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you'll start
to accumulate buffers. Last time, I talked about using &lt;a href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump"&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;

&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;b&gt;&lt;b&gt;list-buffers&lt;/b&gt;&lt;/b&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the list-buffers buffer brings up
more details. 
&lt;/p&gt;

&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the buffer
brings up help). 
&lt;/p&gt;

&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href="http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html"&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration (mostly stolen from Owen):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-saved-filter-groups&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dired"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dired-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^.*org$"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;js2-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eshell-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;shell-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mu4e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\*mu4e\*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"programming"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;python-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;c++-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emacs"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*scratch\\*$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*Messages\\*$"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-mode-hook&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-auto-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-switch-to-saved-filter-groups&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; don't show these&lt;/span&gt;
					&lt;span class="c1"&gt;;(add-to-list 'ibuffer-never-show-predicates "zowie")&lt;/span&gt;
&lt;span class="c1"&gt;;; Don't show filter groups if there are no buffers in that group&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-show-empty-filter-groups&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Don't ask for confirmation to delete marked buffers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-expert&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05e8f60" class="outline-2"&gt;
&lt;h2 id="org05e8f60"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org05e8f60"&gt;
&lt;p&gt;
The video also shows &lt;a href="https://github.com/smihica/emmet-mode"&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href="https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s"&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It's a real winner.
&lt;/p&gt;


&lt;p&gt;
Here's the config I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;emmet-mode&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'sgml-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'web-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'css-mode-hook&lt;/span&gt;  &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; enable Emmet's css abbreviation.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check them both out:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yUfA-7wWNKA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8b709d3" class="outline-2"&gt;
&lt;h2 id="org8b709d3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8b709d3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid><pubDate>Thu, 15 Jun 2017 19:00:26 GMT</pubDate></item><item><title>Using Emacs - 33 - projectile, dumb-jump</title><link>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org74a627d" class="outline-2"&gt;
&lt;h2 id="org74a627d"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org74a627d"&gt;
&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href="https://github.com/ericdanan/counsel-projectile"&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; projectile&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;projectile-global-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;projectile-completion-system&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel-projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;counsel-projectile-on&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it's a
git or other source control repo, if it's created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;b&gt;&lt;b&gt;.projectile&lt;/b&gt;&lt;/b&gt; in
the root directory of the project.
&lt;/p&gt;

&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;

&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;b&gt;&lt;b&gt;which-key&lt;/b&gt;&lt;/b&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;

&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href="http://projectile.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The other package I show is &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;. It's basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;

&lt;p&gt;
Here's my current config:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"M-g o"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g x"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external-other-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-selector&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="c1"&gt;;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dumb-jump-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wBfZzaff77g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfa76a08" class="outline-2"&gt;
&lt;h2 id="orgfa76a08"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfa76a08"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid><pubDate>Fri, 28 Apr 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 32 - C++</title><link>http://cestlaz.github.io/posts/using-emacs-32-cpp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgf92e1c8" class="outline-2"&gt;
&lt;h2 id="orgf92e1c8"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf92e1c8"&gt;
&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;

&lt;p&gt;
The big difference is instead of building on my &lt;a href="https://github.com/zamansky/using-emacs"&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It's all
pulled from the main config with one additional package.
&lt;/p&gt;

&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; in a
directory off of your home directory named &lt;b&gt;&lt;b&gt;.emacs.d&lt;/b&gt;&lt;/b&gt; and run emacs,
it will install everything and you'll be good to go.
&lt;/p&gt;

&lt;p&gt;
If you've been following this series, the only new package is &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Package&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;which-key&lt;/td&gt;
&lt;td class="org-left"&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;auto-complete&lt;/td&gt;
&lt;td class="org-left"&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;flycheck&lt;/td&gt;
&lt;td class="org-left"&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;yasnippet&lt;/td&gt;
&lt;td class="org-left"&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;ggtags&lt;/td&gt;
&lt;td class="org-left"&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;color-theme&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;moe-theme&lt;/td&gt;
&lt;td class="org-left"&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The video also show me using &lt;b&gt;&lt;b&gt;counsel-ag&lt;/b&gt;&lt;/b&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href="http://cestlaz.github.io/posts/using-emacs-6-swiper"&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;b&gt;&lt;b&gt;smartparens&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;hungry-delete&lt;/b&gt;&lt;/b&gt; and
probably a few more.
&lt;/p&gt;

&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;

&lt;p&gt;
If you're an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven't done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;

&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;


&lt;p&gt;
Here's the configuration code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; set up package sources&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; small interface tweaks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; bring up help for key bindings&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; Auto completion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; on the fly syntax checking&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; snippets and snippet expansion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;;; Theme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;color-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;moe-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;moe-light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7SQmleA4EMo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1508476" class="outline-2"&gt;
&lt;h2 id="org1508476"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1508476"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-32-cpp/</guid><pubDate>Sat, 04 Mar 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 31 - elfeed part 3 - macros</title><link>http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orge2faeb8" class="outline-2"&gt;
&lt;h2 id="orge2faeb8"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge2faeb8"&gt;
&lt;p&gt;
In &lt;a href="http://cestlaz.github.io/posts/using-emacs-30-elfeed-2"&gt;part 2&lt;/a&gt; I talked about how I used &lt;a href="https://github.com/abo-abo/hydra"&gt;Hyrdas&lt;/a&gt; to quickly navigate through
elfeed tags. It was a nice step up but the fact that I still had to
manually edit my configuration code for every new tag to update the
hydra was a problem.
&lt;/p&gt;

&lt;p&gt;
Basically, I had to somehow or other, take a list of all the active
tags and with it build a &lt;b&gt;&lt;b&gt;defhydra&lt;/b&gt;&lt;/b&gt; command that will then make my
Hydra.
&lt;/p&gt;

&lt;p&gt;
Fortunately, emacs, being a lisp, has macros. I'm not talking about
keyboard macros which I talked about in &lt;a href="http://cestlaz.github.io/posts/using-emacs-15-macros/#.WLbj5t9idKQ"&gt;episode 15&lt;/a&gt; but rather &lt;a href="http://wiki.c2.com/?LispMacro"&gt;Lisp
style macros&lt;/a&gt;. Macros let you transform code and then execute the
transformed code. 
&lt;/p&gt;

&lt;p&gt;
The example I give in the video:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;infix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;infix&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; evaluates to 11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This transforms the &lt;b&gt;&lt;b&gt;3+8&lt;/b&gt;&lt;/b&gt; into &lt;b&gt;&lt;b&gt;(+ 3 8)&lt;/b&gt;&lt;/b&gt; and then evaluates it to
be 11.
&lt;/p&gt;

&lt;p&gt;
We can use this idea with our Hydra.
&lt;/p&gt;

&lt;p&gt;
We can use the call &lt;b&gt;&lt;b&gt;elfeed-db-get-all-tags&lt;/b&gt;&lt;/b&gt; to get a list of all
the tags in our database. I decided that if I had an uppercase letter
in the tag, I'd use the lowercase version of that letter as my "hotkey"
and if it didn't, I'd just use the first letter.
&lt;/p&gt;

&lt;p&gt;
So, given a tag list of:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;active&lt;/span&gt; &lt;span class="nv"&gt;blogs&lt;/span&gt; &lt;span class="nv"&gt;cs&lt;/span&gt; &lt;span class="nv"&gt;eDucation&lt;/span&gt; &lt;span class="nv"&gt;emacs&lt;/span&gt; &lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;misc&lt;/span&gt; &lt;span class="nv"&gt;sports&lt;/span&gt; &lt;span class="nv"&gt;star&lt;/span&gt; &lt;span class="nv"&gt;tech&lt;/span&gt; &lt;span class="nv"&gt;unread&lt;/span&gt; &lt;span class="nv"&gt;webcomics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'd want a "hotkey" of &lt;b&gt;&lt;b&gt;b&lt;/b&gt;&lt;/b&gt; for logs and &lt;b&gt;&lt;b&gt;d&lt;/b&gt;&lt;/b&gt; for eDucation.
&lt;/p&gt;

&lt;p&gt;
The routine &lt;b&gt;&lt;b&gt;z/hasCap&lt;/b&gt;&lt;/b&gt; tests to see if a tag has a capital letter in
it and &lt;b&gt;&lt;b&gt;z/get-hydra-option-key&lt;/b&gt;&lt;/b&gt; returns the final "hotkey:"
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/hasCap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;case-fold-search&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match-p&lt;/span&gt; &lt;span class="s"&gt;"[[:upper:]]"&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;z/get-hydra-option-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"returns single upper case letter (converted to lower) or first"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z/hasCap&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;loc&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;substring &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;loc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;loc&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;substring &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;mz/make-elfeed-cats&lt;/b&gt;&lt;/b&gt; takes a list of tags and returns a list of
items where each item is in the form expected by the hydra definition:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +tagname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"tagname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mz/make-elfeed-cats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Returns a list of lists. Each one is line for the hydra configuratio in the form&lt;/span&gt;
&lt;span class="s"&gt;     (c function hint)"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapcar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tagstring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;symbol-name&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z/get-hydra-option-key&lt;/span&gt; &lt;span class="nv"&gt;tagstring&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		   &lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-search-set-filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +%s"&lt;/span&gt; &lt;span class="nv"&gt;tagstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;tagstring&lt;/span&gt;  &lt;span class="p"&gt;)))&lt;/span&gt;
	  &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Finally, here's our macro:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;mz/make-elfeed-hydra&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="s"&gt;"filter"&lt;/span&gt;
     &lt;span class="o"&gt;,@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/make-elfeed-cats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-get-all-tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +star"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Starred"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt; &lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"All"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@1-day-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Today"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="s"&gt;"Quit Elfeed"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The line that starts with &lt;b&gt;&lt;b&gt;,@&lt;/b&gt;&lt;/b&gt; calls the routine that builds lines
of code for all the tags in the database and the macro leaves me with
the defhydra I need.
&lt;/p&gt;


&lt;p&gt;
I then redefine the hydra every time I need it, just in case tags
changed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/make-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
and bind &lt;b&gt;&lt;b&gt;mz/make-and-run-elfeed-hydra&lt;/b&gt;&lt;/b&gt; to j and J in my elfeed
keymap (this code goes in the bind section of my use-package elfeed
section):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As long as I remember to name my tags in a way that they don't
conflict with one another I can quickly navigate all around elfeed.
&lt;/p&gt;

&lt;p&gt;
Macros FTW!!!!
&lt;/p&gt;


&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5zuSUbAHH8c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge5766bc" class="outline-3"&gt;
&lt;h3 id="orge5766bc"&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge5766bc"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</guid><pubDate>Wed, 01 Mar 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 30 - elfeed part 2 - Hydras</title><link>http://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgeeffe6f" class="outline-2"&gt;
&lt;h2 id="orgeeffe6f"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeeffe6f"&gt;
&lt;p&gt;
In &lt;a href="http://cestlaz.github.io/posts/using-emacs-29%20elfeed/"&gt;part 1&lt;/a&gt;, I talked about &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;, a really awesome feed reader for
emacs. Generally, I'm really liking it but there's been one problem -
not being able to navigate quickly between groups of feeds with a
keystroke or two.
&lt;/p&gt;

&lt;p&gt;
It's emacs so there has to be a solution.
&lt;/p&gt;

&lt;p&gt;
Enter &lt;a href="https://github.com/abo-abo/hydra"&gt;hydra&lt;/a&gt; - a terrific emacs package from the same guy who brought
us &lt;a href="https://github.com/abo-abo/hydra"&gt;swiper&lt;/a&gt;, another one of my favorite emacs packages.
&lt;/p&gt;

&lt;p&gt;
Basically, Hydra allows us to create Hydras - a collection of emacs
commands tied o a single prefix along with a nice interface and help
system.
&lt;/p&gt;

&lt;p&gt;
Truth be told, I don't use hydra as much anymore since &lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;
does such a great job most of the time. Which-key, however, is no help
here.
&lt;/p&gt;

&lt;p&gt;
Here's the code to install hydra along with a some of sample Hydra's
I use:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;hydra&lt;/span&gt; 
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for modes that toggle on and off&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"toggle"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="nv"&gt;abbrev-mode&lt;/span&gt; &lt;span class="s"&gt;"abbrev"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="nv"&gt;flyspell-mode&lt;/span&gt; &lt;span class="s"&gt;"flyspell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="nv"&gt;toggle-debug-on-error&lt;/span&gt; &lt;span class="s"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;fci-mode&lt;/span&gt; &lt;span class="s"&gt;"fCi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt; &lt;span class="nv"&gt;auto-fill-mode&lt;/span&gt; &lt;span class="s"&gt;"fill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="nv"&gt;toggle-truncate-lines&lt;/span&gt; &lt;span class="s"&gt;"truncate"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt; &lt;span class="nv"&gt;whitespace-mode&lt;/span&gt; &lt;span class="s"&gt;"whitespace"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"cancel"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x j"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;gotoline&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;:pre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;linum-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="nv"&gt;:post&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;linum-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="s"&gt;"goto"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"top"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"bottom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"middle"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;end-of-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;recenter-top-bottom&lt;/span&gt; &lt;span class="s"&gt;"recenter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="nv"&gt;next-line&lt;/span&gt; &lt;span class="s"&gt;"down"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forward-line&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="s"&gt;"up"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt; &lt;span class="nv"&gt;goto-line&lt;/span&gt; &lt;span class="s"&gt;"goto-line"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for some org-mode stuff&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;hydra-global-org&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"Org"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-start&lt;/span&gt; &lt;span class="s"&gt;"Start Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-stop&lt;/span&gt; &lt;span class="s"&gt;"Stop Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-set-timer&lt;/span&gt; &lt;span class="s"&gt;"Set Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; This one requires you be in an orgmode doc, as it sets the timer for the header&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt; &lt;span class="nv"&gt;org-timer&lt;/span&gt; &lt;span class="s"&gt;"Print Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; output timer value to buffer&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-clock-in&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"Clock-In"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt; &lt;span class="nv"&gt;org-clock-out&lt;/span&gt; &lt;span class="s"&gt;"Clock-Out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; you might also want (setq org-log-note-clock-out t)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="nv"&gt;org-clock-goto&lt;/span&gt; &lt;span class="s"&gt;"Clock Goto"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; global visit the clocked task&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;org-capture&lt;/span&gt; &lt;span class="s"&gt;"Capture"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;rg-capture-goto-last-stored&lt;/span&gt; &lt;span class="s"&gt;"Last Capture"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Take a look at the &lt;a href="https://github.com/abo-abo/hydra"&gt;Hydra&lt;/a&gt; home page for detailed information.
&lt;/p&gt;

&lt;p&gt;
With Hydra installed, I can creat one for navigating in elfeed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="s"&gt;"filter"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +cs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"cs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +emacs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"emacs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +education"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"education"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +star"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Starred"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt; &lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"All"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@1-day-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Today"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="s"&gt;"Quit Elfeed"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and add a binding to the elfeed key map:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;elfeed-search-mode-map&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This isn't the actual Hydra I use – we'll get to that in the next
installment where I'll show how to make a Hydra on the fly that
contains keys for all your elfeed tags but this is a reasonable example.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tjnK1rkO7RU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1765bd1" class="outline-2"&gt;
&lt;h2 id="org1765bd1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1765bd1"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</guid><pubDate>Sat, 25 Feb 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 29 -elfeed part 1</title><link>http://cestlaz.github.io/posts/using-emacs-29%20elfeed/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org6be1e01" class="outline-2"&gt;
&lt;h2 id="org6be1e01"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6be1e01"&gt;
&lt;p&gt;
Since the demise of Google Reader, I've been using &lt;a href="http://feedly.com"&gt;Feedly&lt;/a&gt; to read my
streams. Feedly's a nice product and it's been working well for me for
quite some time. 
&lt;/p&gt;

&lt;p&gt;
A few days ago, I decided to see what emacs had to offer on the feed
reader front. One solution was Gnus but then I've never been able to
get my head around Gnus. Another was &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I thought I'd give elfeed a go. 
&lt;/p&gt;

&lt;p&gt;
Combined with elfeed-goodies and elfeed-org it's a pretty nice
solution. You can easily search by either keywords or tags and tags
are particularly easy to set up with elfeed-org. 
&lt;/p&gt;

&lt;p&gt;
If I want to display all the items from the last month, I hit &lt;b&gt;&lt;b&gt;s&lt;/b&gt;&lt;/b&gt; (for
search) and enter the query:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@6-months-ago&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For only unread posts:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@6-months-ago&lt;/span&gt; &lt;span class="nv"&gt;+unread&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For unread posts tagged emacs:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@6-months-ago&lt;/span&gt; &lt;span class="nv"&gt;+unread&lt;/span&gt; &lt;span class="nv"&gt;+emacs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And for everything in the past 24 hours, read or not:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@1-day-ago&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's pretty easy and pretty slick. The only thing missing is easy
single key navigation. There's one solution to that problem over at
&lt;a href="http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/"&gt;Pragmatic Emacs&lt;/a&gt; and I'll present another one in the next two posts.
&lt;/p&gt;

&lt;p&gt;
I'm using some of the code from pragmatic emacs (the functions that start
with &lt;b&gt;&lt;b&gt;bjm&lt;/b&gt;&lt;/b&gt;) which makes things easier when sharing the elfeed
database on Dropbox (see the Pragmatic Emacs post above for details) and also a couple of routines I found via web
search). 
&lt;/p&gt;

&lt;p&gt;
Here's my basic configuration:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;elfeed-db-directory&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/shared/elfeeddb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;elfeed-mark-all-as-read&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mark-whole-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-untag-all-unread&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
&lt;span class="c1"&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-load-db-and-open&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Wrapper to load the elfeed db from disk before opening"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-update--force&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;;write to disk when quiting&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Wrapper to save the elfeed db to disk before burying buffer"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;quit-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;



&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'elfeed-toggle-star&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-expose&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'elfeed-search-toggle-all&lt;/span&gt; &lt;span class="ss"&gt;'star&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;elfeed-search-mode-map&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed-goodies&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-goodies/setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed-org&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;rmh-elfeed-org-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/shared/elfeed.org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check out elfeed and make sure to go to the links provided on the main
&lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt; page.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org011033a" class="outline-2"&gt;
&lt;h2 id="org011033a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org011033a"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pOFqzK1Ymr4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfac37f3" class="outline-2"&gt;
&lt;h2 id="orgfac37f3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfac37f3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-29%20elfeed/</guid><pubDate>Wed, 22 Feb 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 28 -Rectangles</title><link>http://cestlaz.github.io/posts/using-emacs-27-rectangles/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgd4f58c4" class="outline-2"&gt;
&lt;h2 id="orgd4f58c4"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd4f58c4"&gt;
&lt;p&gt;
One of my favorite but little used emacs features is rectangular
editing. It's little used because I don't need it all that often. It's
one of my favorites because when I do need it, it's just so amazingly
useful.
&lt;/p&gt;

&lt;p&gt;
The idea is you can mark a rectangle of text, cut it and later paste
it.  This means that if you have three columns of text:
&lt;/p&gt;

&lt;pre class="example"&gt;
a b c
d e f
g h i
j k l
&lt;/pre&gt;

&lt;p&gt;
You can easily mark the middle column (b e h k) or even just the b e
and h, cut it and paste it elsewhere as a rectangle. You can also open
up a rectangular region (filled with whitespace). There are a couple
of other niceties but that's the basic idea.
&lt;/p&gt;

&lt;p&gt;
Here's a link to all the functions:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html"&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbc66b49" class="outline-2"&gt;
&lt;h2 id="orgbc66b49"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc66b49"&gt;
&lt;p&gt;
And the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pcA5NeEudgU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga0cf191" class="outline-2"&gt;
&lt;h2 id="orga0cf191"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga0cf191"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-27-rectangles/</guid><pubDate>Thu, 09 Feb 2017 13:00:26 GMT</pubDate></item></channel></rss>