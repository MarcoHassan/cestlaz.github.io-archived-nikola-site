<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about emacs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 16 Mar 2018 00:41:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs 46 Auto Yasnippets</title><link>http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orge453c51" class="outline-2"&gt;
&lt;h2 id="orge453c51"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge453c51"&gt;
&lt;p&gt;
The other day I discovered &lt;a href="https://github.com/abo-abo/auto-yasnippet"&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href="https://github.com/abo-abo"&gt;Oleh Krehel&lt;/a&gt; or abo-abo.
&lt;/p&gt;

&lt;p&gt;
It looks like it's going to be a great way to solve a particular
problem that come up now and again.
&lt;/p&gt;

&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of_red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;count_of_green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue. 
&lt;/p&gt;

&lt;p&gt;
You could use a yasnippet but it's unlikely that you'll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_of&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.
&lt;/p&gt;

&lt;p&gt;
Very cool.
&lt;/p&gt;


&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/utrMabxgXbg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>editing</category><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</guid><pubDate>Fri, 16 Mar 2018 00:05:36 GMT</pubDate></item><item><title>Using Emacs 45 - Company or Autocomplete</title><link>http://cestlaz.github.io/posts/using-emacs-45-company/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org33b7b2c" class="outline-2"&gt;
&lt;h2 id="org33b7b2c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org33b7b2c"&gt;
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://planet.emacsen.org/"&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what's going on in emacs every week on her &lt;a href="http://sachachua.com/blog/category/geek/emacs/"&gt;blog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
on the video front, &lt;a href="https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g"&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we'll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.
&lt;/p&gt;

&lt;p&gt;
today, i watched dave's video on &lt;a href="https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s"&gt;company&lt;/a&gt; mode for auto
completion. I've always used &lt;a href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.
&lt;/p&gt;

&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href="https://github.com/zamansky/using-emacs"&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I've also pulled
out the relevant code and am placing it down under the video.
&lt;/p&gt;

&lt;p&gt;
Here's what I've found so far:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/srFQwTvbaxY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0580de9" class="outline-2"&gt;
&lt;h2 id="org0580de9"&gt;Company config (so far):&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0580de9"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-idle-delay&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-company-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-irony&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-cdb-autosetup-compile-options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;irony-eldoc&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'irony-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'irony-eldoc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company-jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:config&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/python-mode-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'company-backends&lt;/span&gt; &lt;span class="ss"&gt;'company-jedi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'my/python-mode-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org67bf776" class="outline-2"&gt;
&lt;h2 id="org67bf776"&gt;Autocomplete config&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67bf776"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;py-python-command&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;jedi&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:ac-setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-45-company/</guid><pubDate>Sun, 11 Mar 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 44 - An org-mode workflow for application processing</title><link>http://cestlaz.github.io/posts/using-emacs-44-pdf/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orga34b33a" class="outline-2"&gt;
&lt;h2 id="orga34b33a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga34b33a"&gt;
&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It's something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program. 
&lt;/p&gt;

&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you're a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href="http://samsungnext.com/"&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href="http://www.catskillsconf.com/"&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year. 
&lt;/p&gt;

&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there's not enough information, I've been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I'm provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.
&lt;/p&gt;

&lt;p&gt;
For the first cohort, this wasn't a big deal. I hadn't even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;

&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;

&lt;p&gt;
This year, there are well over 100 applicants (and we're looking to
grow the program by a large number of students). All of a sudden, it
wasn't so easy to navigate all the pdf files.
&lt;/p&gt;

&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href="https://github.com/politza/pdf-tools"&gt;pdf-tools&lt;/a&gt;, and
&lt;a href="https://melpa.org/#/org-pdfview"&gt;org-pdfview&lt;/a&gt; I've come up with a workflow that I very much like.
&lt;/p&gt;

&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LFO2UbzbZhA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>pdf</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-44-pdf/</guid><pubDate>Sat, 03 Mar 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 43 - Music with MPD</title><link>http://cestlaz.github.io/posts/using-emacs-43-music/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org208ddec" class="outline-2"&gt;
&lt;h2 id="org208ddec"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org208ddec"&gt;
&lt;p&gt;
I like to listen to music at work. Sometimes I just stream from
YouTube, Soundcloud, Spotify or some other online source but if you're
a person of a certain age, like me, you probably have quite an mp3
collection. All those CDs that have been ripped not to mention some
converted vinyl.
&lt;/p&gt;

&lt;p&gt;
I used to use the &lt;a href="https://www.musicpd.org/"&gt;Music Player Daemon&lt;/a&gt; or MPD back in the day. It would
run in the background and you could connect to it using lots of
&lt;a href="https://www.musicpd.org/clients/"&gt;clients&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
When I was running Ubuntu and Mint Linux, I had some trouble setting
up MPD but the process is much smoother using Manjaro which is Arch
based and I'm currently enjoying.
&lt;/p&gt;

&lt;p&gt;
Here's a video on how I set up MPD and also use Emacs to control it.
&lt;/p&gt;

&lt;p&gt;
Coincidentally, on the same day I recorded this, &lt;a href="https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/feed"&gt;Uncle Dave&lt;/a&gt; put up a
similar &lt;a href="https://www.youtube.com/watch?v=xTVN8UDScqk"&gt;video&lt;/a&gt;. Dave also sets up MPD on an Arch based linux but he
uses EMMS for his player. I ultimately end up with Simple-MPC with
briefs stops at the built in MPC mode and Mingus along the way.
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LWd60rc_rQ0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>mpd</category><category>music</category><guid>http://cestlaz.github.io/posts/using-emacs-43-music/</guid><pubDate>Tue, 20 Feb 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 42 - Git Gutter and Time Machine</title><link>http://cestlaz.github.io/posts/using-emacs-42-git-gutter/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org916ae49" class="outline-2"&gt;
&lt;h2 id="org916ae49"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org916ae49"&gt;
&lt;p&gt;
One day I'll do a Magit video but since there are already some good
ones out there I thought I'd share a couple of other great git related
packages.
&lt;/p&gt;

&lt;p&gt;
The first is &lt;a href="https://github.com/syohex/emacs-git-gutter/tree/00c05264af046b5ce248e5b0bc42f117d9c27a09"&gt;Git Gutter&lt;/a&gt; which adds markers on the side gutter of your
buffer so you know what's changed since you're last commit. I pretty
much use it exclusively for that visual but it can also be used to
cmmit and revert individual chunks of your changes. 
&lt;/p&gt;

&lt;p&gt;
The second is &lt;a href="https://github.com/pidu/git-timemachine"&gt;Git Timemachine&lt;/a&gt; which lets you move forward and back
between commits. 
&lt;/p&gt;

&lt;p&gt;
The video demos both. 
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/P-mLxkb-EE8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>git</category><guid>http://cestlaz.github.io/posts/using-emacs-42-git-gutter/</guid><pubDate>Sun, 18 Feb 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 41 Pandoc</title><link>http://cestlaz.github.io/posts/using-emacs-41-pandoc/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9929ccd" class="outline-2"&gt;
&lt;h2 id="org9929ccd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9929ccd"&gt;
&lt;p&gt;
Another Emacs quick hit today. Actually, not really Emacs. Today's
video is a quick, really quick, look at &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;. Pandoc is a document
converter. 
&lt;/p&gt;

&lt;p&gt;
Here are the formats that Pandoc can covert read from:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored Markdown,
MultiMarkdown, and (subsets of) Textile, reStructuredText, HTML,
LaTeX, MediaWiki markup, TWiki markup, TikiWiki markup, Creole 1.0,
Haddock markup, OPML, Emacs Org mode, DocBook, JATS, Muse, txt2tags,
Vimwiki, EPUB, ODT, and Word docx.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And here are the ones it can write to:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
plain text, Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored
Markdown, MultiMarkdown, reStructuredText, XHTML, HTML5, LaTeX
(including beamer slide shows), ConTeXt, RTF, OPML, DocBook, JATS,
OpenDocument, ODT, Word docx, GNU Texinfo, MediaWiki markup, DokuWiki
markup, ZimWiki markup, Haddock markup, EPUB (v2 or v3), FictionBook2,
Textile, groff man, groff ms, Emacs Org mode, AsciiDoc, InDesign ICML,
TEI Simple, Muse, PowerPoint slide shows and Slidy, Slideous,
DZSlides, reveal.js, PDF
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
That's pretty impressive
&lt;/p&gt;

&lt;p&gt;
I was faced with an html file describing a lab for all the CSCI13500
students at Hunter. I wanted to modify it for my class and that was
going to be a bear. I also wanted an easy way to have it render up on
GitHub. With pandoc, it was trivial. I just typed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pandoc -f html -t org -o lab3.org lab3.html
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which converted the file to org-mode. This was trivial to edit and
then I uploaded it to GitHub as the lab's Readme.org file which GitHub
automatically renders on the project page.
&lt;/p&gt;

&lt;p&gt;
Pandoc for the win.
&lt;/p&gt;

&lt;p&gt;
I've also used pandoc to move between org-mode and word files. 
&lt;/p&gt;

&lt;p&gt;
If you haven't checked out pandoc, you should.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/qVUZsH-MDRM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>http://cestlaz.github.io/posts/using-emacs-41-pandoc/</guid><pubDate>Tue, 13 Feb 2018 12:05:45 GMT</pubDate></item><item><title>Using Emacs 40 - Atomic Chrome</title><link>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org1432f66" class="outline-2"&gt;
&lt;h2 id="org1432f66"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1432f66"&gt;
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I'll try to get to them in the coming months.
&lt;/p&gt;

&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1fd9c1a" class="outline-2"&gt;
&lt;h2 id="org1fd9c1a"&gt;UPDATE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1fd9c1a"&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;

&lt;p&gt;
All you have to do is:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Go to &lt;b&gt;&lt;b&gt;chrome://extensions&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;On the bottom of the page you'll see a button to set &lt;b&gt;&lt;b&gt;keyboard shortcuts&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Set the shortcut for Atomic Chrome&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wyPZws66Sic" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid><pubDate>Wed, 31 Jan 2018 11:00:00 GMT</pubDate></item><item><title>Using Emacs 2017 Recap</title><link>http://cestlaz.github.io/posts/using-emacs-2017-recap/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orged6e627" class="outline-2"&gt;
&lt;h2 id="orged6e627"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orged6e627"&gt;
&lt;p&gt;
This past year I recorded 14 Using Emacs videos. This is on top of the
25 videos I made last year. The fall off in production is
understandable. I got through my day to day configuration in the
late 20s and since then the videos have just been on things I've
rediscovered, things that became useful and things that I just found
interesting. It was also a busier year.
&lt;/p&gt;

&lt;p&gt;
Why did I start the series? Mostly for my students. There's the built
in Emacs tutorial and other beginner resources but how do you go from
the basics to a real working configuration? For years I would show my
kids Emacs and use it in class but there was never a path for them to
follow from beginner to craftsman. I hoped the videos would fill the
void.
&lt;/p&gt;

&lt;p&gt;
It probably didn't. I don't think I'm getting greater Emacs adoption
from my students but on the other hand, I've found making the series
rewarding for other reasons.
&lt;/p&gt;

&lt;p&gt;
First and foremost, it's allowed me to be an active contributing
member of the Emacs community. I haven't written any Emacs packages
nor am I an active guy on any Emacs forums but this is a way I can do
my part. 
&lt;/p&gt;

&lt;p&gt;
Second, although there hasn't been a great deal of comments on the
videos or blog posts I've gotten to know a few people that I wouldn't
have gotten to know otherwise.
&lt;/p&gt;

&lt;p&gt;
It also shows that that if you put things out there people might find
it useful. I don't know how many people saw my Emacs posts at the
start but a year and half later I've got 1,700 YouTube
subscribers. Sure, that's nothing compared to many YouTubers but 
for a guy making schlocky videos at his desk about an as much as I hate to admit it
non-maintream editor, I think it's pretty cool.
&lt;/p&gt;

&lt;p&gt;
The question is what to make videos on moving forward? 
&lt;/p&gt;

&lt;p&gt;
I thought I'd throw it out to the community. Here's an embedded
poll. Feel free to suggest other topics either on the blog or
as a Twitter reply.
&lt;/p&gt;

&lt;p&gt;
I can't promise I'll get to all or any but I'll certainly check out
the popular suggestions.
&lt;/p&gt;

&lt;script type="text/javascript" src="http://www.easypolls.net/ext/scripts/emPoll.js?p=5a46abd4e4b04ebe73ddc4de"&gt;&lt;/script&gt;&lt;a class="OPP-powered-by" href="http://www.objectplanet.com/opinio/" style="text-decoration:none;"&gt;&lt;div style="font: 9px arial; color: gray;"&gt;survey service&lt;/div&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>http://cestlaz.github.io/posts/using-emacs-2017-recap/</guid><pubDate>Fri, 29 Dec 2017 18:17:53 GMT</pubDate></item><item><title>Using Emacs 39 - mu4e</title><link>http://cestlaz.github.io/posts/using-emacs-39-mu4e/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org5eebc40" class="outline-2"&gt;
&lt;h2 id="org5eebc40"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5eebc40"&gt;
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I've been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account. 
&lt;/p&gt;

&lt;p&gt;
I've had lots of requests for a video on what I do but I've been
hesitant for two reasons:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;There are parts of my configuration that are copied from others and
I really don't understand.&lt;/li&gt;
&lt;li&gt;I wasn't happy with the complexity and some of the tooling.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
While there are still parts of my configuration that I'm not 100%
clear on I've cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync. 
&lt;/p&gt;

&lt;p&gt;
Here's a writeup on configuring things with video at the end.
&lt;/p&gt;

&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Get the email from the server to the local machine using IMAP.&lt;/li&gt;
&lt;li&gt;Setting up mu.&lt;/li&gt;
&lt;li&gt;Access the email locally from Emacs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga9335b9" class="outline-3"&gt;
&lt;h3 id="orga9335b9"&gt;Part 1 Getting the email to your local machine using mbsync&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga9335b9"&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href="https://twitter.com/robstewartUK"&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html"&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href="https://sourceforge.net/p/isync/isync/ci/master/tree/"&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./autogen.sh
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I followed Rob's instructions basically verbatim for the password and
authentication stuff so I suggest you do the same. 
&lt;/p&gt;

&lt;p&gt;
You'll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbe8717f" class="outline-3"&gt;
&lt;h3 id="orgbe8717f"&gt;Part 2 - setting up mu.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbe8717f"&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html"&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.
&lt;/p&gt;


&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mu index
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href="http://www.djcbsoftware.nl/code/mu/cheatsheet.html"&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgbcb229f" class="outline-3"&gt;
&lt;h3 id="orgbcb229f"&gt;Setting up mu4e in emacs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbcb229f"&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob's
configuration in his post or my &lt;a href="https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el"&gt;sample&lt;/a&gt; config. You'll have to take a
few minutes to go through either and make the appropriate changes but 
the required changes should be cleared.
&lt;/p&gt;

&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.
&lt;/p&gt;

&lt;p&gt;
I'm very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.
&lt;/p&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/newRHXKm4H4" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid><pubDate>Sun, 24 Dec 2017 13:00:00 GMT</pubDate></item><item><title>Using Emacs 38 - dired</title><link>http://cestlaz.github.io/posts/using-emacs-38-dired/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org8603a7a" class="outline-2"&gt;
&lt;h2 id="org8603a7a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8603a7a"&gt;
&lt;p&gt;
The 38th installment of Using Emacs is about &lt;b&gt;&lt;b&gt;dired&lt;/b&gt;&lt;/b&gt;, Emacs' built
in mode for navigating and working with directories.
&lt;/p&gt;

&lt;p&gt;
I'm not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I'd love to hear some configuration and
use suggestions from people who use it regularly.
&lt;/p&gt;

&lt;p&gt;
Here's the configuration I use:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dired+&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'dired+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which merely adds dired+ into the mix.
&lt;/p&gt;

&lt;p&gt;
I also started playing with &lt;a href="https://github.com/joddie/pcre2el"&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;pcre2el&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pcre-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href="http://irreal.org/blog/?p=6760"&gt;link&lt;/a&gt;, &lt;a href="https://oremacs.com/2017/11/18/dired-occur/"&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href="https://github.com/mhayashi1120/Emacs-wgrep"&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; which looks to be
useful.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;wgrep&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;counsel-fzf-cmd&lt;/span&gt; &lt;span class="s"&gt;"/home/zamansky/.fzf/bin/fzf -f %s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To help get started here are links to a couple of cheat sheets:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf"&gt;dired reference card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf"&gt;another dired cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll probably use dired more frequently but again, would love to hear
how other people are using it.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Fg7HmmRYWy8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-38-dired/</guid><pubDate>Fri, 24 Nov 2017 13:00:00 GMT</pubDate></item></channel></rss>