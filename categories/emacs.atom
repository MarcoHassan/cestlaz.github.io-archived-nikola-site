<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Posts about emacs</title>
  <id>http://cestlaz.github.io/categories/emacs.atom</id>
  <updated>2016-11-19T21:41:23Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/categories/emacs.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/categories/emacs/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Using Emacs - 22 - emacsclient</title>
    <id>http://cestlaz.github.io/posts/using-emacs-22-emacsclient/</id>
    <updated>2016-11-16T12:00:00-04:00</updated>
    <published>2016-11-16T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-22-emacsclient/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Another quick hit today.
&lt;/p&gt;

&lt;p&gt;
This video is really setting the stage for hte next two, where I talk about org-mode capturing.
&lt;/p&gt;

&lt;p&gt;
Today, we're demoing the use of the emacs server and client.
&lt;/p&gt;

&lt;p&gt;
Back in the old days, emacs took a LOOONG time to load. A complex
conviguration could take on the order of 10 to 20 seconds. This
resulted in people loading emacs at the start of the day and leaving
it up forever. While load times aren't much of an issue anymore, it's
still nice to leave emacs around all the time.
&lt;/p&gt;

&lt;p&gt;
That's where running emacs as a server comes in.. I set up a keyboard shortcut my window manager to run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emacsclient -a "" -c
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Rather than trying to run emacs, this tries to connect to an already
running emacs server. The &lt;b&gt;&lt;b&gt;-c&lt;/b&gt;&lt;/b&gt; creates a new frame. Instead if you
use &lt;b&gt;&lt;b&gt;-t&lt;/b&gt;&lt;/b&gt; it will open emacs in the terminal. The &lt;b&gt;*-a ""*&lt;/b&gt; tells
emacs to run itself as a server (daemon) if it isn't already running.
&lt;/p&gt;


&lt;p&gt;
Later on, running &lt;b&gt;&lt;b&gt;emacsclient -c&lt;/b&gt;&lt;/b&gt; will very quickly bring up a new frame to the server.
&lt;/p&gt;

&lt;p&gt;
In addition to instant loading, Running emacs this way has the
advantage, or some may say disadvantage of keeping buffers around
forever since you just keep emacs up and running.  
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9AHGsCtsClg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 21 - web mode</title>
    <id>http://cestlaz.github.io/posts/using-emacs-21-web-mode/</id>
    <updated>2016-11-16T12:00:00-04:00</updated>
    <published>2016-11-16T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-21-web-mode/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Quick post today. 
&lt;/p&gt;

&lt;p&gt;
The video goes over web-mode - my preferred weapon for html and all the goodies you embed in an html file.
&lt;/p&gt;

&lt;p&gt;
It's multi-modal so it acts sensibly regardless of wether you're editing html, css, javascript or even templates in a single file.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; In the video, web-mode wasn't automatically inserting
quotes. I had to set hte following variable to fix this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(setq web-mode-enable-auto-quoting t)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Giving the final configuration I'm currently using: 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:config&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.html?\\'"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-engines-alist&lt;/span&gt;
	       &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"django"&lt;/span&gt;    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\\.html\\'"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-ac-sources-alist&lt;/span&gt;
	       &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"css"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-source-css-property&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-source-words-in-buffer&lt;/span&gt; &lt;span class="nv"&gt;ac-source-abbrev&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-enable-auto-closing&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;web-mode-enable-auto-quoting&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; this fixes the quote problem I mentioned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The web-mode &lt;a href="http://web-mode.org"&gt;documentation&lt;/a&gt; has more information including a nice chart of all the key bindings.
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/69bQa5n23jc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 20 - yanking</title>
    <id>http://cestlaz.github.io/posts/using-emacs-20-yanking/</id>
    <updated>2016-11-13T12:00:00-04:00</updated>
    <published>2016-11-13T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-20-yanking/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Today's video is a bit of a follow up on the last one as well as a few
miscillaneous configuration.
&lt;/p&gt;

&lt;p&gt;
We got some comments on alternate ways to load a file if it exists -
it's always cool to see how different people end up doing similar things.
&lt;/p&gt;

&lt;p&gt;
We then talk about three little configurations. Two I found out about
reading Jon Sander's (jcs) blog &lt;a href="http://irreal.org/blog"&gt;Irreal&lt;/a&gt;. Jon's blog is a terrific
source of emacs info - if you don't subscribe, you should.
&lt;/p&gt;

&lt;p&gt;
I go over using counsel for working with the kill-ring. The command
counsel-yank-pop acts as a replamcement for yank-pop and it lets you
easily yank anything from the kill ring - not just the most previously
killed/whacked piece. 
&lt;/p&gt;

&lt;p&gt;
You just hit &lt;b&gt;&lt;b&gt;M-y&lt;/b&gt;&lt;/b&gt; and then either keep hitting it or use up and
down to select what you want to yank. 
&lt;/p&gt;

&lt;p&gt;
Here's the original post from Irreal: &lt;a href="http://irreal.org/blog/?p=5707"&gt;http://irreal.org/blog/?p=5707&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I then briefly talk about smoothing things over between the system
clipboard and the kill ring, also from Irreal:
&lt;a href="http://irreal.org/blog/?p=5702"&gt;http://irreal.org/blog/?p=5702&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, I talk about auto-revert-mode - this monitors files on your
file system and when they change, they reload your buffer. I find this
very useful to keep multiple machines in sync when I'm working with
files in a could based filesystem like Dropbox or Owncloud.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LReZI7VAy8w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 19 - moving to a live config</title>
    <id>http://cestlaz.github.io/posts/using-emacs-19-live/</id>
    <updated>2016-11-10T12:00:00-04:00</updated>
    <published>2016-11-10T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-19-live/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Some of the videos I want to make are going to be much easier to do if
I'm working in my own account where my whole file tree is available. 
&lt;/p&gt;

&lt;p&gt;
It's also a little annoying changing between my full emacs config and
the one I'm developing here.
&lt;/p&gt;

&lt;p&gt;
So, I decided to move to this config for my real config and as I make
more videos move parts of my old configuration over to this new one.
&lt;/p&gt;

&lt;p&gt;
The only problem is that I &lt;b&gt;&lt;b&gt;need&lt;/b&gt;&lt;/b&gt; some of my current config right
now – things like my email setup.
&lt;/p&gt;

&lt;p&gt;
This video talks about how I'm going to set things up to take care of
everything.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8RwQNXOjSis" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 18 - Narrowing and iedit</title>
    <id>http://cestlaz.github.io/posts/using-emacs-18-narrow/</id>
    <updated>2016-11-02T12:00:00-04:00</updated>
    <published>2016-11-02T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-18-narrow/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I meant to cover these last time but decided not to so as to keep the
videos to about 10 minutes each.
&lt;/p&gt;

&lt;p&gt;
First up this time round is &lt;a href="https://github.com/victorhge/iedit"&gt;iedit&lt;/a&gt; - a really cool mode that lets you
select all the instances of the marked selection at the same time and
edit them all at once. By default it's bound to &lt;b&gt;&lt;b&gt;C-l&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
For example, let's say you had the following code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;somevar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;somevar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;somevar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;somevar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You could mark one instance of &lt;b&gt;&lt;b&gt;somevar&lt;/b&gt;&lt;/b&gt;, hit &lt;b&gt;&lt;b&gt;C-;&lt;/b&gt;&lt;/b&gt; and you'd be
editing them all at once. When you're done, you hit &lt;b&gt;&lt;b&gt;C-;&lt;/b&gt;&lt;/b&gt; again and
everything is un-selected.
&lt;/p&gt;

&lt;p&gt;
There are other ways to modify multiple instances of a selection. You
can always search and replace or use Magnar Sveen's really cool
&lt;a href="https://github.com/magnars/multiple-cursors.el"&gt;multiple cursors&lt;/a&gt; package and I'm sure there are others but I like
iedit since it's small and simple. It also works for rectangular
editing but I didn't cover that in the video. I'll probably demo it
when I cover rectangular editing in general.
&lt;/p&gt;

&lt;p&gt;
Iedit has limitations. For insance, since it works globally, it isn't
perfect for renaming variables. If the above code snippet was part of
a larger program with many other instances of &lt;b&gt;&lt;b&gt;somevar&lt;/b&gt;&lt;/b&gt;, iedit
wouldn't, by itself, be as useful.
&lt;/p&gt;

&lt;p&gt;
You could reach for a language specific refactoring package but for
me, that's where &lt;b&gt;&lt;b&gt;narrowing&lt;/b&gt;&lt;/b&gt; comes in. You can mark a region and
tell emcas to &lt;b&gt;&lt;b&gt;narrow-to-region&lt;/b&gt;&lt;/b&gt; which hides everything outside the
region and temporarily (until you &lt;b&gt;&lt;b&gt;widen&lt;/b&gt;&lt;/b&gt;) treats the region as the
whole document. 
&lt;/p&gt;

&lt;p&gt;
So, you could narrow to the section of code you want to edit and then
use iedit from within.
&lt;/p&gt;

&lt;p&gt;
To make things easier, I grabed &lt;a href="http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html"&gt;narrow-or-winden-dwim&lt;/a&gt; from &lt;a href="http://endlessparentheses.com/"&gt;Endless
Parentheses&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I think the video makes the behaviour pretty clear.
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xne0kS1DfVs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 17 - misc small packages</title>
    <id>http://cestlaz.github.io/posts/using-emacs-17-misc/</id>
    <updated>2016-10-28T12:00:00-04:00</updated>
    <published>2016-10-28T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-17-misc/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'm working on getting enough of my real configuration into this
series so that I can dump my current one and use this one all them
time and grow it back up an episode at a time.
&lt;/p&gt;

&lt;p&gt;
I think we're almost there.
&lt;/p&gt;

&lt;p&gt;
This time, we're looking at a few small packages that I use all the
time.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Highlight line Mode&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(global-hl-line-mode t)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
this turns on highlight line mode.  It makes it easy to see the line
the cursor's on. Nothing huge, I just like it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;a href="https://github.com/Malabarba/beacon"&gt;Beacon mode&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/Malabarba/beacon"&gt;Beacon mode&lt;/a&gt; flashes the cursor whenever you scroll. It makes things
easy to locate the cursor when scrolling
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; flashes the cursor's line when you scroll&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;beacon&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beacon-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; this color looks good for the zenburn theme but not for the one&lt;/span&gt;
&lt;span class="c1"&gt;; I'm using for the videos&lt;/span&gt;
&lt;span class="c1"&gt;; (setq beacon-color "#666600")&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;a href="https://github.com/nflath/hungry-delete"&gt;Hungry Delete mode&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
&lt;a href="https://github.com/nflath/hungry-delete"&gt;This mode&lt;/a&gt; deletes all the whitespace after the cursor (or before it)
when you use delete or backspace.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; deletes all the whitespace when you hit backspace or delete&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;hungry-delete&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-hungry-delete-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;a href="https://github.com/magnars/expand-region.el"&gt;Expand Region&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
&lt;a href="https://github.com/magnars"&gt;Magnar Sveen's&lt;/a&gt; awesome expand region mode is a must have. He also
wrote the amazing &lt;a href="https://github.com/magnars/multiple-cursors.el"&gt;multiple cursors&lt;/a&gt; package. I highly recommend
checking out his work.
&lt;/p&gt;

&lt;p&gt;
Expand region expands the marked region by semantic units. It's my go
to way of marking text for manipulation
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; expand the marked region in semantic increments (negative prefix to reduce region)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;expand-region&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'er/expand-region&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
I also tried to look at aggressive indent but that had some problems
so we'll come back to that later.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vKIFi1h0I5Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 16 - Undo Tree</title>
    <id>http://cestlaz.github.io/posts/using-emacs-16-undo-tree/</id>
    <updated>2016-10-09T12:00:00-04:00</updated>
    <published>2016-10-09T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-16-undo-tree/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
If you use emacs, you should keep an eye on Jon Snader's &lt;a href="http://irreal.org/blog/"&gt;blog&lt;/a&gt;,
&lt;a href="http://irreal.org/blog/"&gt;irreal.org&lt;/a&gt;. A few days he posted on &lt;a href="http://irreal.org/blog/?p=5621"&gt;Undo Tree&lt;/a&gt; - a package that extends
Emacs's built in undo functionality.
&lt;/p&gt;

&lt;p&gt;
Basic emacs has undo, bound to &lt;b&gt;&lt;b&gt;C-/&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;C-_&lt;/b&gt;&lt;/b&gt; but that's about
it. Undo tree, which you can set up with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;undo-tree&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-undo-tree-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
adds two key features. First is redo, which you get by adding the
shift key to the undo keychords. 
&lt;/p&gt;

&lt;p&gt;
The other, is the visual undo tree. You can bring that up wit &lt;b&gt;&lt;b&gt;C-x
u&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Once you bring up the undo tree, you can use the up and down arrows or
&lt;b&gt;&lt;b&gt;C-n&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;C-p&lt;/b&gt;&lt;/b&gt; to move between undo and redos. When you get to
what you want, just quit the undo tree visualizer with &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
The cool part is that once you undo a few things and add new stuff,
you get a tree that you can navigate through using the arrows. 
&lt;/p&gt;

&lt;p&gt;
It's much easier to get the flavor of this by watching the video
(which also has a lame example of using artist-mode which I'll come
back t at some point).
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/zL0FJ-jbDPU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>User friendly - I do not think that means what you think it means</title>
    <id>http://cestlaz.github.io/posts/user-friendly/</id>
    <updated>2016-09-28T11:13:37-04:00</updated>
    <published>2016-09-28T11:13:37-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/user-friendly/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Saw this post the other day: &lt;a href="https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/"&gt;Emacs is hurting Clojure&lt;/a&gt; and this response: &lt;a href="http://irreal.org/blog/?p=5597"&gt;Is Emacs Really HJard to Learn / Use&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This called to mind those countless discussions about tools being user
friendly. I'm frequently on the unpopular side of these
discussions. Linux vs Windows vs Mac, Shell vs GUI, Emacs vs
fill-in-the-blank-editor-or-IDE and on and on.
&lt;/p&gt;


&lt;p&gt;
Don't use Emacs, it isn't user
friendly. Don't use Linux, it isn't user friendly.
&lt;/p&gt;

&lt;p&gt;
The thing is, I don't think that word means what they think it does. 
&lt;/p&gt;

&lt;p&gt;
I tell my kids that Linux and the shell is amazingly user friendly and
Windows and Macs aren't user friendly at all. Windows, rather, is 
"Learner Friendly." For years, it's been easy to learn what you can do
on Windows or Mac (as used via the GUI, not dropping to a shell) but
the truth is you can't do that much. They're designed as program
loaders not tool kits.
&lt;/p&gt;

&lt;p&gt;
You can learn how to get around and load programs and files very
quickly - much more quickly at first than using a command line
interface. The problem is, at that point, you hit a wall. No doubt
those operating systems are more learner friendly than Linux and the
shell but once you learn the command line, it can be leveraged for all
sorts of things and pretty easily at that - user friendly (see these
posts for some examples: &lt;a href="http://localhost:8000/categories/cli/"&gt;Shell posts&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
This is important because we have our students use all sorts of tools
and we should be thinking about things like usability but we really
should be thinking about them a little differently. 
&lt;/p&gt;

&lt;p&gt;
First, is it learner friendly. Part of this is cost of
entry. Linux has a high cost of entry. On the other hand, while Emacs
might look uglier than other modern editors, the cost of entry is
pretty much the same as any other editor - click or type a command and then you can use
the mouse and drop down menus to get started. Vim, in my opinion, on
the other hand has a higher cost of entry due to its modal nature. 
&lt;/p&gt;

&lt;p&gt;
So, there's no reason not to use Emacs (vs another editor) but you
might pause before using Linux. My approach is to start as if it were
Windows - use the gui, icons and menus, and then slowly introduce the
command line.
&lt;/p&gt;

&lt;p&gt;
Once your past the cost of entry, the we can think about being learner
friendly. As I mentioned, Linux, not so much. Emacs, sure - just like
any other editor with drop downs that then give you keyboard
equivalents. 
&lt;/p&gt;

&lt;p&gt;
The keyboard equivalents lead us to another part of learner friendly
– discoverability - can you easily discover new things about the
tool. Here Emacs shines. Linux, maybe not so much.
&lt;/p&gt;

&lt;p&gt;
Once past learner friendly we get to user friendly. The core question
is "can I do what I need to and want to do easily." For most people, it
comes down to - the tool I know is user friendly and the one I don't
know and don't want to take the time to know isn't. There are some
things that are cumbersome no matter what, but really, when we say
user friendly, most people mean "what I like." To me, it's a little
more - is the tool expressive and powerful as well.
&lt;/p&gt;

&lt;p&gt;
So, why is this important? First, we shouldn't allow our biases to
color the way we expose our kids to tools but at the same time, we
should pay attention to learnability, cost of entry, discoverability,
and indeed, true user friendliness.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="all" frame="border" border-spacing="10px" padding="10px"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;Low Power&lt;/th&gt;
&lt;th scope="col" class="left"&gt;High Power&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;&lt;b&gt;&lt;b&gt;Low Learnability&lt;/b&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td class="left"&gt;CP/M&lt;/td&gt;
&lt;td class="left"&gt;Linux Shell, Mac Terminal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;b&gt;&lt;b&gt;High Learnability&lt;/b&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td class="left"&gt;Windows / Mac OS GUI&lt;/td&gt;
&lt;td class="left"&gt;Most editors, including Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
So, let's stop with this "your tool isn't easy to use" nonsense. Any
tool we don't know isn't easy to use until we learn it. Let's focus on
the path to learning the useful ones.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cli" label="cli"/>
    <category term="emacs" label="emacs"/>
    <category term="linux" label="linux"/>
    <category term="shell" label="shell"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 15 - Macros</title>
    <id>http://cestlaz.github.io/posts/using-emacs-15-macros/</id>
    <updated>2016-09-02T17:26:02-04:00</updated>
    <published>2016-09-02T17:26:02-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-15-macros/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I originally planned on do some videos on C++ development but I'm just
not feeling it. Probably because I'm excited to be working with my
new class and we're working in Python. We're not going to be using
C+++ for a few months so I'll get to those videos a little later.
&lt;/p&gt;

&lt;p&gt;
Today, I want to cover what I consider a leatherman or multi-tool for
Emacs. Something that isn't perfect for any particular job but can get
almost any job done: Macros.
&lt;/p&gt;

&lt;p&gt;
In their simplest form, macros let you record and play back
keystrokes. 
&lt;/p&gt;

&lt;p&gt;
The video goes over the specifics. 
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Y1oVNBuIoXo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Here are the main functions / keystrokes.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;kmacro-start-macro-or-insert-counter&lt;/td&gt;
&lt;td class="left"&gt;F3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;kmacro-end-and-call-macro&lt;/td&gt;
&lt;td class="left"&gt;F4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;kmacro-name-last-macro&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;insert-kbd-macro&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
This covers most of my use of macros but there's more. You can adjust
or set the counter, edit old macros and there's even a way to have a
macro pause for input in the middle.
&lt;/p&gt;

&lt;p&gt;
Here are some links with more information:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros"&gt;Emacs manual on macros&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ergoemacs.org/emacs/emacs_macro_example.html"&gt;http://ergoemacs.org/emacs/emacs_macro_example.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html"&gt;http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
If you're interested in checking out &lt;a href="http://repl.it"&gt;Repl.it&lt;/a&gt;, which I reference in the
video, check out &lt;a href="http://cestlaz.github.io/posts/new-term-new-tool-replit/#.V8n_Ed9vH0o%0A"&gt;my blog post&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 14 - Thoughts</title>
    <id>http://cestlaz.github.io/posts/using-emacs-14-thoughts/</id>
    <updated>2016-08-17T00:00:00</updated>
    <published>2016-08-17T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-14-thoughts/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Sorry for the incosistancy of the posts. I hope to get to that one
video a week soon but I've still got a hectic couple of weeks ahead.
&lt;/p&gt;

&lt;p&gt;
No new material this week, or at least very little. This week, I talk
about some thoughts on the "Using Emacs" series. 
&lt;/p&gt;

&lt;p&gt;
In the video I talk about Sacha Chua and her work as a leader in the
Emacs community. Check out her stuff here: &lt;a href="http://sachachua.com/blog/"&gt;http://sachachua.com/blog/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the video - I hope you enjoy it.
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/tSx_sGgoVNk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
As always, please leave feedback here or on the video.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 13 - Yasnippet</title>
    <id>http://cestlaz.github.io/posts/using-emacs-13-yasnippet/</id>
    <updated>2016-08-04T00:00:00</updated>
    <published>2016-08-04T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
It turns out that &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;Elpy&lt;/a&gt;, a popular emacs package for python development
is much easier to set up than I remember. It turns out all you need
is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elpy&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elpy-enable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The video shows how to install and a bit of use. I don't think it's a
package I'm going to use much since I use other tools to do similar
things but it's worth checking out. 
&lt;/p&gt;

&lt;p&gt;
The main event this week is &lt;a href="https://github.com/joaotavora/yasnippet"&gt;yasnippet&lt;/a&gt;, a package that lets you expand
text aliases. Let's say you want to put the fairly standard:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
in my file. I can just type &lt;b&gt;&lt;b&gt;ifm&lt;/b&gt;&lt;/b&gt; and then hit the &lt;b&gt;&lt;b&gt;TAB&lt;/b&gt;&lt;/b&gt; key and
it would expand to the above code. Yasnippet also lets you leave
placeholders for variables, function names and more. It's a pretty
neat package.
&lt;/p&gt;

&lt;p&gt;
I use it for boilerplate code. The example in the video shows how I
set up a snippet for the boilerplate code used when creating an
application with the &lt;b&gt;&lt;b&gt;Flask&lt;/b&gt;&lt;/b&gt; python microframework.
&lt;/p&gt;

&lt;p&gt;
Setting up yasnippet is as easy as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and it has built in support for &lt;a href="https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d"&gt;tons of langauges&lt;/a&gt;. You can also easily
create your own snippets. See the documentation for details on the
file format. Just create a text file for the snippet and place it in a
subidectory under the snippets subdirectory of .emacs.d. The name of
the subdirectory should be the name of the emacs mode for which the
snippet is defined. I put up the snippet I use for flask so feel free
to check that out.
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/4aYMa8f6B0o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Yasnippet:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/joaotavora/yasnippet"&gt;Home Page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joaotavora.github.io/yasnippet/"&gt;Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d"&gt;Included snippets&lt;/a&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elpy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/jorgenschaefer/elpy"&gt;Home Page&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flask:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org"&gt;Flask Home Page&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 12 - Flycheck, Jedi, Python</title>
    <id>http://cestlaz.github.io/posts/using-emacs-12-python/</id>
    <updated>2016-07-27T00:00:00</updated>
    <published>2016-07-27T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-12-python/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This week, we're going to look at my setup for Python programming. 
&lt;/p&gt;

&lt;p&gt;
I'm an educator, not a professional developer so I'm not working in
huge code bases with dozens or more files at a time. I do periodically
work in medium size code bases and will talk about cross file
navigation and project management later on. There are also more
powerful emacs Python packages. One being &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy&lt;/a&gt;. Elpy looks pretty cool
but for me, it's overkill.
&lt;/p&gt;

&lt;p&gt;
Today's about the basics.
&lt;/p&gt;

&lt;p&gt;
The first tool I show is &lt;a href="http://www.flycheck.org/en/latest/"&gt;flycheck&lt;/a&gt;. It does code checking on the fly
and supports &lt;a href="http://www.flycheck.org/en/latest/languages.html#flycheck-languages"&gt;tons of languages&lt;/a&gt;. You might have to install some
external checkers though. For instance, I installed &lt;b&gt;&lt;b&gt;pylint&lt;/b&gt;&lt;/b&gt; for
python syntax checking with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pylint
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Cofiguring flycheck is as easy as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
The video all shows how I like to run Python from within emacs.
&lt;/p&gt;

&lt;p&gt;
The other tool I use is &lt;a href="https://github.com/tkf/emacs-jedi"&gt;Jedi&lt;/a&gt;. It provides more extensive completion
for Python.
&lt;/p&gt;

&lt;p&gt;
Here's the setup:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;jedi&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'jedi:ac-setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The last hook sets up the autocomplete. 
&lt;/p&gt;

&lt;p&gt;
For jedi to work, you'll need to install the jedi server which is done
in emacs by running &lt;b&gt;&lt;b&gt;M-x jedi:install-server&lt;/b&gt;&lt;/b&gt;. For that to work,
though, you'll need to have &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;Python Virtualenv&lt;/a&gt; istalled. I did that
with:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;EDIT:&lt;/b&gt;&lt;/b&gt; I just got a report that you might need to also install epc (&lt;b&gt;&lt;b&gt;sudo pip install epc&lt;/b&gt;&lt;/b&gt;).
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/wbj_Wjm1Tuw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Flycheck:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://flycheck.org"&gt;Flycheck home page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/"&gt;Pylint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/"&gt;Flake8&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jedi:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 11 - Reveal.js presentations</title>
    <id>http://cestlaz.github.io/posts/using-emacs-11-reveal/</id>
    <updated>2016-07-19T11:53:15-04:00</updated>
    <published>2016-07-19T11:53:15-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-11-reveal/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Happy to be back after a couple of weeks.
&lt;/p&gt;

&lt;p&gt;
My wife and son spent some time in San Francisco, Mountain View, and
Seattle. The main reason was to see our daughter who's interning out
there for the summer but it was also a great opportunity to catch up
with over 100 former students. If you're interested in seeing more, I
wrote a bit about it &lt;a href="http://cestlaz.github.io/posts/end-to-act-1/#.V45OGt9vGAk"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I was originally going to start talking about Python development but
then saw &lt;a href="https://www.reddit.com/r/emacs/comments/4sp0xs/emacs_org_mode_and_revealjs/"&gt;this&lt;/a&gt; post on reddit about &lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt; and using it with
org-mode. Since reveal.js with org-mode  is my goto presentation tool
I thought I'd do a video on that before getting back to "your
regularly schedueld program."
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/psDpCpcIVYs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
The main package you have to use for reveal.js presentations in
org-mode is org-reveal. The package to install is &lt;b&gt;&lt;b&gt;ox-reveal&lt;/b&gt;&lt;/b&gt;. I also
installed &lt;b&gt;&lt;b&gt;htmlize&lt;/b&gt;&lt;/b&gt; for syntax highlighting. Here's the code from
our configuration file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ox-reveal&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;ox-reveal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-reveal-root&lt;/span&gt; &lt;span class="s"&gt;"http://cdn.jsdelivr.net/reveal.js/3.0.0/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-reveal-mathjax&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;htmlize&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The org-reveal-root setq tells your presentation where to find the
reveal.js code. In this example, we're getting from the cloud. You can
also install it locally.
&lt;/p&gt;

&lt;p&gt;
The org-reveal-mathjax is just so that LaTeX equations will look nice.
&lt;/p&gt;

&lt;p&gt;
I'm hoping the video is pretty self-explanitory and the org-reveal
&lt;a href="https://github.com/yjwen/org-reveal%0A"&gt;home page&lt;/a&gt; is pretty thorough but since the documentation is lagging a
bit behind the code and due to some versioning issues, here are a
couple of things to watch out for:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I made a &lt;b&gt;&lt;b&gt;samples&lt;/b&gt;&lt;/b&gt; folder where I'll put code for this series that
isn't part of the configurations.
&lt;/li&gt;
&lt;li&gt;I showed &lt;b&gt;&lt;b&gt;:frag (roll-in)&lt;/b&gt;&lt;/b&gt; as an example of revealing list items
one at a time. Those parens are important and are needed but weren't
in earlier versions - this took me far too long to figure out. 
&lt;/li&gt;
&lt;li&gt;If you read the docs you'll see that there are many more transitions
and you can mix and match them on a page.
&lt;/li&gt;
&lt;li&gt;You might have to upgrade your emacs packages. If you
&lt;b&gt;&lt;b&gt;list-packages&lt;/b&gt;&lt;/b&gt;  in eamcs it will tell you if you have packages to
upgrade. You mark them for upgrading by typing &lt;b&gt;&lt;b&gt;U&lt;/b&gt;&lt;/b&gt; and then do the
upgrade with &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt;. If this doesn't work, you can try getting rid fo
the &lt;b&gt;&lt;b&gt;elpa&lt;/b&gt;&lt;/b&gt; folder and then re-installing.
&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://github.com/zamansky/mazelesson"&gt;mazelesson&lt;/a&gt; sample presentation shows more features, many that we
haven't covered yet. Check it out but remember that it's for an
earlier version of org-reveal.
&lt;/li&gt;
&lt;li&gt;Github pages and rawgit are cool.
&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;
Hope you enjoy this. Please add any reveal.js tips and tricks of your
own.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Reveal.js related linls:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js home page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yjwen/org-reveal%0A"&gt;org-reveal home page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/zamansky/mazelesson"&gt;Sample org reveal site (mazelesson from video)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;rawgit.com - serving stuff from github
&lt;/li&gt;
&lt;li&gt;Github pages: &lt;a href="https://pages.github.com/"&gt;https://pages.github.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 10 - org init files</title>
    <id>http://cestlaz.github.io/posts/using-emacs-10-org-init/</id>
    <updated>2016-07-01T00:00:00</updated>
    <published>2016-07-01T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-10-org-init/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'll be traveling for the next couple of weeks so I probably won't
have time for another video until mid to late July. I'll probably
write a post about this series and do some regular blogging over that
time but probably no new videos for a couple of weeks.
&lt;/p&gt;

&lt;p&gt;
Also, a couple of notes about the series:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Instead of making a separate git branch for each episode, I'm just
adding on to the master branch on GitHub. If you're not familiar
with Git and GitHub don't worry about this. Hardly anyone will
notice a difference.
&lt;/li&gt;
&lt;li&gt;If this theme doesn't show well on video, please let me know, I'll
change it.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Ok, now to this installments video.
&lt;/p&gt;

&lt;p&gt;
It talks about using org-mode to store our emacs init file.
&lt;/p&gt;

&lt;p&gt;
The first key is that you can put code-blocks in org-mode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC emacs-lisp
(emacs-lisp code goes here)
(more emacs lisp goes here)
(and you can have even more here)
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Since it's elisp you can run the individual line using the usual &lt;b&gt;&lt;b&gt;C-x C-e&lt;/b&gt;&lt;/b&gt;
but you can run the entire block by placing your cursor anywhere in
the block and typing &lt;b&gt;&lt;b&gt;C-c C-c&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
One minor annoyance about editing code blocks is that it doesn't do
syntax highlighting or auto indentation. To solve this, emacs lets you
pull up an editing buffer by typing &lt;b&gt;*C-c '*&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
You're supposed to be able to save your changes with &lt;b&gt;*C-c '*&lt;/b&gt; again
or &lt;b&gt;&lt;b&gt;C-x C-s&lt;/b&gt;&lt;/b&gt; and kill the buffer without saving changes with &lt;b&gt;&lt;b&gt;C-x
C-k&lt;/b&gt;&lt;/b&gt; 
but the version of org-mode that came with my version of emacs
didn't support it - I had to install a newer version of org-mode from
melpa. 
&lt;/p&gt;

&lt;p&gt;
I couldn't figure out how to do this via use-package, but if this
problem happens to you, you can just type &lt;b&gt;&lt;b&gt;Alt-x package-install&lt;/b&gt;&lt;/b&gt;
and then type &lt;b&gt;&lt;b&gt;org&lt;/b&gt;&lt;/b&gt; and hit enter to install it.
&lt;/p&gt;

&lt;p&gt;
Once you do that, you might have to reload emacs but then everything
should work. 
&lt;/p&gt;

&lt;p&gt;
This lets us move most of our configuration to a separate file. We're
calling it &lt;b&gt;&lt;b&gt;myinit.org&lt;/b&gt;&lt;/b&gt; and storing it in our .emacs.d
directory. You can use any name &lt;b&gt;&lt;b&gt;except&lt;/b&gt;&lt;/b&gt; init.org as I mentioned in
the video.
&lt;/p&gt;

&lt;p&gt;
The file's a little big so here's a link to it:
&lt;a href="https://github.com/zamansky/using-emacs/blob/master/myinit.org"&gt;https://github.com/zamansky/using-emacs/blob/master/myinit.org&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Notice how GitHub formats it to look all nice.
&lt;/p&gt;

&lt;p&gt;
Here's the raw file so you can see the gory details:
&lt;a href="https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org"&gt;https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Since we're loading the file in overview mode, when we load it in
emacs we see:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;interface&lt;/span&gt; &lt;span class="nv"&gt;tweaks&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;which&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Org&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Ace&lt;/span&gt; &lt;span class="nv"&gt;windows&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;easy&lt;/span&gt; &lt;span class="nv"&gt;window&lt;/span&gt; &lt;span class="nv"&gt;switching&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Swiper&lt;/span&gt; &lt;span class="nv"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;Ivy&lt;/span&gt; &lt;span class="nv"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;Counsel&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Avy&lt;/span&gt; &lt;span class="nv"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;navigate&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;searching&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;letter&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;screen&lt;/span&gt; &lt;span class="k"&gt;and &lt;/span&gt;&lt;span class="nv"&gt;jumping&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Autocomplete&lt;/span&gt;
&lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Themes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We can tab open and close each section and add text to clarify things
around the code blocks.
&lt;/p&gt;

&lt;p&gt;
All that's left in &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-load-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/myinit.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
With the last line performing the magic of loading our org file and
running all the code blocks.
&lt;/p&gt;

&lt;p&gt;
Finally, we added a couple of small interface changes:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The first line lets us type y or n instead of yes or no and the second
let's us reload a file into our current buffer using the &lt;b&gt;&lt;b&gt;f5&lt;/b&gt;&lt;/b&gt; key.
&lt;/p&gt;

&lt;p&gt;
I hope you enjoy this video and find it useful:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/EX9PKK3EMaw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 9 - Themes</title>
    <id>http://cestlaz.github.io/posts/using-emacs-9-themes/</id>
    <updated>2016-06-28T00:00:00</updated>
    <published>2016-06-28T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-9-themes/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Now that we have a nice basic configuration, let's make Emacs look a
little nicer.
&lt;/p&gt;

&lt;p&gt;
Like most editors, Emacs can be extensively themed. 
&lt;/p&gt;

&lt;p&gt;
As shown in the video, you can quickly see the built in themes using
the &lt;b&gt;&lt;b&gt;customize-themes&lt;/b&gt;&lt;/b&gt; command.
&lt;/p&gt;

&lt;p&gt;
You can load one of these themes by using the &lt;b&gt;&lt;b&gt;load-theme&lt;/b&gt;&lt;/b&gt; command
interactively or, more likely by putting:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'leuven&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
in your init.el. The above code loads the built in &lt;b&gt;&lt;b&gt;leuven&lt;/b&gt;&lt;/b&gt; theme.
&lt;/p&gt;

&lt;p&gt;
I prefer the &lt;b&gt;&lt;b&gt;zenburn&lt;/b&gt;&lt;/b&gt; theme. For that, you have to load the zenburn
package. Here's the code in our init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;zenburn-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'zenburn&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the video, I also mention the color theme package.
&lt;/p&gt;

&lt;p&gt;
So, customize away.
&lt;/p&gt;

&lt;p&gt;
In the links, you'll find some links to some Emacs theme gallery sites
to help find something you like.
&lt;/p&gt;

&lt;p&gt;
Thanks for reading and watching and as always, please leave comments,
suggestions and favorite themes.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/cod2ABxlrV8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Zenburn theme home page: &lt;a href="https://github.com/bbatsov/zenburn-emacs"&gt;https://github.com/bbatsov/zenburn-emacs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Emacs theme gallery: &lt;a href="https://pawelbx.github.io/emacs-theme-gallery/"&gt;https://pawelbx.github.io/emacs-theme-gallery/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Another one: &lt;a href="https://emacsthemes.com/"&gt;https://emacsthemes.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-9-themes"&gt;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 8 - Autocomplete</title>
    <id>http://cestlaz.github.io/posts/using-emacs-8-autocomplete/</id>
    <updated>2016-06-26T00:00:00</updated>
    <published>2016-06-26T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Out of the box, Emacs supports various types of completion.
&lt;/p&gt;

&lt;p&gt;
Tab completion for filenames and commands basically work right out of
the box and Emacs has built in modes like &lt;a href="https://www.emacswiki.org/emacs/AbbrevMode"&gt;Abbrev&lt;/a&gt;, &lt;a href="https://www.emacswiki.org/emacs/HippieExpand"&gt;Hippie Expand&lt;/a&gt;, and
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html"&gt;Dabbrev&lt;/a&gt; provide a manner of completion for in buffer text.
&lt;/p&gt;

&lt;p&gt;
I briefly show Dabbrev (Dynamic Abbrevs) in the video and if you're
interested in the others, follow the links.
&lt;/p&gt;

&lt;p&gt;
We saw ow the built in Ido mode and third party packages like Ivy,
which I prefer, and Helm make for better completions on functions,
filenames, and the like and Emacs also has third party packages for in
buffer completion. 
&lt;/p&gt;

&lt;p&gt;
The two main contenders are &lt;a href="https://github.com/auto-complete/auto-complete"&gt;auto-complete Mode&lt;/a&gt; and &lt;a href="http://company-mode.github.io/%0A"&gt;company Mode&lt;/a&gt;. I use
auto-complete, others swear by company. The video shows the basics of
auto-complete mode but check both out and decide for yourself.
&lt;/p&gt;

&lt;p&gt;
If you feel strongly about one or the other, please share in the
comments.
&lt;/p&gt;


&lt;p&gt;
Here's a basic configuration:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We'll modify this as move along in the series.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/5FBVhdyU4dA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Autocomplete home page: &lt;a href="https://github.com/auto-complete/auto-complete"&gt;https://github.com/auto-complete/auto-complete&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Autocomplete manual: &lt;a href="http://auto-complete.org/doc/manual.html"&gt;http://auto-complete.org/doc/manual.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete"&gt;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 7- Navigation with Avy</title>
    <id>http://cestlaz.github.io/posts/using-emacs-7-avy/</id>
    <updated>2016-06-24T00:00:00</updated>
    <published>2016-06-24T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-7-avy/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here's a really cool navigation method that I've been meaning to use
more. Avy is a replacement for ace-jump mode which is an
implementation of easymotion, a vim plugin.
&lt;/p&gt;

&lt;p&gt;
It's pretty cool and lets you quickly navigate to any spot on the
screen.
&lt;/p&gt;

&lt;p&gt;
After triggering avy, or more specifically the &lt;b&gt;&lt;b&gt;avy-goto-char&lt;/b&gt;&lt;/b&gt;
function, emacs prompts you for a single character. When you type it,
all instances of the character that start out words change to a
highlighted letter. Type the highlighted letter and you jump to that
location.
&lt;/p&gt;

&lt;p&gt;
The avy package comes with a bunch of options including a 2 character
search variant, a timed variant which drops into search, and more.
&lt;/p&gt;

&lt;p&gt;
The Avy home page has all the details.
&lt;/p&gt;


&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/ziytRbASKeU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Here's the configuration I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;avy&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-s"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;avy-goto-char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can check the &lt;a href="https://github.com/abo-abo/avy"&gt;avy home page&lt;/a&gt; for their recommended configuration
which you get by configuring this way instead:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;avy&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;avy-setup-default&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Avy: &lt;a href="https://github.com/abo-abo/avy"&gt;https://github.com/abo-abo/avy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-7-avy"&gt;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Better Comments or tooling as a time sink</title>
    <id>http://cestlaz.github.io/posts/better-comments/</id>
    <updated>2016-06-22T18:09:17-04:00</updated>
    <published>2016-06-22T18:09:17-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/better-comments/"/>
    <summary type="html">&lt;p&gt;
The other day my friend and fellow CS Ed Blogger &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt; wrote
about &lt;a href="http://blog.acthompson.net/2016/06/better-comments-in-visual-studio.html"&gt;Better Comments&lt;/a&gt;, an extension for visual studio that displays
comments that are marked up  with special characters in order to
highlight them. Here's a screenshot:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/omsharp/BetterComments/master/screenshots/ClassificationC.png" alt="ClassificationC.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
So, the first thing I though was "I bet emacs could do that pretty
easily" and down the rabbit hole I went.
&lt;/p&gt;

&lt;p&gt;
I had to figure out something about how emacs themes and font-locking
(emacs for syntax highlighting) works and of course spent far too much
time learning about Emacs, my favored tool, rather than getting actual
work done, but I came up with this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-foreground&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="s"&gt;"#00ff00"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-foreground&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-attribute&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt;
		    &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;:strike-through&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"adds a few special keywords"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-lock-add-keywords&lt;/span&gt; 
   &lt;span class="nv"&gt;nil&lt;/span&gt;
   &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"cx \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ct \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ci \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'js2-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'js-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's a hack but it does indeed work. In action, it looks something
like this:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/3TLw1yOMKMc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Truth be told, it really colors anything following cx, ct, or ci, not
just in comments – I have to look a bit more into how emacs handles
comments to figure that one out.
&lt;/p&gt;

&lt;p&gt;
In any event, even though I spent too much time doing this, it's nice
to know I'm working in a tool in which I can.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;UPDATE:&lt;/b&gt;&lt;/b&gt; Thanks to user ncsuwolf on /r/emacs on reddit, here's a
fully working, more properly done solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-strike&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:strike-through&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="s"&gt;"For strike-through comments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-important&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"#00ff00"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="s"&gt;"For important"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-todo&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="s"&gt;"For todo comments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
		&lt;span class="s"&gt;"adds a few special keywords"&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-lock-add-keywords&lt;/span&gt;
		 &lt;span class="nv"&gt;nil&lt;/span&gt;
		 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+x[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+t[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+i[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 6 - Searching a Swiper</title>
    <id>http://cestlaz.github.io/posts/using-emacs-6-swiper/</id>
    <updated>2016-06-20T00:00:00</updated>
    <published>2016-06-20T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-6-swiper/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video is all about using incremental search to navigate through your emacs buffers.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/0mwwN0S1dnQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
You can use the default incremental searchb, bound to &lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt; for
isearch-forward &lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt; to search backwards (reverse).
&lt;/p&gt;

&lt;p&gt;
They work really well as is but I prefer using &lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt;. The video demos
both and the &lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt; home page has loads of details.
&lt;/p&gt;

&lt;p&gt;
Part of the Swiper package includes ivy and counsel which I use instead of ido.
&lt;/p&gt;

&lt;p&gt;
The video also mentions lorem-ipsum mode for generating text quickly and &lt;b&gt;&lt;b&gt;describe-mode&lt;/b&gt;&lt;/b&gt; in the help system.
&lt;/p&gt;

&lt;p&gt;
Here's the code we added for swiper:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; it looks like counsel is a requirement for swiper&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;swiper&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ivy-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ivy-use-virtual-buffers&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="s"&gt;"\C-s"&lt;/span&gt; &lt;span class="ss"&gt;'swiper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c C-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ivy-resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f6&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ivy-resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"M-x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-M-x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-find-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-describe-function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; v"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-describe-variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-load-library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f2&amp;gt; i"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-info-lookup-symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f2&amp;gt; u"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-unicode-char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c g"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-git&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c j"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-git-grep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-ag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-locate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-S-o"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-rhythmbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;read-expression-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-expression-history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and we commented out the ido stuff:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; using swiper so ido no longer needed&lt;/span&gt;
&lt;span class="c1"&gt;;;(setq ido-enable-flex-matching t)&lt;/span&gt;
&lt;span class="c1"&gt;;;(setq ido-everywhere t)&lt;/span&gt;
&lt;span class="c1"&gt;;;(ido-mode 1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you want to see a nice video specifically on swiper by the author, here it is:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VvnJQpTFVDc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;



&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Swiper: &lt;a href="https://github.com/abo-abo/swiper"&gt;&lt;/a&gt;&lt;a href="https://github.com/abo-abo/swiper"&gt;https://github.com/abo-abo/swiper&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The Swiper Manual: &lt;a href="http://oremacs.com/swiper/"&gt;http://oremacs.com/swiper/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-6-swiper"&gt;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 5 - Windows</title>
    <id>http://cestlaz.github.io/posts/using-emacs-5-windows/</id>
    <updated>2016-06-14T00:00:00</updated>
    <published>2016-06-14T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-5-windows/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Sorry for the delay in getting this next video / post up. I spent the
last part of last week at &lt;a href="http://go.personaldemocracy.com/"&gt;The Personal Democracy Forum 2016&lt;/a&gt; which is really an exceptional conference.
&lt;/p&gt;

&lt;p&gt;
I posted a bit about it in my &lt;a href="http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/#.V2B9th9vGAk"&gt;last post&lt;/a&gt; and plan to write some more on it, but for now, more Emacs.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D6OUMVbPKSA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
This video concerns using windows. By using buffers and windows and
the basics you got from the tutorial, you shouldn't have to ever leave emacs.
&lt;/p&gt;

&lt;p&gt;
From here, we'll be able to start going over effective Emacs and then
using it for things like development or document creation.
&lt;/p&gt;


&lt;p&gt;
Some of the key window bindings:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="left"&gt;what it does&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-x 2&lt;/td&gt;
&lt;td class="left"&gt;split-window-below (vertically)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 3&lt;/td&gt;
&lt;td class="left"&gt;split-window-right (horizontally)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 0&lt;/td&gt;
&lt;td class="left"&gt;delete-window (this one)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 1&lt;/td&gt;
&lt;td class="left"&gt;delete-other-windows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x o&lt;/td&gt;
&lt;td class="left"&gt;other-window (moves foxus to the next window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
You also have frames which use &lt;b&gt;&lt;b&gt;C-x 5&lt;/b&gt;&lt;/b&gt; as the prefix, so &lt;b&gt;&lt;b&gt;C-x 5 2&lt;/b&gt;&lt;/b&gt;
creats a new frame and &lt;b&gt;&lt;b&gt;C-x 5 1&lt;/b&gt;&lt;/b&gt; closes the other frames.
&lt;/p&gt;

&lt;p&gt;
Remember, you can always use the help system, in particular &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
to describe a key and &lt;b&gt;&lt;b&gt;C-x f&lt;/b&gt;&lt;/b&gt; to describe a function.
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; can be a little clunky so some people like to use
&lt;b&gt;&lt;b&gt;windmove&lt;/b&gt;&lt;/b&gt; which lets you move between windows by holding the shift
key and with the arrows. To set that up, you can add this to your
&lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;windmove-default-keybindings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I prefer using &lt;b&gt;&lt;b&gt;ace-window&lt;/b&gt;&lt;/b&gt; mode which still uses &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; add this to init.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ace-window&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;remap&lt;/span&gt; &lt;span class="nv"&gt;other-window&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;'ace-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;custom-set-faces&lt;/span&gt;
     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;aw-leading-char-face&lt;/span&gt;
       &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;ace-jump-face-foreground&lt;/span&gt; &lt;span class="nv"&gt;:height&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; 
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The other mode I mention in the video is winner mode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;winner-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which will allow you to use &lt;b&gt;&lt;b&gt;C-c left or right&lt;/b&gt;&lt;/b&gt; to move through past
window configurations.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Ace window mode: &lt;a href="https://github.com/abo-abo/ace-window"&gt;https://github.com/abo-abo/ace-window&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-5-windows"&gt;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 4 - Buffers</title>
    <id>http://cestlaz.github.io/posts/using-emacs-4-buffers/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-4-buffers/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/v5eTK5lC0xs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Now that we're past the intro material, we'll start looking at emacs
features one at a time. This will let you focus on using the one
feature we're covering, fit it into your work flow, and really get
comfortable with it. 
&lt;/p&gt;

&lt;p&gt;
This time we'll dive into using Emacs effectively with buffers.
&lt;/p&gt;

&lt;p&gt;
Watch the video and then make a real effort to use buffers over the
next few emacs sessions. Before you know it, they'll be a natural part
of your work flow.
&lt;/p&gt;

&lt;p&gt;
The idea of incrementally learning a tool this way seems to be called
&lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;developing micro-habits&lt;/a&gt; and I first read about the idea from &lt;a href="https://twitter.com/sachac"&gt;Sacha
Chua&lt;/a&gt; who is an amazing member of the emacs community.
&lt;/p&gt;

&lt;p&gt;
When seeing beginners, I'll frequently observe this work flow:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Open a terminal
&lt;/li&gt;
&lt;li&gt;Load emacs on a file
&lt;/li&gt;
&lt;li&gt;Edit the file
&lt;/li&gt;
&lt;li&gt;Save and quit emacs
&lt;/li&gt;
&lt;li&gt;Try to compile and run the program (since usually this is in a programming class)
&lt;/li&gt;
&lt;li&gt;repeat
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If the beginner needs to see multiple files at once, they fire up multiple separate emacs.
&lt;/p&gt;

&lt;p&gt;
All of this causes me physical pain.
&lt;/p&gt;

&lt;p&gt;
In emacs, your editor can load several buffers at once, each
associated with a separate file. You can quickly switch between them,
search across them, and more. The video will get you started.
&lt;/p&gt;

&lt;p&gt;
The video also mentions &lt;b&gt;ido&lt;/b&gt; mode. To set up &lt;b&gt;ido&lt;/b&gt; mode, add the
following code to your init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-enable-flex-matching&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-everywhere&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ido-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And here's a great little write up on it by &lt;a href="https://www.masteringemacs.org/reading-guide"&gt;Mickey Petersen&lt;/a&gt;:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://www.masteringemacs.org/article/introduction-to-ido-mode"&gt;https://www.masteringemacs.org/article/introduction-to-ido-mode&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
As I mentioned in the video, I actually use another mode for completions (&lt;a href="https://github.com/abo-abo/swiper"&gt;swiper&lt;/a&gt;),
which I'll cover in a future video and another popular option is &lt;a href="https://github.com/emacs-helm/helm"&gt;helm&lt;/a&gt;
which we'll also cover.
&lt;/p&gt;

&lt;p&gt;
For buffers, the keys to remember are:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Key&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-x b&lt;/td&gt;
&lt;td class="left"&gt;switch-buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x C-b&lt;/td&gt;
&lt;td class="left"&gt;list-buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
To use ibuffer, which is more powerful than list-buffers you can add
either:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'list-buffers&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; make ibuffer default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Or if you want to open ibuffer in another Window:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'list-buffers&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; make ibuffer default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are a couple of useful links on ibuffer and buffer switching:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://ergoemacs.org/emacs/emacs_buffer_switching.html"&gt;http://ergoemacs.org/emacs/emacs_buffer_switching.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/"&gt;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Finally, if you like a tab bar, you can add the following to your
init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;tabbar&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tabbar-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There's also a package &lt;a href="https://github.com/mattfidler/tabbar-ruler.el"&gt;tabbar-ruler&lt;/a&gt; which is supposed to make the
tabbar look nicer but since I don't use the tabbar at all, I haven't
checked it out.
&lt;/p&gt;

&lt;p&gt;
Hope this gets you using emacs more effectively.
&lt;/p&gt;

&lt;p&gt;
Stay tuned for our next video on window management.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-4-buffers"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-4-buffers"&gt;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Intro to Org Mode</title>
    <id>http://cestlaz.github.io/posts/using-emacs-2-org/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-2-org/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/x5KiYDd9s8k?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
This video is a brief introduction to org-mode, a mode I use for all
sorts of things.
&lt;/p&gt;

&lt;p&gt;
We'll dive into org-mode later in the series. Right now I just want
you to see the basics since we'll be using org-mode for any notes that
are written up during this series. 
&lt;/p&gt;

&lt;p&gt;
Actually, all my blog posts are written in org-mode.
&lt;/p&gt;

&lt;p&gt;
Here are the important lines to add to your Emacs &lt;b&gt;init.el&lt;/b&gt; file  to
get the nice looking bullets when in org-mode:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;org-bullets&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-bullets-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
About a month ago, Emacs user Harry Schwartz gave a nice overview talk
on org-mode. If you want to get a better idea as to all the things you
can do with it, check it out: &lt;a href="https://www.youtube.com/watch?v=SzA2YODtgK4"&gt;https://www.youtube.com/watch?v=SzA2YODtgK4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Next time, we'll look at a little Elisp. After that, we'll dive in to
using Emacs effectively and efficiently. 
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;https://github.com/zamansky/using-emacs/tree/lesson-2-org&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/sabof/org-bullets"&gt;org-bullets&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 3 - How to think about Emacs</title>
    <id>http://cestlaz.github.io/posts/using-emacs-3-elisp/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-3-elisp/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nyQxRarVYH4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
&lt;/p&gt;

&lt;p&gt;
In some ways, it's like those new fangled interactive programming environments where you type in code and the updates are reflected instantly. 
&lt;/p&gt;

&lt;p&gt;
In this video, I try to explain the way I think about Emacs and why it's so cool.
&lt;/p&gt;

&lt;p&gt;
The only change we made to our configuration was adding:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gets rid of the tool bar at the top.
&lt;/p&gt;

&lt;p&gt;
Next time, we start talking about efficiently using Emacs.
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-3-elisp"&gt;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Setting up the Package Manager</title>
    <id>http://cestlaz.github.io/posts/using-emacs-1-setup/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-1-setup/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video will step you through setting up Emacs to use &lt;a href="http://melpa.org/#/"&gt;MELPA&lt;/a&gt; for packages.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/49kBWM3RQQ8?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
We configured emacs by creating a folder named &lt;b&gt;.emacs.d&lt;/b&gt; and creating a
file within it named &lt;b&gt;init.el&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
Here's the contents of that file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
	&lt;span class="nv"&gt;:config&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The last two &lt;b&gt;inituse-package&lt;/b&gt; clauses install two helpful packages:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;try&lt;/b&gt;: let's you try packages without installing them.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;which-key&lt;/b&gt;: brings up help on key combinations.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Relavent links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Melpa and packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://melpa.org"&gt;&lt;/a&gt;&lt;a href="http://melpa.org"&gt;http://melpa.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/larstvei/Try"&gt;try&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Introduction</title>
    <id>http://cestlaz.github.io/posts/using-emacs-introduction/</id>
    <updated>2016-05-23T10:07:18-04:00</updated>
    <published>2016-05-23T10:07:18-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-introduction/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'm sure I've mentioned that I've been an Emacs wonk for
decades. Since the mid-80's in fact. I've spent time using other
editors, word processors, and development tools but always find my way
back.
&lt;/p&gt;

&lt;p&gt;
I recommend that budding computer science students develop a good tool
set and encourage them to explore Emacs but while it's pretty easy to
load Emacs and find your way around, particularly if you use the mouse
and menus there isn't a clear path to take you from beginner to using
it as an efficient tool let alone customizing it.
&lt;/p&gt;

&lt;p&gt;
Inspired by &lt;a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/featured"&gt;Mattias Petter Johansson&lt;/a&gt;, or MPJ who make a weekly video,
I decided to try to create a series of YouTube videos and matching
blog posts. I'll try to post one a week and I'll try to keep the
videos, at least after the first couple to just a few minutes and have
them focus on &lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;micro-habits&lt;/a&gt; - one or two small things that you can
bring to your work flow and internalize.
&lt;/p&gt;

&lt;p&gt;
The first three four (this one and the next three) will focus on
setting things up. After this post we'll have
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Setting up the package manager
&lt;/li&gt;
&lt;li&gt;Intro to org-mode (just so that you recognize the markup)
&lt;/li&gt;
&lt;li&gt;Intro to Elisp (just so you have an idea of those configuration
lines)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then we're off to the races. Here's what I'm thinking about for
the first few topics after the above mentioned ones:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Efficient Navigation
&lt;/li&gt;
&lt;li&gt;Windows and Buffers
&lt;/li&gt;
&lt;li&gt;Theming
&lt;/li&gt;
&lt;li&gt;Auto Completion
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then a series of short topics to show some of my favorite editing
tools. We'll also cover some larger topics including:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Python Development
&lt;/li&gt;
&lt;li&gt;C/C++ Development
&lt;/li&gt;
&lt;li&gt;Document Preparation
&lt;/li&gt;
&lt;li&gt;Scheduling / Calendaring / Note Taking
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll put together an index to these posts along with any ancillary
materials here: &lt;a href="file:///stories/emacs"&gt;&lt;/a&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Getting started&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This series is going to assume you've installed emacs and worked your
way through the included tutorial.
&lt;/p&gt;

&lt;p&gt;
To help you get to that point, here are some links to posts and sites
that I've found useful:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.braveclojure.com/basic-emacs/"&gt;http://www.braveclojure.com/basic-emacs/&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.masteringemacs.org/article/beginners-guide-to-emacs"&gt;https://www.masteringemacs.org/article/beginners-guide-to-emacs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs"&gt;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux"&gt;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here's a 10 minute getting started guide:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/K3_SFerNIeI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
So, stay tuned.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Blogging with Emacs, Jekyll and Nikola</title>
    <id>http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/</id>
    <updated>2016-04-17T13:12:26-04:00</updated>
    <published>2016-04-17T13:12:26-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Switched over from &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; to &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; yesterday.
&lt;/p&gt;

&lt;p&gt;
One of the primary reasons was that I got fed up with managing a Ruby
development environment across all my machines. In spite of my
rantings, I'm sure Ruby and Ruby installs are fine - it's just
something that I'd have to deal with on a recurring basis for one
specific task - other than for Jekyll blogging, I don't use Ruby.
&lt;/p&gt;

&lt;p&gt;
So while a platform based on Python - generally my go to language,
made sense, the other driving force for the switch was the fact that
&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; and &lt;a href="http://orgmode.org/"&gt;org-mode&lt;/a&gt; have become such major parts of my workflow and
productivity.
&lt;/p&gt;

&lt;p&gt;
What do I use org-mode for?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;lesson planning
&lt;/li&gt;
&lt;li&gt;document preparation (instead of LaTeX)
&lt;/li&gt;
&lt;li&gt;note taking
&lt;/li&gt;
&lt;li&gt;blogging
&lt;/li&gt;
&lt;li&gt;email (with mu4e)
&lt;/li&gt;
&lt;li&gt;managing my schedule
&lt;/li&gt;
&lt;li&gt;tracking bookmarks
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and probably a lot more.
&lt;/p&gt;

&lt;p&gt;
Jekyll is actually a really nice tool. It's simple. You put together a
simple directory structure: Templates in _layouts, blog posts in
_posts, drafts in _drafts. Other directories that start with an
underscore are ignored and everything else is copied up to your site.
&lt;/p&gt;

&lt;p&gt;
I love that it's "close to the metal" You can put in html files with
some meta information up top or markdown. 
&lt;/p&gt;

&lt;p&gt;
You can take a look at my old site at
&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;&lt;/a&gt;&lt;a href="https://github.com/cestlaz/cestlaz.github.io-jekyll"&gt;https://github.com/cestlaz/cestlaz.github.io-jekyll&lt;/a&gt; if you want to
take a look.
&lt;/p&gt;

&lt;p&gt;
The beauty is that you just push your files up to GitHub and it
automatically runs Jekyll and builds your site (&lt;a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/"&gt;more info here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The problem is that Jekyll doesn't play well with org-mode and
org-markup so my workflow became something like this
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Create a post &lt;b&gt;&lt;b&gt;something.org&lt;/b&gt;&lt;/b&gt; in the _org directory.
&lt;/li&gt;
&lt;li&gt;From within emacs, publish it. I've configured org-mode to publish
by exporting the org-mode markup file to html and saving it in the
_drafts directory.
&lt;/li&gt;
&lt;li&gt;If it looks good, copy and rename the file from _drafts to the
_posts directory and push it up to GitHub.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
A little clunky, but it works. The bigger problem was the amount of
time I'd spend putting html blocks into my org formatted posts to get
them to look the way I wanted (or at least close enough).
&lt;/p&gt;

&lt;p&gt;
Enter Nikola.
&lt;/p&gt;

&lt;p&gt;
Nikola's a much more powerful tool. It does much more but as a result
is much more complex. Normally, that's not my style but in this case
since It's Python, things balance out.
&lt;/p&gt;

&lt;p&gt;
I still have to figure out the entire templating system and all the
plugins but getting started was pretty quick.
&lt;/p&gt;

&lt;p&gt;
The big win is that Nikola supports a ton of formats for your posts
and pages. Native org-mode support for me was what did it for me. On top of
that, although I haven't tested it yet, is that there's also an
org-mode plugin to export to Nikola restructure text.
&lt;/p&gt;

&lt;p&gt;
My new workflow:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Write the post as an org-mode file.
&lt;/li&gt;
&lt;li&gt;run &lt;b&gt;&lt;b&gt;nikola github_deploy&lt;/b&gt;&lt;/b&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
And that's it. You can look at my Nikola site here:
&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;&lt;/a&gt;&lt;a href="https://github.com/cestlaz/cestlaz.github.io"&gt;https://github.com/cestlaz/cestlaz.github.io&lt;/a&gt;.
The source code is in the &lt;b&gt;&lt;b&gt;src&lt;/b&gt;&lt;/b&gt; branch, the actual rendered blog in
the &lt;b&gt;&lt;b&gt;master&lt;/b&gt;&lt;/b&gt; branch.
&lt;/p&gt;

&lt;p&gt;
So far, I'm pretty happy with the setup.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="mathjax" label="mathjax"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Know your tools - intermediate Emacs</title>
    <id>http://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/</id>
    <updated>2015-10-28T00:00:00</updated>
    <published>2015-10-28T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
A good workman is known by his tools, or so the saying goes. My tools
of choice are my terminal shell and Emacs.
&lt;/p&gt;

&lt;p&gt;
I suppose if I was a full time developer working with a limited set of
tools I might like an IDE like JetBrains or Eclipse but no matter how
many alternatives I try, I always end back in Emacs.
&lt;/p&gt;

&lt;p&gt;
I recommend that my students spend time not only in Emacs but also in
tools like Vim or Sublime Text.
&lt;/p&gt;

&lt;p&gt;
I do warn them, though, that as a commercial product, Sublime might
not be around forever, I mean before Sublime was sublime, TextMate was
sublime. If you go back to the 1980s, Brief was sublime. 
&lt;/p&gt;

&lt;p&gt;
Commercial tools come and go but I've been using Emacs since the mid
eighties.
&lt;/p&gt;

&lt;p&gt;
A few students have been asking me for some pointers on going past the
basics of Emacs so here we go.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-orgheadline2" class="outline-2"&gt;
&lt;h2 id="orgheadline2"&gt;Notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline2"&gt;
&lt;p&gt;
This post just has some getting started notes. There are mode powerful
and advanced ways of doing most things.
&lt;/p&gt;

&lt;p&gt;
I think I'll just talk about a few of the basics here and will write
about code development with Emacs in a later post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline3" class="outline-2"&gt;
&lt;h2 id="orgheadline3"&gt;Starting out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline3"&gt;
&lt;p&gt;
Once you're OK with the basics (by using the built in tutorial or
on line resources) start to fore yourself to get to know:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-3"&gt;
&lt;h3 id="orgheadline4"&gt;Buffers&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgheadline4"&gt;
&lt;p&gt;
when you find a new file &lt;b&gt;&lt;b&gt;(C-x C-f)&lt;/b&gt;&lt;/b&gt; it opens it into a new
buffer. You can also open a new buffer using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and rather than
selecting a buffer typing in a new buffer name.
&lt;/p&gt;

&lt;p&gt;
Each buffer can hold a file and you can switch quickly between them
using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and hitting &lt;b&gt;&amp;lt;Enter&amp;gt;&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
You can kill the current buffer with &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Using buffers lets you edit multiple files in a project quickly and
efficiently.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline5" class="outline-3"&gt;
&lt;h3 id="orgheadline5"&gt;Windows&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgheadline5"&gt;
&lt;p&gt;
Your Emacs frame can be split into multiple windows. &lt;b&gt;&lt;b&gt;C-x 2&lt;/b&gt;&lt;/b&gt; splits
the window top and bottom, &lt;b&gt;&lt;b&gt;C-x3&lt;/b&gt;&lt;/b&gt; left and right. You can switch
between windows using &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; for other window. Switching to one
window is done with &lt;b&gt;&lt;b&gt;C-x 1&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgheadline6" class="outline-2"&gt;
&lt;h2 id="orgheadline6"&gt;Getting Help&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline6"&gt;
&lt;p&gt;
Get to know the built in help. You can always use functions like
&lt;b&gt;&lt;b&gt;M-x describe-function&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;M-x describe-key&lt;/b&gt;&lt;/b&gt; and of course
you can use completion to help speed things up but the help functions
are bound to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;C-h k  for describe key&lt;/li&gt;
&lt;li&gt;C-h f  for describe function&lt;/li&gt;
&lt;li&gt;C-h a for search for command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can usually type &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt; to close the help.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline7" class="outline-2"&gt;
&lt;h2 id="orgheadline7"&gt;Navigation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline7"&gt;
&lt;p&gt;
Use search for navigation rather than arrow keys.
&lt;/p&gt;

&lt;p&gt;
This can change the way you edit. 
&lt;/p&gt;

&lt;p&gt;
For example ,if I wanted to go up to the word Navigation, above,
rather than using traditional motion keys, I'd do a reverse search
(&lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt;) and search for Nav.
&lt;/p&gt;

&lt;p&gt;
Incremental search forward (&lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt;) and back are your friends.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline8" class="outline-2"&gt;
&lt;h2 id="orgheadline8"&gt;Packages&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline8"&gt;
&lt;p&gt;
You can check out my emacs configuration here: 
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/zamansky/dotemacs"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/dotemacs"&gt;https://github.com/zamansky/dotemacs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
You can find basic installation instructions there or you can use the
interactive package manager, invoking it with &lt;b&gt;&lt;b&gt;M-x list-packages&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Some of my favorite general purpose packages are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt; - for navigation and finding files&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nflath/hungry-delete"&gt;Hungry Delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/magnars/expand-region.el"&gt;Expand Region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/ace-window"&gt;Ace Window&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline9" class="outline-2"&gt;
&lt;h2 id="orgheadline9"&gt;Next steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline9"&gt;
&lt;p&gt;
We haven't even talked about code development or killer packages like
org-mode but I think this will do for a start.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
</feed>
