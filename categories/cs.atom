<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Posts about cs</title>
  <id>http://cestlaz.github.io/categories/cs.atom</id>
  <updated>2017-12-22T12:59:42Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/categories/cs.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/categories/cs/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Breaking down problems and writing</title>
    <id>http://cestlaz.github.io/posts/whats-next/</id>
    <updated>2017-12-14T12:14:33-04:00</updated>
    <published>2017-12-14T12:14:33-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/whats-next/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This question appeared on Facebook a few days ago:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Does anyone have an effective way to teach students how to break down
a problem into steps and then solve each step one by one? I think my
students are struggling with a large question and breaking it in
subsequent parts.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
There were some good suggestions. I wanted to add something but didn't
have time then so I thought I'd write it up now.
&lt;/p&gt;

&lt;p&gt;
As an aside, it took me forever to find the post again over on
Facebook. If there's a way to mark posts or save a direct link I'd
love to hear it. I had to look through all the CS Ed groups I belong
to manually until I found it again.
&lt;/p&gt;

&lt;p&gt;
When I read the program I was reminded of a PD session we had to
attend back at Stuyvesant. Back then the fad was &lt;a href="https://en.wikipedia.org/wiki/Writing_across_the_curriculum"&gt;Writing Across the
Curriculum&lt;/a&gt;. Every teacher in every class was to give some significant
writing assignment, evaluate it and provide feedback. Let's forget the
fact that most of us never had any training or preparation to do so.
&lt;/p&gt;

&lt;p&gt;
On that PD day the guest speaker was &lt;a href="https://en.wikipedia.org/wiki/William_Zinsser"&gt;William Zinsser&lt;/a&gt;. The first thing
he said was that what we were being asked to do by our principal was
bunk. He then proceeded to give advice on  simple good writing.
&lt;/p&gt;

&lt;p&gt;
The procedure he recommended following was to ask yourself (or have
the student ask themselves) "what does my audience need to know next?"
That's your next sentence. Then ask the question again. Rinse and
repeat until done.
&lt;/p&gt;

&lt;p&gt;
It was simple and it made sense. It also applied to introductory CS
problems. When starting out, students have a limited CS / programming
tool box so a good question for them to ask when trying to solve a
problem is not only "what do I need to do next? but also "what can I
do next?" 
&lt;/p&gt;

&lt;p&gt;
When students have a limited CS vocabulary and set of idioms - loops,
conditionals, functions, whatever, there will only be so many things
they can do to move a problem along. If they go through the things the
&lt;b&gt;&lt;b&gt;can&lt;/b&gt;&lt;/b&gt; do they will likely fall on to what they &lt;b&gt;&lt;b&gt;should&lt;/b&gt;&lt;/b&gt; do.
&lt;/p&gt;

&lt;p&gt;
It's similar to doing a proof in geometry. Students have a set of
givens. Given that set, what can they do? They only know so many
theorems at the beginning. 
&lt;/p&gt;

&lt;p&gt;
Over time, they'll recognize patterns and develop as problem solvers.
&lt;/p&gt;

&lt;p&gt;
If you're part of the AP CS A teachers facebook group you probably saw
the question. Many good answers were posted. I just wanted to add this
thought to the collection.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="problem-solving" label="problem solving"/>
  </entry>
  <entry>
    <title>New York State moving forward with CS Teacher Certification</title>
    <id>http://cestlaz.github.io/posts/NY-CS-Certificate/</id>
    <updated>2017-12-12T19:57:37-04:00</updated>
    <published>2017-12-12T19:57:37-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/NY-CS-Certificate/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Last April I woke up early and trekked up to Albany along with a few
of my Hunter College colleagues to share our thoughts on K12 Computer
Science teacher certification with the Board of Regents. We gave a
presentation to the Regents Higher Education Committee and afterwards
had a chance to talk with some of the Regents as well as other members
of the New York State Department of Education.
&lt;/p&gt;

&lt;p&gt;
I left feeling that our proposals were well received and I think
everyone present - both the Hunter and NYSED contingents hoped that
things would move forward on this important issue.
&lt;/p&gt;

&lt;p&gt;
Fast forward to today, December 8, 2017. I was up at the crack
of dawn. Driving in the dark in the snow from NYC to Albany to once
again attend a Board of Regents Higher Education Committee
meeting. This time, the agenda item was:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Proposed Amendments to Part 30 of the Regents Rules and Section 52.21
and Part 80 the Regulations of the Commissioner of Education Relating
to a New Certification Area and Tenure Area for Computer Science 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
No discussion or debate this time around just the proposal. If I
understand the process correctly, this should come up again at the
March meeting at which point it will be voted on. If approved, it
looks like we'll have a pathway towards certification for CS teachers.
&lt;/p&gt;

&lt;p&gt;
I haven't had a chance to dive into the details but at the meeting a
few key points came up:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;As the proposal indicates this will be a subject area in which a
teacher can be certified and be awarded tenure.
&lt;/li&gt;
&lt;li&gt;There will be a traditional pathway for new teachers - Bachelors /
Masters degree
&lt;/li&gt;
&lt;li&gt;There will be an alternative pathway for people entering from the
workforce
&lt;/li&gt;
&lt;li&gt;There will be an extension for teachers with another license so they
won't have to give up tenure in their current license.
&lt;/li&gt;
&lt;li&gt;There will be an "individual evaluation" pathway which sounds to me
like it could catch people who fall through the cracks.
&lt;/li&gt;
&lt;li&gt;There looks to be a sensible ramp up period - until September 2022
&lt;/li&gt;
&lt;li&gt;There's a grandfathering provision that looks to last 10 years.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This sounds like a smart sensible plan. Multiple pathways, shallow
ramp up and provisions to protect existing teachers.
&lt;/p&gt;

&lt;p&gt;
Of course, the devil is in the details. What's an approved program?
Can a grandfathered teacher teach all CS classes or just intro ones?
etc.
&lt;/p&gt;

&lt;p&gt;
As I said, I haven't had a chance to dive into the details yet but
this is very exciting.
&lt;/p&gt;

&lt;p&gt;
Prior to the meeting I was chatting with a few other people
attending. One, a &lt;a href="http://www.uft.org/"&gt;UFT&lt;/a&gt; representative was very excited about the
prospect. Another contingent, a group from &lt;a href="https://www.nysut.org/"&gt;NYSUT&lt;/a&gt; was very much against
a new certification area. Their position was that this would create a
teacher shortage because no one would have a CS license and no one
would get one due to the difference in salary between teaching and the
tech industry. I've already written on how I feel that this is a &lt;a href="https://cestlaz.github.io/posts/will-we-lose-cs-teachers-to-industry"&gt;red
herring&lt;/a&gt;. What shocked me though was their feeling that "we already
have many non-CS teachers effectively teaching CS across the
state. They're doing a great job and don't need any additional content
or pedagogical knowledge." I think they're wrong and I also think that
when we as a community talk about how our summer professional
development is all that's needed, we undercut CS education and
the teaching profession as a whole.
&lt;/p&gt;

&lt;p&gt;
In any event this was a big step for New York. I tried to individually
thank as many of the participants as I could for helping shepherd this
along but could only speak to a few so I'll just give a blanket thank
you here to the NY State Board of Regents, Board of Education and
State Education department.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="certification" label="certification"/>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Advent of Code 2017 - Day 1</title>
    <id>http://cestlaz.github.io/posts/advent-2017-1/</id>
    <updated>2017-12-02T08:27:02-04:00</updated>
    <published>2017-12-02T08:27:02-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-2017-1/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
It's once again time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt;. That one a day programming
competition that's been running now for three years.
&lt;/p&gt;

&lt;p&gt;
Here are some thoughts on &lt;a href="http://adventofcode.com/2017/day/1"&gt;day 1&lt;/a&gt;. The core of the problem is that you
have a large string of digits and you have to calculate a
checksum. This is done by adding the sum of a subset of the
digits. Only the ones that are identical to the digit to their
right. To make it a little more interesting, the last digit wraps
around to the first for checksum purposes.
&lt;/p&gt;

&lt;p&gt;
For example, the input &lt;b&gt;&lt;b&gt;2234335&lt;/b&gt;&lt;/b&gt; leads to the calculate &lt;code&gt;2 + 3&lt;/code&gt; or
&lt;code&gt;5&lt;/code&gt;. The input &lt;b&gt;&lt;b&gt;234445662&lt;/b&gt;&lt;/b&gt; leads to &lt;code&gt;4+4+6+2&lt;/code&gt; or &lt;code&gt;16&lt;/code&gt;. We add 4 for
twice because the first four is adjacent the second and the second the
third. We add the 2 at the end because it wraps around to match the
one at the front.
&lt;/p&gt;

&lt;p&gt;
We first read in the data and strip off the trailing newline
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;origdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;origdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origdata&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, since we can access the elements of the string as a list (or
array) it's a simple loop to calculate the sum:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Don't forget to turn the string into an int&lt;/span&gt;

&lt;span class="c1"&gt;# data[-1] is the python way of getting the last element - here we check the wraparound&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Checksum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Pretty straightforward but I don't like the special case of checking
the last element for the wraparound. Sometimes it's possible to get
rid of edge cases like this by &lt;a href="https://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt;. We can do that here
by simply appending a copy of the first character to the end of the
list.
&lt;/p&gt;

&lt;p&gt;
This leads to a slightly cleaner solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#don't forget to turn the string into an int&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Checksum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is pretty much what I'd expect from a Python programmer that's
just starting out. We can use a couple of more advanced Python
features to make what I consider a more elegant solution.
&lt;/p&gt;

&lt;p&gt;
Python's &lt;b&gt;&lt;b&gt;zip&lt;/b&gt;&lt;/b&gt; function takes two lists and interleaves them.
&lt;code&gt;zip("abc","def")&lt;/code&gt; will yield &lt;code&gt;[ (a,d), (b,e), (c,f)]&lt;/code&gt;. If the lists
are of different length, it just zips up until the shorter list is
exhausted. We can use array slicing to zip the input string with it's
neighbor by using &lt;code&gt;new_list = zip(data,data[1:])&lt;/code&gt;. For the string "122344'
zipping gives us &lt;code&gt;[(1,2),(2,2),(2,3),(3,4),(4,4)]&lt;/code&gt;. We can put this in
a list comprehension that only keeps the tuples representing an
element with an identical neighbor and also converts it to an int:
&lt;code&gt;new_list = [int(a) for a,b in new_list if a==b]&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, we can just calculate the sum. This leads to the following
complete solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
List comprehensions for the win!!!!
&lt;/p&gt;

&lt;p&gt;
Each Advent of Code problem has two parts. You unlock the second by
solving the first. Here, the wrinkle is that instead of checking each
digit with it's neighbor to the right, you check it with the one
that's halfway around the list. 
&lt;/p&gt;

&lt;p&gt;
With loops, the solution is just a quick modification of part 1. We
just add half the length and use mod to find the digit to compare with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;# check halfway around instead of adjacent&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"part 2loop version: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I wanted to see if I could do this with a list comprehension
though. The trick was to figure out how to make two lists to zip
together to get the pairs to check then add. Here's the solution:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checksum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The insight was that we could just make a second list that starts
halfway through and then wraps around. I did this by adding
&lt;code&gt;data[l//2:] + data&lt;/code&gt;. &lt;code&gt;l//2&lt;/code&gt; is the integer division of the length (in
Python3). &lt;code&gt;data[l//2:]&lt;/code&gt; represents the second half of data (from the
midway point to the end). Technically I should have only added the second
half of data: &lt;code&gt;data[l//2:] + data[:l//2]&lt;/code&gt; where &lt;code&gt;data[:l//2]&lt;/code&gt; gives us
the first half of the list but since zip will just stop when it
exhausts the shorter list, this wasn't necessary.
&lt;/p&gt;

&lt;p&gt;
Day 2 also has a nice list comprehension based solution. Maybe I'll
write that up later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="cs" label="cs"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>Motivating and understanding quicksort</title>
    <id>http://cestlaz.github.io/posts/quick-sort-starting/</id>
    <updated>2017-11-21T10:34:05-04:00</updated>
    <published>2017-11-21T10:34:05-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/quick-sort-starting/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Thks question was posed the other day - how can one get students to
truly understand the quicksort algorithm?
&lt;/p&gt;

&lt;p&gt;
I've written a few posts about quicksort. The last time I did a &lt;a href="https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/"&gt;lesson
writeup&lt;/a&gt; on the subject I wrote about first looking and quickselect and
then moving to the quicksort. The class was first faced with the
problem of writing a routine to find the Kth smallest item in an
unsorted data set. The first solution was n&lt;sup&gt;2&lt;/sup&gt; and then refined to a
quickselect. This led directly to the quicksort. 
&lt;/p&gt;

&lt;p&gt;
I liked the lesson and I think it worked well when I taught it but
that was partly due to the overall tenor of that particular group of
students.
&lt;/p&gt;

&lt;p&gt;
A similar approach develops the quicksort in a similar way but is
both more direct and accessible.
&lt;/p&gt;

&lt;p&gt;
The motivating problem is to put one item in a data set in its proper
place. You could select one person in class and arrange the class so
that the selected student is in their proper size place, that is
everyone shorter on one side, taller on the other. You could also do
this for age. A similar exercise could be done with any number of
manipulatives.
&lt;/p&gt;

&lt;p&gt;
This operation of arranging the rest of the set around one selected
item or person is very easy and in fact it's trivial to show that this
can be done in linear time. 
&lt;/p&gt;

&lt;p&gt;
Once we've done this arrangement, we can discuss what we can infer
from this new arrangement. We can now tell that:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;everyone to the left of the "pivot" is less than the pivot
&lt;/li&gt;
&lt;li&gt;everyone to the right is greater
&lt;/li&gt;
&lt;li&gt;The pivot element is at its true location if the list were
sorted. That is, if we started arranging around item k, then we've
moved item k to the kth location in the dataset.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
From here it's a small jump to the quicksort algorithm, just repeat
the process on the left and right data sets.
&lt;/p&gt;

&lt;p&gt;
This approach not only makes the algorithm and its development clear
and simple but it also can be used to illustrate the worst case n&lt;sup&gt;2&lt;/sup&gt;
behavior. 
&lt;/p&gt;

&lt;p&gt;
The whole thing, minus the coding, can also be done as an unplugged activity.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, I also wrote a post on subtle
implementation errors when writing the quicksort (&lt;a href="https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html"&gt;here&lt;/a&gt;) and also
looking at the qucksort from the point of view of different
programming paradigms (&lt;a href="https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html"&gt;here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="algorithms-unplugged" label="algorithms. unplugged"/>
    <category term="cs" label="cs"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>Professional Development beyond Scratch</title>
    <id>http://cestlaz.github.io/posts/election-day-pd-2017/</id>
    <updated>2017-11-07T19:08:58-04:00</updated>
    <published>2017-11-07T19:08:58-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/election-day-pd-2017/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Today was Election Day. One of the few days each year when students
stay home and teachers spend all day attending what is generously
known as professional development.
&lt;/p&gt;

&lt;p&gt;
Years ago I was in a room with a few colleagues when my friend Dave -
one of the best math teachers I know said "you know, every time we
have a PD day in NJ and my wife and I have to scramble to take care of
the kids I get a little annoyed but then think I shouldn't get annoyed
since they're spending the day doing all sorts of valuable PD." He
then said "but then I realize that their PD is probably about as
useful as our PD and I get really angry."
&lt;/p&gt;

&lt;p&gt;
There you have it. This is not to say that there is no good PD but it
seems that the professional development opportunities provided by our
schools have over the years ranged from useless to insulting with
maybe a small bright spot here and there. Historically it's been worse
for CS teachers because we get lumped in with math teachers and have
to spend the day learning about tools and techniques we'll never use
or discussing curricula we never teach.
&lt;/p&gt;

&lt;p&gt;
So, when I spoke to JonAlf about rescuing the Stuy teachers for the
day and hosting them at Hunter, he and the other CS teachers were
pretty excited. It wasn't as though I had the magic PD answer but I
was going to provide a space and we'd figure out together what would
be productive and valuable for them.
&lt;/p&gt;

&lt;p&gt;
As it turns out, I've been spending a good amount of time these past
few weeks visiting high schools to talk about Hunter CS and when I was
at Bronx Science the topic of Election Day PD came up and I thought
that it would be nice to get the Bronx Science and Stuy teachers
together. After thinking about it more, I recalled that there were few
good PD opportunities for CS teachers who taught advanced classes as
opposed to all the CS PD floating around these days at more of a
beginner level.
&lt;/p&gt;

&lt;p&gt;
I thought that we could change this. In the end, I hosted PD today and
had teachers from Stuyvesant, Bronx Science, Brooklyn Tech, and the
Manhattan Hunter Science High School in attendance. I invited teachers
from a few more schools but in the end we had those four schools and
seventeen teachers.
&lt;/p&gt;

&lt;p&gt;
The original agenda was:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;09:00 - 10:00 : Each school describes it's program and courses
&lt;/li&gt;
&lt;li&gt;10:00 - 11:00 : An intro to Git and GitHub for the classroom
&lt;/li&gt;
&lt;li&gt;10:00 - 11:45 : Sharing neat lessons
&lt;/li&gt;
&lt;li&gt;11:45 - 12:00 : Presentation by &lt;a href="http://chicktech.org"&gt;ChickTech&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;12:00 - 01:00 : Lunch
&lt;/li&gt;
&lt;li&gt;01:00 - End   : Small group lesson and curriculum work
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Oh boy did I mess up on the timing. The description and
discussion of school programs took all morning. It was interesting to
hear how each school's program evolved and how they fit into the
school's culture. Brooklyn Tech, for instance is a school where
students declare majors. This has a big impact on what classes kids
have to take and are able to take. This is very different from Stuy or
Science where kids programs are more open ended or MHSHS which is a
much smaller school and has restrictions related to size. It was also
interesting to note Brooklyn Tech's decision to have every student
take APCS-P. Interesting because Brooklyn Tech is one of the country's
largest high schools and most of them should have done well on the
exam. That gave NYC around 1,400 passing AP scores in one shot. On
the other hand none of the other schools present today offered APCS-P
but did have their own intro CS class that students took prior to
APCS-A.
&lt;/p&gt;

&lt;p&gt;
We finished the morning with a visit by Heather from
&lt;a href="http://chicktech.org"&gt;ChickTech&lt;/a&gt;. ChickTech is a non-profit dedicated to retaining women in
Tech. It works with both girls in K12 and also those in industry. My
hope was to get a conversation started and see if there were some
potential avenues of partnership between the organization and the
schools.
&lt;/p&gt;

&lt;p&gt;
After lunch, the group decided that we should do the Git/GitHub
workshop and JonAlf obliged.
&lt;/p&gt;

&lt;p&gt;
Overall I think the day was a success. 
&lt;/p&gt;

&lt;p&gt;
My hope is that today's attendees can form a core group of CS teachers
who teach more advanced courses and we can form something of a support
group for each other. 
&lt;/p&gt;

&lt;p&gt;
I plan to try to facilitate future meetings and hopefully we'll be
able to attract more teachers to our group.
&lt;/p&gt;

&lt;p&gt;
All in all I'm very happy with how the day went.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="pd" label="pd"/>
  </entry>
  <entry>
    <title>Early Interesting Problems - Happy Ladybugs</title>
    <id>http://cestlaz.github.io/posts/happy_ladybug/</id>
    <updated>2017-10-23T08:47:46-04:00</updated>
    <published>2017-10-23T08:47:46-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/happy_ladybug/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
We all love interesting problems. The trouble is that it's hard to
find suitably interesting problems for students when they're just
learning the basics. In the very beginning the problems practically
dictate the solution:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;loop over a list and add all the elements or calculate the sum of a
list of integers.
&lt;/li&gt;
&lt;li&gt;Determine if  number is prime
&lt;/li&gt;
&lt;li&gt;Convert a word into pig-Latin
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
It's not that there's no thought involved in solving these but the
students already know the mechanics of solving these by hand so it's a
direct translation into a program.
&lt;/p&gt;

&lt;p&gt;
This isn't a bad thing and it is important but it's fun when we get to the next
level. I've found that a number of the &lt;a href="http://hackerrank.com"&gt;Hacker Rank&lt;/a&gt; archived
competitions have "easy" problems that can be a good fit for
beginners. One that I found and really like is &lt;a href="https://www.hackerrank.com/challenges/happy-ladybugs"&gt;Happy Ladybugs&lt;/a&gt; problem.
&lt;/p&gt;

&lt;p&gt;
The problems is basically as follows:
&lt;/p&gt;

&lt;p&gt;
You get a string of letters. Each letter represents a ladybug of a
different color. Each letter also represents a location of the
ladybug.  A space (or underscore in the actual problem) represents a
free space. For example "AABC DDA" is a line of 2 A colored ladybugs
followed by a B colored one, C colored one, a blank space, 2 D colored and then one
more A colored. 
&lt;/p&gt;

&lt;p&gt;
You can rearrange the line of ladybugs by swapping any ladybug with a
blank space.
&lt;/p&gt;

&lt;p&gt;
A ladybug is happy if it is next to another ladybug of the same
color. The challenge is to determine if all the ladybugs can be made
happy.
&lt;/p&gt;

&lt;p&gt;
I like this problem because while it is non-trivial it is very
approachable. 
&lt;/p&gt;

&lt;p&gt;
To me, the key is that while you can rearrange the list you
don't have to. You only have to determine if it is possible to make
the ladybugs happy. You don't actually have to do so.
&lt;/p&gt;

&lt;p&gt;
The edge cases are pretty easy to deal with - a string of length one
or two but then a little thought is required.
&lt;/p&gt;

&lt;p&gt;
The first insight is that if there are no spaces, you can't rearrange
the ladybugs so all you have to do is scan through the string to test
to see if every ladybug has a neighbor of the same color.
&lt;/p&gt;

&lt;p&gt;
The next insight, and the big one is that if you have at least one
space you can arbitrarily re-order the string. You can show this is
possible  by using a single space to swap any two elements. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someletter&lt;/span&gt;
&lt;span class="n"&gt;someletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someotherletter&lt;/span&gt;
&lt;span class="n"&gt;someotherletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The final insight is that since you can arbitrarily re-order the
ladybugs as long as you have at least 2 of each color, you can make
them all happy.
&lt;/p&gt;

&lt;p&gt;
Since my class is currently just starting dictionaries in Python we
solved this with lists and then transitioned to dictionaries.
&lt;/p&gt;

&lt;p&gt;
Here's a dictionary based solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;    This might miss some of the real edge cases in the hackerrank&lt;/span&gt;
&lt;span class="sd"&gt;    problem. I haven't read the problem carefully in over a year and &lt;/span&gt;
&lt;span class="sd"&gt;    forget what it specified for things like lists of only spaces,&lt;/span&gt;
&lt;span class="sd"&gt;    lists with only one bug etc.&lt;/span&gt;

&lt;span class="sd"&gt;    Also, the Hackerrank question uses an underscore (_) instead of a space.&lt;/span&gt;
&lt;span class="sd"&gt;    '''&lt;/span&gt;
    &lt;span class="c1"&gt;# handle a string of less than 2 ladybugs&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# handle the string of 2 ladybugs - both must be the same and not a space&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;


    &lt;span class="c1"&gt;# handle the case of no spaces &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="c1"&gt;# no spaces, every item must be next to one of the same color&lt;/span&gt;
	&lt;span class="c1"&gt;# so we loop from 1 to len-1 and for each item&lt;/span&gt;
	&lt;span class="c1"&gt;# check the one before and the one after&lt;/span&gt;
	&lt;span class="c1"&gt;# if we ever have an unhappy bug, we can just return False&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

	&lt;span class="c1"&gt;# if we ever get here every bug has at least one neighbor of the same color&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# if we get here it means there's at least one space so we can rearrange the bugs&lt;/span&gt;
    &lt;span class="c1"&gt;# however we please so as long as there are at least 2 bugs of each color&lt;/span&gt;
    &lt;span class="c1"&gt;# we can make them all happy&lt;/span&gt;

    &lt;span class="c1"&gt;# replace the spaces with "" since we don't want to count them&lt;/span&gt;
    &lt;span class="c1"&gt;# Since we know they were in the string we can rearrange but&lt;/span&gt;
    &lt;span class="c1"&gt;# they're no longer needed&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# tally up all the bugs to see if there are at least 2 of each&lt;/span&gt;
    &lt;span class="n"&gt;bugcounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set to 0 the first time we see this key&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;


    &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# if there is any value of 1 in the counts then there's a lone ladybug&lt;/span&gt;
    &lt;span class="c1"&gt;# that can't be made happy&lt;/span&gt;
    &lt;span class="c1"&gt;# so we return True (happy) if there are 0 counts of 1 in our list &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 


&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"abaccbe ff eggggggg"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I love problems like these. 
&lt;/p&gt;

&lt;p&gt;
I just wish there was an easy way to find all contest problems of a
certain level like "easy" or "medium." If anybody knows please share
in the comments.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="problems" label="problems"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>There's always something to learn (from your students)</title>
    <id>http://cestlaz.github.io/posts/when-they-change-the-script/</id>
    <updated>2017-10-18T11:41:49-04:00</updated>
    <published>2017-10-18T11:41:49-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/when-they-change-the-script/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
One thing I've learned from teaching is that there's always something
new to learn. For the kids, yes, but I'm talking about for the
teacher.
&lt;/p&gt;

&lt;p&gt;
The other day, I taught a lesson I've taught many times. Find the mode
of a data set. That's the problem that they solve but the lesson is
really about run time complexity, hidden complexity and using data
structures in alternate ways.
&lt;/p&gt;

&lt;p&gt;
I blogged about this &lt;a href="https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md"&gt;before&lt;/a&gt; so you can get an earlier take there
although the code isn't formatted correctly due to blog conversions.
&lt;/p&gt;

&lt;p&gt;
As with the last time, the students  had already written code to find
the largest value in a list and also to find the frequency of an item
in a list.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_max_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;max_val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
	    &lt;span class="n"&gt;max_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_val&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;requested_val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;requested_val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They had to write mode prior to the class. In the past, students would
generally come up with something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_mode_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mode_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;mode_freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mode_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mode_freq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;mode_freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
	    &lt;span class="n"&gt;mode_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mode_val&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_mode_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They'd use their existing knowledge and the 'find the largest' idiom
to find the mode by:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;find the frequency of the first item and assume it's the mode so far
&lt;/li&gt;
&lt;li&gt;for each item in the list
&lt;ul class="org-ul"&gt;
&lt;li&gt;find the frequency of that idem
&lt;/li&gt;
&lt;li&gt;if it occurs more than the mode so far then it becomes the new
mode so far
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There's a lot of good in this solution. The kids incrementally develop
a solution, they use and exctend code and concepts they already know
and understand and it's clear and understandable.
&lt;/p&gt;

&lt;p&gt;
We would then run the code on larger and larger data sets and notice
that it gets slow pretty quickly. This leads to an informal discussion
of run time and the fact that there's hidden complexity – the call to
&lt;code&gt;freq&lt;/code&gt; in the main loop introduces a linear component so we have a
loop within a loop and an N&lt;sup&gt;2&lt;/sup&gt; routine.
&lt;/p&gt;

&lt;p&gt;
The big takeaway is get a feel for run time and to be aware of hidden
complexity. We then move to a linear solution by using a list as
buckets. You can read more about that in the &lt;a href="https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md"&gt;original post&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
What was interesting this time around was that most of the kids came
up with a solution more like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_mode_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;freqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_freq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mode_count&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;mode_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mode_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	   &lt;span class="n"&gt;mode_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
	   &lt;span class="n"&gt;mode_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mode_value&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mode_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Instead of calculating the frequency inside the loop they made a list
of frequencies. &lt;code&gt;freq[0]&lt;/code&gt; had the frequency of &lt;code&gt;l[0]&lt;/code&gt;, &lt;code&gt;freq[1]&lt;/code&gt; the
frequency of &lt;code&gt;l[1]&lt;/code&gt; etc. They then loop through that &lt;code&gt;freq&lt;/code&gt; list to
find the largest element and that's the index of the mode value in the
original list.
&lt;/p&gt;

&lt;p&gt;
It's functionally the same as the first solution but in some ways it's
very different. They built the data set they needed ahead of time
instead of calculating the data on the fly and they used the concept
of parallel lists.
&lt;/p&gt;

&lt;p&gt;
I like the solution and it didn't prevent us from getting to the run
time stuff but this did give me something to think about. 
&lt;/p&gt;

&lt;p&gt;
Why did this class led them largely to a different solution than the
classes I've taught in the class. There are a lot of things to ponder
since it's a college class that meets twice a week with kids from a
range of backgrounds (CS and otherwise) vs a high school class that
meets 5 days a week and the kids all had the same in class experience
prior to this lesson. Did I do something differently before hand? Some
assignments? Something I modeled?  I'm not sure but it's something I'm
going to ponder.
&lt;/p&gt;

&lt;p&gt;
It will interesting to see if this was a one shot deal and my current
class will solve problems as I predict moving forward or if I'm going
to get to see a lot of new things.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="lessons" label="lessons"/>
  </entry>
  <entry>
    <title>A test result is just a test result</title>
    <id>http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</id>
    <updated>2017-10-15T20:17:21-04:00</updated>
    <published>2017-10-15T20:17:21-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This past weekend was &lt;a href="http://catskillsconf.com"&gt;Catskillsconf&lt;/a&gt; - my favorite event of the
year. I spent the weekend up in Ulster County with a bunch of my
students. some great friends old and new, and Devorah. It was a great
weekend but I was mostly offline.
&lt;/p&gt;

&lt;p&gt;
As a result I missed a rather heated discussion in the CS Ed Facebook
groups. The debate was over whether or not Strong AP CSP exam results
are indicative of a good curriculum or good professional development (PD).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;TL;DR - NO!!!!!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Further, anyone who thinks that a set of exam results can tell you
that a particular PD sequence or curriculum is good shouldn't be
allowed to call themselves a teacher and I don't want them anywhere
near my kids.
&lt;/p&gt;

&lt;p&gt;
I guess that language is strong, even for me but it's true.
&lt;/p&gt;

&lt;p&gt;
Tests are designed to assess students and many tests don't even do
that well. They shouldn't be used to measure something further
removed.
&lt;/p&gt;

&lt;p&gt;
The last time this idea made its rounds was using student test results
for teacher evaluation. They do that in NY. A judge called the
practice "capricious" and "arbitrary." My friend and former
colleague Gary Rubinstein showed a year or so ago that standardized
test scores varied enough from year to year so as to make the ratings
useless &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; 
&lt;/p&gt;

&lt;p&gt;
Using test scores to say a PD sequence is good? What if that PD
focused on test prep? What if it did nothing in particular? When I was
at Stuy and when I was at Seward Park the Calc teachers' students had
great AP results. I can tell you that none of those teachers had any
quality PD specific to AP Calc.
&lt;/p&gt;

&lt;p&gt;
Curriculum? My mentor and friend Danny Jaye told me many times - "A
great teacher can save a class from a  horrible curriculum but a great
curriculum will do nothing for a class with a horrible teacher." He
was right. Again, what if the curriculum encourages test prep. What if
pressure on the teacher encourages them to focus on test prep
regardless of curriculum or PD (see my recent &lt;a href="http://cestlaz.github.io/posts/standards-who-for"&gt;post&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
An AP test measures one thing - how well the student did on the AP
test. There are so many variables that go into a class:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Is it first period at 8:00am?
&lt;/li&gt;
&lt;li&gt;Is it the last class of the day?
&lt;/li&gt;
&lt;li&gt;Is it before lunch or right afterwards?
&lt;/li&gt;
&lt;li&gt;What about right after Gym.
&lt;/li&gt;
&lt;li&gt;What's the mix of students - every class is different
&lt;/li&gt;
&lt;li&gt;Is the teacher teaching the subject once a day? Two times? Five
times?
&lt;/li&gt;
&lt;li&gt;How large is the class
&lt;/li&gt;
&lt;li&gt;How many other classes are the kids taking?
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The list goes on and on. There are so many contributing factors that
you just can't say "Good test results = good curriculum" or "good test
results = good PD."
&lt;/p&gt;

&lt;p&gt;
Want to know if a curriculum is good - have experienced teachers who
know their subject run it a few times through and ask them. Same for
PD.
&lt;/p&gt;

&lt;p&gt;
Teachers know education a lot better than test makers, curriculum
developers and PD providers. How about listening to them for a change?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/ap-results-measure-of-curriculum/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;sorry, I just got back from the weekend trip and am too tired
to find the link. You can go to his site and search and while you're
there, there's lots of good stuff to read.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="assessment" label="assessment"/>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Standards - Who are they for?</title>
    <id>http://cestlaz.github.io/posts/standards-who-for/</id>
    <updated>2017-10-10T14:05:35-04:00</updated>
    <published>2017-10-10T14:05:35-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/standards-who-for/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The big push at last year's CSTA conference was the release of the new
CSTA K12 standards. It seemed that every other session was pushing
them in one way or another. I've been meaning to share my thoughts
about them or, more specifically, learning standards in general for a
while but with announcement about federal funding for CS coming from
the White House last week I thought it was time.
&lt;/p&gt;

&lt;p&gt;
Before diving into CS standards lets talk about math.
&lt;/p&gt;

&lt;p&gt;
To start I have yet to meet a math teacher that needs
"the Standards" to know what to teach. Some how or other math teachers know
they're supposed to teach in an algebra or geometry class. When NY
moved to "integrated math" teachers were able to re-sequence classes
without the benefit of "the standards" and when NY went back to
Algebra, Geometry, then Alg 2 and Trig, teachers had no problem
reorganizing classes again.
&lt;/p&gt;

&lt;p&gt;
New teachers didn't go to "the Standards" to learn the ropes. Schools
defined syllabi, teachers observed each other, shared resources, used
lesson plan books and in general knew what they were supposed to teach
and at what level.
&lt;/p&gt;

&lt;p&gt;
In my quarter century of teaching, always in a math department we
spent a lot of time talking about what we taught, when we taught it,
how we taught it and at what level but until common core was forced
down our throats we NEVER discussed "the Standards." We discussed our
students, where we thought we could take them, and how to get them
there. Somehow our students did alright.
&lt;/p&gt;

&lt;p&gt;
More recently, the push has been on "The Standards," common core in particular.
&lt;/p&gt;

&lt;p&gt;
Common standards sound good - kids in every school will learn the same
things at the same level - but I contend that they aren't about
learning. They're about testing.
&lt;/p&gt;

&lt;p&gt;
Let's look at a few of the math standards. These were pulled directly
from the Common Core:
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;
Derive the equation of a circle of given center and radius using the
Pythagorean Theorem; complete the square to find the center and radius
of a circle given by an equation.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
Use coordinates to prove simple geometric theorems algebraically. For
example, prove or disprove that a figure defined by four given points
in the coordinate plane is a rectangle; prove or disprove that the
point (1, √3) lies on the circle centered at the origin and containing
the point (0, 2).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
Derive using similarity the fact that the length of the arc
intercepted by an angle is proportional to the radius, and define the
radian measure of the angle as the constant of proportionality; derive
the formula for the area of a sector.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
These aren't about deep thinking and problem solving. They're about
very specific skills or techniques. They're also easy to put on a
test. Much easier then assessing a students real problem solving ability.
&lt;/p&gt;

&lt;p&gt;
Common Core comes hand in hand with standardized testing which is then
used to punish students, teachers, and schools. 
&lt;/p&gt;

&lt;p&gt;
We keep hearing about individualized instruction - meeting the kids
where they are but the standards tell us that kids MUST know specific
things at specific times. You can't have both. In the best case, with
"the standards" we can only meet students "where they are" within
annual bands.
&lt;/p&gt;

&lt;p&gt;
What has this led to? Narrowing curriculum for one thing. Since schools are
evaluated based on the standardized exam in core subjects focus
narrows and other subjects fall by the wayside. 
&lt;/p&gt;

&lt;p&gt;
Arguably worse is selective teaching within common core subjects.
&lt;/p&gt;

&lt;p&gt;
Take for example, Geometry. The course is really "Logic and Deductive
Reasoning using Euclidean Geometry as a Platform" but it's generally
called Geometry. This class is supposed to be about getting kids to
think. I've already shared a few standards above but let me tell you
about an open secret - many schools don't really teach proof -
arguably the most important part of the class.
&lt;/p&gt;

&lt;p&gt;
In my last year at Stuy I graded Geometry regents for the city. I
graded exams for two highly regarded unscreened schools. One that was
lauded in a State of the Union address and the other equally hyped. I
graded all of each school's students geometry regents so it wasn't
just a sampling. Out of all the papers, only two or three scored more
than 2 out of 9 points for the proof question and most were entirely
left blank.
&lt;/p&gt;

&lt;p&gt;
What happened? Proof is hard to teach and hard to learn but it's also
only a small part of the standardized exam. It's critical for a
school's survival and for the student to graduate that a passing score
is earned. Rather than spending a large amount of time on few points
and probably get a limited return I've been told that many schools
spend much more time on topics that area easier to teach and have more
weight on the exam. This makes the school look better and helps the
student graduate but arguably the most important aspect of the course
has been minimized.
&lt;/p&gt;

&lt;p&gt;
High stakes testing leads to gaming the system. Common core standards
come hand in hand with high stakes testing. We see the same with AP
exams - there are schools that force students to take exams even when
they are woefully prepared and mostly fail because this helps the
school shoot up in the ratings.
&lt;/p&gt;

&lt;p&gt;
This is what the common core math standards have given us. They're not
for teachers - we don't need them - we know what to teach and only
wish that the bean counters would indeed allow us to meet students
where they are. Standards are about testing.
&lt;/p&gt;

&lt;p&gt;
Let's move on to CS standards. 
&lt;/p&gt;

&lt;p&gt;
It might not be fair to compare CS to math since K12 math education
has been around much longer and is more well defined and in theory
having a set of standards gives us a common language to discuss,
compare, and contrast all the content providers and curriculum
developers out there. On the other hand, I also believe that with well
prepared teachers who understand content and pedagogy the value isn't
all that great. It's also worth considering the fact that nothing
really makes the CSTA Standard  writers special. There's no reason to
think that another group - be they a handful of teachers or a content
provider can't do a comparable job.
&lt;/p&gt;

&lt;p&gt;
Here are some selections from the CSTA standards:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Design and develop a software artifact working in a team. 
&lt;/p&gt;

&lt;p&gt;
Compare and contrast various software licensing schemes (e.g., open source, freeware,
commercial). 
&lt;/p&gt;

&lt;p&gt;
Design, develop, and implement a computing artifact that responds to an event (e.g., robot
that responds to a sensor, mobile app that responds to a text message, sprite that responds
to a broadcas
&lt;/p&gt;

&lt;p&gt;
Demonstrate the value of abstraction for managing problem complexity (e.g., using a list
instead of discrete variables). 
&lt;/p&gt;

&lt;p&gt;
Design algorithms u sing sequence, selection, and iteration. 
&lt;/p&gt;

&lt;p&gt;
Discuss techniques used to store, process, and retrieve different amounts of information
(e.g., files, databases, data warehouses). 
&lt;/p&gt;

&lt;p&gt;
Compare and debate the positive and negative impacts of computing on behavior and
culture (e.g., evolution from hitchhiking to ridesharing apps, online accommodation rental
services). 
&lt;/p&gt;

&lt;p&gt;
Use simple encryption and decryption algorithms to transmit/receive an encrypted
message. 
&lt;/p&gt;

&lt;p&gt;
Decompose a problem by creating new data types, functions, or classes.
&lt;/p&gt;

&lt;p&gt;
Evaluate algorithms (e.g., sorting, searching) in terms of their efficiency, correctness, and
clarity. 
&lt;/p&gt;

&lt;p&gt;
Use data analysis to identify significant patterns in complex systems (e.g., take existing data
sets and make sense of them). 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
There's nothing wrong with these. They aren't specific enough to
develop lessons from but, they can provide a
consistent framework to discuss different offerings. Were the much
more specific, we'd have the same issue I railed about with the math
standards so this is a good thing. 
&lt;/p&gt;

&lt;p&gt;
Actually, in general, I don't have a problem with these standards. I
might agree with some parts and disagree with others but that's
neither here nor there.
&lt;/p&gt;

&lt;p&gt;
To me the big concern on standards is what will they actually be used
for. It's nice to think that it's a set of guidelines from which we
can develop strong local experiences but I think this is somewhat
naive. As states and the federal government bring CS Education into
the fold there's no reason to believe that CS will be special. CS Ed
will go the way of other subject areas. That means that whatever
standards governments adopt, they will likely be used for high stakes
tests rather than for true education. If you look to see how the
sausage is made you can see the harm standards and standardized
testing has wrought  in subjects like math. CS Ed won't be far behind.
&lt;/p&gt;

&lt;p&gt;
While we should be proud of all the work that's going on in our
community it's more important now than ever to keep an eye on the
overall big picture and be aware of how work intended for one purpose
within the community can be used very differently by those outside of
it. This is particularly important for advocates  not in public schools. Public
schools educate the majority of American students so CS4All means
public schools. Standardized testing won't affect private schools (or
private charters in many cases) nor will they affect colleges and in
fact will be a boon to EdTech companies selling there wares. Many of
the loudest voices in CSEd come from these contingents - it's
important that they look to the greater issues, form their own
opinions, and then act on what they believe is right.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="ed" label="ed"/>
    <category term="policy" label="policy"/>
    <category term="standards" label="standards"/>
  </entry>
  <entry>
    <title>Programming Idioms</title>
    <id>http://cestlaz.github.io/posts/programming-idioms/</id>
    <updated>2017-10-08T11:51:46-04:00</updated>
    <published>2017-10-08T11:51:46-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/programming-idioms/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I just read Jeff Yearout's recent post titled &lt;a href="http://k12csteaching.blogspot.com/2017/10/the-beginners-garden-of-concepts.html"&gt;The Beginner's Garden of
Concepts&lt;/a&gt;. Not directly related but it got me thinking about
programming idioms.
&lt;/p&gt;

&lt;p&gt;
I've been using the phrase "programming idiom" for years to describe a
short useful recurring code construct. I didn't realize that it was
officially "a thing" until doing a web search on the phrase years
later.
&lt;/p&gt;

&lt;p&gt;
As our students grow from newbies on I think it's helpful for them to
see recurring and related patterns and programming idioms gives us a
name to apply to many beginner patterns. An early idiom might be
"finding the smallest in a list:"
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;min_index&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;min_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Another is the very similar and more general "do something on every
item in a list:"
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something to or with dataset[i]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By talking about constructs like these as idioms it helps students see
and develop coding patterns. It also helps them to build mental
abstractions. Each of the above idioms are a few lines of code but
each are also a single concept. Students learn to think of them as the
concept.
&lt;/p&gt;


&lt;p&gt;
When students learn about list comprehensions in python they'll
rewrite the "do something…" more like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
but the pattern or idea is the same.
&lt;/p&gt;

&lt;p&gt;
Other early idioms might include swapping variables:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and loops until an exit condition are met:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_exit_condidtion&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do stuff&lt;/span&gt;
    &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;checks&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Even more difficult concepts like recursion can be described in an
idiomatic way:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;BASE_CASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;new_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modify_to_eventually_get_to_base_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Patterns like these, or idioms, come up over and over again. We don't
have to explicitly mention them in our teaching but I think it's
helpful to our students if we do.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="programming" label="programming"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Awesome Cs Revisited</title>
    <id>http://cestlaz.github.io/posts/awesome-cs-revisted/</id>
    <updated>2017-09-21T16:34:36-04:00</updated>
    <published>2017-09-21T16:34:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/awesome-cs-revisted/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Saw this tweet the other day so I though I would try to plug the
&lt;a href="https://github.com/zamansky/awesome-cs-education"&gt;Awesome CS Education&lt;/a&gt; list I started on GitHub:
&lt;/p&gt;


&lt;div class="export"&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
&amp;lt;blockquote class="twitter-tweet" data-lang="en"&amp;gt;&amp;lt;p lang="en" dir="ltr"&amp;gt;&amp;lt;a href="&lt;a href="https://twitter.com/hashtag/csteachers?src=hash"&gt;https://twitter.com/hashtag/csteachers?src=hash&lt;/a&gt;"&amp;gt;#csteachers&amp;lt;/a&amp;gt;…didn&amp;amp;#39;t I see a list of CS teacher blogs here recently?&amp;lt;/p&amp;gt;&amp;amp;mdash; Pam Whitlock (@PamWhitlock1) &amp;lt;a href="&lt;a href="https://twitter.com/PamWhitlock1/status/910662628757864448"&gt;https://twitter.com/PamWhitlock1/status/910662628757864448&lt;/a&gt;"&amp;gt;September 21, 2017&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/p&gt;

&lt;/div&gt;





&lt;p&gt;
To answer the tweet, the closet thing I know to a list is &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred
Thompson&lt;/a&gt;'s blog roll which is actually a post he wrote on his blog
in 2012. Unfortunately his list can be hard to find and is somewhat
out of date. 
&lt;/p&gt;

&lt;p&gt;
The idea of an "awesome" list is publicly hosting a simple site that
is community driven and anyone can suggest additions and edits. 
&lt;/p&gt;

&lt;p&gt;
I put up a starter &lt;a href="https://github.com/zamansky/awesome-cs-education"&gt;here&lt;/a&gt; and a few people have contributed but I'd love
to get more people involved. Awesome lists have a number of advantages
over other repositories.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Unlike blog posts, the site is easy to find.
&lt;/li&gt;
&lt;li&gt;Unlike private mailing lists or Facebook, anyone can see the content.
&lt;/li&gt;
&lt;li&gt;Anyone can suggest additions (although you need to create a Github
account).
&lt;/li&gt;
&lt;li&gt;Anyone can download or fork the site.
&lt;/li&gt;
&lt;li&gt;It's essentially plain text and is easy to edit (just read the
&lt;a href="https://github.com/zamansky/awesome-cs-education/blob/master/contributing.org"&gt;contribution guide&lt;/a&gt;).
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So, there you have it. If you have a blog or resource to share please
submit a pull request. Over time this could be a terrific single
starting point for educators to get to a wealth of resources.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pd" label="pd"/>
    <category term="resources" label="resources"/>
  </entry>
  <entry>
    <title>New Term New Tool - Thonny, a Python IDE</title>
    <id>http://cestlaz.github.io/posts/new-tool-thonny/</id>
    <updated>2017-09-21T07:31:42-04:00</updated>
    <published>2017-09-21T07:31:42-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/new-tool-thonny/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Last year I &lt;a href="https://cestlaz.github.io/posts/new-term-new-tool-replit"&gt;wrote about&lt;/a&gt; &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;, an online IDE that supports multiple
languages. At the time it had some rudimentary classroom support and
since I started using it, repl.it has become better and better. I
used it last year with my class because I had to start the year in a
lab where I couldn't easily install my own software. I'll continue to
use repl.it - mostly for it's ability to schedule publish and manage
assignments but when possible, I like having my students work
locally. 
&lt;/p&gt;

&lt;p&gt;
This year I'm excited about another tool - &lt;a href="http://thonny.org"&gt;Thonny&lt;/a&gt;. Thonny's a simple
Python IDE designed for beginners. I discovered it last year but at a
time when it was impractical for me to use with my students. This
year I can and I'm really liking it. I'm still an Emacs guy and will
continue to use Emacs for my python development (&lt;a href="http://cestlaz.github.io/posts/using-emacs-12-python/"&gt;video 1&lt;/a&gt;, &lt;a href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet"&gt;video 2&lt;/a&gt;) but
for beginners I think Thonny is the way to go.
&lt;/p&gt;

&lt;p&gt;
Some of Thonny's highlights:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An integrated Python 3 virtual environment making for ease of
installation and consistency across student installs
&lt;/li&gt;
&lt;li&gt;A debugger that shows how expressions are evaluated
&lt;/li&gt;
&lt;li&gt;Great visualizations of function calls that make it easier to
understand the call stack and scope
&lt;/li&gt;
&lt;li&gt;The ability to look at memory to understand references.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Rather than go into the gory details in text, I put together this
video:
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;

&lt;/p&gt;


&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/lWaCl0WjNZI"&gt;https://www.youtube.com/embed/lWaCl0WjNZI&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="teaching" label="teaching"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>I Believe CS Teachers are Smart and Capable</title>
    <id>http://cestlaz.github.io/posts/cs-teachers-smart/</id>
    <updated>2017-09-15T18:17:21-04:00</updated>
    <published>2017-09-15T18:17:21-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/cs-teachers-smart/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
People sometimes accuse me of being an elitist CS snob that I feel that CS
teachers have to have advanced CS degrees. 
&lt;/p&gt;

&lt;p&gt;
It's not that at all. Rather, I feel that CS teachers are smart and
capable. Circumstances frequently result in a teacher in front of a CS
class with limited content and pedagogical content knowledge. It's not
ideal but it's reality. Of course I feel that we should do everything
to support and encourage these teachers but we should also insist that
after a reasonable period of time, they know their stuff.
&lt;/p&gt;

&lt;p&gt;
This is why I hate it when I hear people in the CS Ed community say
something is too hard. Git's too hard. The command line is too
hard. Functional programming's too hard &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;. That's all nonsense. At last
year's SIGCSE conference people from a state, I forget which, was
considering not using the Praxis exam for CS teacher certification
even though the state uses the Praxis exam for other subject
areas. They claimed that the praxis was too hard for CS teachers. 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/praxis.jpg" alt="praxis.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I haven't taken the Praxis exam but some friends have. It doesn't
appear to be unreasonable at all&lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
While I can certainly understand a teacher not knowing much when they
start - thrown in due to necessity I think it's ridiculous not to
insist that they ultimately get to real mastery.
&lt;/p&gt;

&lt;p&gt;
A math teacher generally has to know math beyond calculus. Science
teachers have to have gotten through Orgo. English teachers have to
understand Joyce. **THIS IS HARD STUFF!!!!**&lt;sup&gt;&lt;a id="fnr.3" name="fnr.3" class="footref" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
I think it's insulting to say that CS teachers aren't capable of doing
the same in their subject area.
'
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;whether or not any of
these topics are appropriate for a particular course is discussion for
another time&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;although I'm not a big believer
in standardized exams for certification or in general.&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" name="fn.3" class="footnum" href="http://cestlaz.github.io/posts/cs-teachers-smart/#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;There are plenty of
lousy teacher prep programs that don't ensure teachers learn the
subject matter they should but the good ones do.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
  </entry>
  <entry>
    <title>Theseus's Curriculum</title>
    <id>http://cestlaz.github.io/posts/theseus%27s-curriculum/</id>
    <updated>2017-09-05T18:41:14-04:00</updated>
    <published>2017-09-05T18:41:14-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
With the school year starting I was originally planning on writing
about my class rules. 
&lt;/p&gt;

&lt;p&gt;
Instead I think I'll riff on &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;'s post today titled
&lt;a href="http://blog.acthompson.net/2017/09/curriculum-is-hard.html"&gt;Curriculum is Hard&lt;/a&gt;. I'm guessing I found curriculum design and
development daunting decades ago but at this point in my career it's
something I enjoy. In any event, Alfred got me to thinking - when is a
curriculum your own?
&lt;/p&gt;

&lt;p&gt;
If you grab a curriculum complete with lesson plans, assignments; the
whole kit and caboodle and you use it verbatim it's clearly not your
curriculum. It probably also isn't really teaching.
&lt;/p&gt;

&lt;p&gt;
What about the more common case. Math curricula has basically been set
for years. Algebra, Geometry &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;, and then Algebra 2
and Trigonometry. Most books seem to be sequenced in a similar way
and at least in the schools I know about, the math department has some
document listing a day by day list of topics. This makes sense since
you probably have more than one class of each type and you want some
cross class consistency. Particularly during the first weeks of the
semester when kids can transfer and then also at the end of term or
year. 
&lt;/p&gt;

&lt;p&gt;
When a teacher uses that departmental document are they using someone
elses curriculum?
&lt;/p&gt;

&lt;p&gt;
What if they create their own homeworks and assigments?
&lt;/p&gt;

&lt;p&gt;
Most teachers I know use the department's curriculum but make their
own unit and day to day lesson plans. Most revise them each
semester. Typically these teachers do a little more here or a little
less there depending on a number of factors.
&lt;/p&gt;

&lt;p&gt;
Are they creating their own curriculum?
&lt;/p&gt;

&lt;p&gt;
What if they re-sequence the topics?
&lt;/p&gt;

&lt;p&gt;
How about adding an enrichment topic?
&lt;/p&gt;

&lt;p&gt;
Back when I taught math I used the departmental syllabus, as many
texts as I could find, colleagues lesson plans and whatever I could
find but I always pulled it together to something I could call my
own. If I didn't, I wouldn't have been comfortable going in front of
my class. Was it my curriculum? They were certainly my lessons.
&lt;/p&gt;

&lt;p&gt;
Now, when designing a course I start from the end outcomes and work
backwards but when teaching a course, I still look at as many
resources as I can find. I'll pull a little from here, a little from
there and combine that with whatever I can come up with myself.
&lt;/p&gt;

&lt;p&gt;
So, when is it your curriculum and when is it not? 
&lt;/p&gt;

&lt;p&gt;
If you're just delivering scripted lessons it's certainly not yours.
&lt;/p&gt;

&lt;p&gt;
If you know your stuff and you  take someone elses material, make it
your own and add it to your bag of tricks, I think it's now yours as
well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;which is really logic and deductive
reasoning using Euclidean Geometry as platform&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="currulum" label="currulum"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>CS Teachers - we need you to blog</title>
    <id>http://cestlaz.github.io/posts/cs-teachers-blog/</id>
    <updated>2017-08-25T15:52:23-04:00</updated>
    <published>2017-08-25T15:52:23-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/cs-teachers-blog/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
At this past year's CSTA conference, a few of us huddled in a corner
voiced a very common lament - "it would be great if more CS teachers
blogged." It really would be. We're still a relatively small
community and while there's some good conversation going on on
mailing lists and on Facebook, those aren't easily discoverable or
accessible and in the case of Facebook, there's a question of
ownership and permanence.
&lt;/p&gt;

&lt;p&gt;
I've been blogging on and off since 2010. Around 300 posts. Not super prolific
but I've been doing it long enough to maybe be able to share a bit of
perspective.
&lt;/p&gt;

&lt;p&gt;
I'm not sure exactly why I started. In part I was inspired by my wife
who at the time was blogging about her &lt;a href="http://squid-knits.blogspot.com/"&gt;knitting&lt;/a&gt;. I was also inspired
to share my thoughts after meeting some fellow CS teachers from across
the country at a &lt;a href="http://cestlaz.github.io/posts/2010-01-02-welcome.html"&gt;CSTA event in Chicago&lt;/a&gt;. It was stop and go for a while
and then I took a break. I was re-inspired months later after meeting
a couple of CS teachers at another CSTA event - &lt;a href="https://twitter.com/search?q=ben%2520chun&amp;amp;src=typd"&gt;Ben Chun&lt;/a&gt; and &lt;a href="https://twitter.com/purplespatula"&gt;Helene
Martin.&lt;/a&gt; Both terrific high school CS teachers at the time who are
unfortunately no longer in the classroom (unfortunate for the kids, I
wish Ben and Helene all happiness and success in all their
endeavors). We all agreed to try to write more and that got me started
again. I've been posting around 50 times a year since.
&lt;/p&gt;

&lt;p&gt;
Looking back to when I used blogger, I had 30 - 50 hits on some early
posts and that was mostly just me hitting the site. It didn't matter.
Writing has let me work through my thoughts. It also creates a record of
my thoughts and on how my thinking evolves over time. 
&lt;/p&gt;

&lt;p&gt;
Over time, people have told me that they've found some of the things
I've written useful or helpful and I'd argue that when people disagree
with something I write, even if they don't comment and I've all I've
evoked is a reaction of "Z's full of crap," it's gotten them to
re-evaluate their own thoughts on whatever the subject and if it's
confirmation of their original beliefs, that's OK.
&lt;/p&gt;

&lt;p&gt;
The important thing is that by blogging I'm getting my thoughts down
"on paper" and sharing them for the world to take or leave as they
please and the more of us who do this, the more we expand the sum
knowledge of CS teaches. 
&lt;/p&gt;

&lt;p&gt;
As a dispersed community of CS teachers across the country, we need
more people blogging on public platforms not in silos like Facebook.
&lt;/p&gt;

&lt;p&gt;
I've heard reasons why teachers don't blog:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I'm new and have nothing to write about&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Sure you do – write a paragraph about your plans for the days lesson
or how it went. Vent your frustrations (but be careful not to get
yourself in trouble). Rave about some students work.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I don't have time&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Yes, this is a tough one. If you have to do PD time, maybe your
supervisor will let you use it for blogging. To be honest, when I'm
writing regularly it doesn't take that long. When I haven't written in
a while it takes longer. In any event. It's important and posts don't
have to be long
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I'm not a great writer&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
This blog is proof that you don't have to be. I'm stilted and ramble
and certainly no Shakespeare. I am the weakest writer in my household
and it's not even close. Even so, we all have something to share.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;I don't know how&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
I was thinking about proposing a session at next years CSTA conference
where I'd work the group through creating a github pages based
blog. In the meantime, there are a lot of easy ways to start out.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://blogger.com"&gt;http://blogger.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wordpress.com"&gt;http://wordpress.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and for those who want total control
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; with &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
So, there's my plea. If you're a CS teacher and you're reading this
please consider blogging. I assure you, we will all appreciate it and
benefit from it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="community" label="community"/>
    <category term="cs" label="cs"/>
  </entry>
  <entry>
    <title>Teaching APCS-A for the first time</title>
    <id>http://cestlaz.github.io/posts/teaching-ap-first-time/</id>
    <updated>2017-08-23T15:56:46-04:00</updated>
    <published>2017-08-23T15:56:46-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/teaching-ap-first-time/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I got  an email from a friend the other day. Among other things, he
mentioned that he would be teaching APCS-A for the first time this
year. He's a little trepidatious. He knows his stuff but he hasn't
really done much using Java.
&lt;/p&gt;

&lt;p&gt;
I was going to respond in an email but thought I might share here
instead.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
TL;DR - for all you APCS teachers who are new or new to Java - learn
your core CS, lean on your resources and support and it's OK to tell
your kids "I don't know, I'll get back to you.". Don't worry, you'll be great.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The first time I taught APCS was some time around 1991 or 1992. It was at
&lt;a href="http://www.sewardparkhs.com/Famous-Alumni/"&gt;Seward Park&lt;/a&gt; &lt;a href="http://www.sewardparkhs.com/History/"&gt;High School&lt;/a&gt;. It was the AB curriculum - that is one
semester of programming in Pascal and one semester of Data Structures
and Algorithms.  Being a computer science major the core material was
never a concern. I had taken APCS the first time it was offered in May
1984 in Pascal and while most of my college and pre-teaching professional work
was in C, my college started it's CS sequence with Pascal. I was more
concerned with the actual teaching part. I had taught math for a year
and a half at that point but never CS and by any measure I was still
wet behind the ears. I never finished that first experience because I
was excessed to Stuy mid semester. I wasn't particularly happy with my
performance but looking back, I think I did a pretty good job given
the situation and my experience.
&lt;/p&gt;

&lt;p&gt;
After teaching math for a year and a half I was back in APCS at
Stuy. Still in Pascal. I spent the next few years figuring out how to
teach CS and APCS in particular along with starting a couple of new
classes. When the College Board decided to move the AP class to C++ I
was happy, sad and a little worried. Pascal had a bunch of limitations
but I had never used C++. True, I was a C programmer at heart but I
had never really done the OOP thing. I did, as it turned out, design a
number of my C systems in an Object Typed design: I would use a single
file per "class" where local variables were de facto instance
variables and functions in the file were methods and each file was a
singleton class. I read &lt;a href="https://www.amazon.com/Object-Oriented-Analysis-Design-Applications-3rd/dp/020189551X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1503519770&amp;amp;sr=8-1&amp;amp;keywords=Grady+Booch"&gt;Booch&lt;/a&gt; and &lt;a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=asap_bc?ie=UTF8"&gt;Meyer&lt;/a&gt; on my own but I had no
schooling in OOP and no professional experience.
&lt;/p&gt;

&lt;p&gt;
As it turned out, I didn't have to worry. I knew my CS and while it
took me a while to become comfortable with OOP, the class, and of
course I knew this from the get go, started from nothing and built
up complexity a step at a time. The worst that might have happened is
that some of my solutions might have been more C-esque than C++.
&lt;/p&gt;

&lt;p&gt;
The move to Java was a little more jarring. Now we had a totally new
language. I couldn't fall back on C. It removed memory management and
explicit pointers and it had to be used in an Object Oriented
manner. I remember asking Mike Schidlowsky, a former student turned
friend who was the Java consultant on the Java edition of Sedgewick's
&lt;a href="https://www.amazon.com/Robert-Sedgewick-Algorithms-Fundamentals-Structures/dp/B008VR3ZH4/ref=sr_1_4?ie=UTF8&amp;amp;qid=1503520269&amp;amp;sr=8-4&amp;amp;keywords=schidlowsky"&gt;Algorithms&lt;/a&gt; book how to do something. It had to do with passing and
modifying arrays. In C there were a number of ways to accomplish what
I wanted to do. In Java, I couldn't figure out how to do it the way I
wanted. My friend Mike told me "you just don't do it that way in
Java." Again, it turned out that I didn't have to worry. The basic
coding was still the same as were the data structures and
algorithms. The only challenge was that I had to get into a Java OOP
mindset which it turned out wasn't that hard. 
&lt;/p&gt;

&lt;p&gt;
While I never really warmed up to OOP - I find other paradigms more
natural for me, I knew my CS and got more and more comfortable with
the Java (or C++) way of doing things as time wore on. Sometimes I
would say "I don't know" or "let's figure it out" but that's OK.
&lt;/p&gt;

&lt;p&gt;
Nowadays, there are many more resources available for CS teachers. If
you're new, lean on them. Use the mailing lists, stackexchange,
facebook groups. Online resources like repl.it, codehs.com etc. Yes,
it's true that you'll be better next time around and even better years
down the road but right now, you're probably better than you think.
&lt;/p&gt;

&lt;p&gt;
A number of my former students volunteer for &lt;a href="https://www.tealsk12.org/"&gt;TEALS&lt;/a&gt; - a really great
program that brings software engineers into the classroom to work with
non-CS teachers to deliver instruction. A number of my kids have
shared the following sentiment: 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
I don't know if I'm really helping
the teacher to become self sufficient or if I'm a great teacher but I
do know one thing - while I'm there, the kids are getting a hell of a
lot more than if I wasn't there." 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
– Remember that as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="ap" label="ap"/>
    <category term="apcs" label="apcs"/>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Thoughts on non educator  influences on CS Education</title>
    <id>http://cestlaz.github.io/posts/outside-influences-on-cs-ed/</id>
    <updated>2017-07-29T11:40:02-04:00</updated>
    <published>2017-07-29T11:40:02-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/outside-influences-on-cs-ed/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Yesterday &lt;a href="https://twitter.com/guzdial"&gt;Mark Guzdial&lt;/a&gt; blogged about a NY Times piece discussing
&lt;a href="https://computinged.wordpress.com/2017/07/28/silicon-valley-pushing-coding-into-american-classrooms-through-code-org-nytimes/"&gt;Silicon Valleys influence on education through Code.org&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Mark questioned the validity of the piece. If you don't read Mark's
blog and you're in CS Ed you probably should. 
&lt;/p&gt;

&lt;p&gt;
I tried to leave a comment on Mark's blog - not about the NY Times
article but rather my thoughts on why I think it's important that we
remain wary and vigilant to industry and outsiders influence and
impact on CS education and on education in general.
&lt;/p&gt;

&lt;p&gt;
I don't know if my comment is sitting waiting for Mark to moderate or
if I'm experiencing WordPress weirdness but since it hasn't shown up
there, I thought I'd share it here:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
While the article might not make a strong case it's important to be wary of outside influences on education policies. 
&lt;/p&gt;

&lt;p&gt;
I'm a fan of a lot of what code.org does but speaking about outsiders in general…
&lt;/p&gt;

&lt;p&gt;
Bill Gates and Co. directly or indirecty gave us such delights like stack ranking teachers, improving, I mean evaluating, I mean firing teachers based on test scores of students they don't teach, more and more high stakes nonsense testing for kids, and  at least in NY the destruction of neighborhood schools. 
&lt;/p&gt;

&lt;p&gt;
They've also pushed the current charter movement that, aided by misleading stats appear successful but in truth are no better and frequently worse than public schools while not sharing back a single "best practice."
&lt;/p&gt;

&lt;p&gt;
Then we have private companies like the College Board and Pearson both of whom have an outsized influence on US Ed policy and curriculum.
&lt;/p&gt;

&lt;p&gt;
I don't doubt the good intentions of code.org - as I said, I'm a fan. I am concerned when they and others take actions that can affect ed policy. I'm concerned when code.org representative pushes students to take an AP exam - not a great CS course with a great CS teacher but the actual exam. I'm even more concerned when code.org offers free PD when a school signs up for the PSAT8/9 - another high stakes meaningless test at taxpayer expense. For code.org it's a means to  get more CS ed out there. To me it's setting up a new cash cow for the college board at my expense and at students expense.
&lt;/p&gt;

&lt;p&gt;
I've seen many Ed Tech people, armed with the best intentions, enter the lions den – a school, district, or municipality only to see their best intentions corrupted in the name of cost cutting, profits, or politics.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>CS Ed advocates should pay attention to greater ed issues</title>
    <id>http://cestlaz.github.io/posts/cd-ed-and-all-ed/</id>
    <updated>2017-07-18T19:51:40-04:00</updated>
    <published>2017-07-18T19:51:40-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/cd-ed-and-all-ed/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
For anyone involved in K12 CS education, the past few years have been
a wild ride. When I first tried to make inroads in the DOE decades ago
I couldn't get through the door. Now, CS Education is everyone's
darling. It's really amazing. It's been a combination of grass roots
efforts by teachers, non profit education efforts such as &lt;a href="http://teals12k.org"&gt;TEALS&lt;/a&gt;, advocacy of
groups like &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; and amazing individuals like &lt;a href="http://avc.com/2017/06/bearing-witness/"&gt;Fred Wilson&lt;/a&gt; who has
probably done more to move the needle of CS Ed in NY than any other 10
people combined.
&lt;/p&gt;

&lt;p&gt;
While everyone agrees that to do CS education right at the K12 level
we need great teachers and lots of them, everyone also knows that
teachers voices are often unheard. The voices with the greatest weight
belong to the large non-profits, principals, superintendents and
local politicians. 
&lt;/p&gt;

&lt;p&gt;
Today's post is a plea to those with voices to think about the effects
of their advocacy for CS Ed to the greater education landscape.
&lt;/p&gt;

&lt;p&gt;
I started thinking about this recently as I've been developing the
CS teacher certification programs for Hunter College. As I spoke to
people across the nation I found that many of the efforts to
developing teacher certification are what I call the "you take it you
teach it" model. You take an abbreviated version of APCS-A and APCS-P
and you're a certified CS teacher. Just about every real educator feels
that this is ludicrous. Some feel that this can be a first step - get
these credentials to get in the door and then you have three to five
years to really learn your subject and craft. I'm good with that but I
have a problem with anyone who says "you take it you teach it" is good
enough and I've heard of a number of regions that are seriously
considering it.
&lt;/p&gt;

&lt;p&gt;
Why is this so bad and, I'd argue, dangerous? Not merely because we'll
end up with substandard CS teachers for the foreseeable future but
also because it undermines the teaching profession as a whole.
&lt;/p&gt;

&lt;p&gt;
It's no secret that public education is under attack. A number of
states including Wisconsin, Arizona, Oklahoma, New York and Michigan
have considered relaxing the standards to become a teacher to address
a teacher shortage. In their twisted logic, the politicians and
"reformers" say that we can't find enough qualified teachers because
we've made it an untenable career so let's lower standards. You can
argue that any current state's requirements are overly cumbersome but
that's another conversation.
&lt;/p&gt;

&lt;p&gt;
When CS Educators say that all that's needed to teach CS is to sit in
on a two week APCS institute is saying that to teach any subject you
don't need content expertise. This is dangerous to education as a
whole and when power players in the CS Ed movement don't speak up
otherwise or even worse that the stance that "you take it you teach
it" is OK, we're undermining teaching as a profession. 
&lt;/p&gt;

&lt;p&gt;
We need our heavy hitters to publicly and privately say that we need a
short term entry into the profession but we absolutely need plans and
pathways so that at the end of the day we have the best prepared
teachers in our schools for CS and for all subjects.
&lt;/p&gt;

&lt;p&gt;
Another issue is when as CS Educators we don't pay attention to the
whole child. I was at a meeting of CSTA people  from about thirty
states a few years ago. Someone asked "how can we advocate for CS when
the school might use it as an excuse to get rid of music?" Cameron
Wilson, at the time a lobbyist for the ACM said something to the
effect of "I'm not concerned with other subjects, my concern is
getting CS into the schools." I get it, he was employed to stump CS
but we have to remember that we're only a piece of the puzzle. We want
a seat at the table but we have to make sure that the table is
populated with everyone needed to provide a great education for our
kids. 
&lt;/p&gt;

&lt;p&gt;
A final issue I'll mention here is how so many CS educators are so
close to the College Board. It was very disturbing that so many CS Ed
players were pushing for more students to take the APCS exam. Not the
class, not some other CS class but the APCS exam. AP is an extremely
controversial subject among teachers and many of us feel that too many
kids take too many AP classes and certainly too many exams. Remember,
the College Board is the organization that pushes things like the
PSAT8/9 another meaningless but high stakes exam inflicted upon our
kids at taxpayer expense. I understand that AP makes things easy -
they have courses, curricula, etc. but we've given the college board
an outsized influence on CS education and we're not paying attention
to their outsized influence on education in general. 
&lt;/p&gt;

&lt;p&gt;
I'm just a small time teacher. I don't have a national voice. I'm
urging those that do:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Look into what's going on in greater education. Look at the way
public education has been under attack and why.
&lt;/li&gt;
&lt;li&gt;Look at the side affects of our choices - who we partner with and
what policies we push.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We might not agree on the right path but everyone with a voice in CS
Education should be having hard conversations about this and then
strongly advocating for the positions they feel correct.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>A friendly reminder to use the right language when describing CS</title>
    <id>http://cestlaz.github.io/posts/languages-or-cs/</id>
    <updated>2017-07-10T21:17:47-04:00</updated>
    <published>2017-07-10T21:17:47-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/languages-or-cs/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was part of this conversation the other day:
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;blockquote class="twitter-tweet" data-lang="en"&amp;gt;&amp;lt;p lang="en" dir="ltr"&amp;gt;When science teachers asked me if I taught AP Java I&amp;amp;#39;d always respond by asking them if they taught AP Microscope.&amp;lt;/p&amp;gt;&amp;amp;mdash; Mike Zamansky (@zamansky) &amp;lt;a href="&lt;a href="https://twitter.com/zamansky/status/883327927831711745"&gt;https://twitter.com/zamansky/status/883327927831711745&lt;/a&gt;"&amp;gt;July 7, 2017&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
I always use that line to emphasize that I teach CS - a way of
thinking and problem solving and looking at the world. The languages
we use in our classes are tools to help us communicate ideas not the
ends but rather a means.
&lt;/p&gt;

&lt;p&gt;
I've spent the past couple of days at the CSTA conference. It's been a
lot of fun. I've been spending the time with old friends and meeting
new ones and as everyone who knows me knows - I love talking shop. 
&lt;/p&gt;

&lt;p&gt;
I overheard a conversation today. One CS teacher describing what they
did to a few others. I overheard:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
We teach Scratch then Swift and C++ and also teach Python
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I heard statements like this describing programs more than a couple of
times. I know we're at a conference of CS Educators but even in this
community we have everything from beginners getting their feet wet to
hardcore computer scientists to everything in between.
&lt;/p&gt;

&lt;p&gt;
We shouldn't be teaching languages as an ends unto themselves and the
majority of us don't.
&lt;/p&gt;

&lt;p&gt;
What many of us do, though, is take the easy path and use the name of
a programming language to describe what we do rather than really
define what we do. This is why we hear "I teach Java" or "I teach a
class in Swift" even when the teacher teaching Java might really be
teaching Object Oriented program design and development or data
structures or something similar just using Java as the language or
tool.
&lt;/p&gt;


&lt;p&gt;
I too fall into this trap but I try to catch myself. I try not to say
"I teach Scheme" but rather I'll say "I teach Scheme. Actually, we're
studying functional programming using Scheme as the language but for
convenience, I'll just say Scheme for the rest of this talk…."
&lt;/p&gt;

&lt;p&gt;
The words we use to describe our field set the tone. If we're sloppy
and say "we teach Java," it's just like biology teacher saying "I
teach microscope." 
&lt;/p&gt;

&lt;p&gt;
As we try to define our field in the K12 space and seek equal footing
with established subject areas it's important that we use the right
language so that other educators and policy makers don't get the wrong
idea.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="csed" label="csed"/>
    <category term="education" label="education"/>
  </entry>
  <entry>
    <title>Disclosing Bugs - requiring a project roadmap</title>
    <id>http://cestlaz.github.io/posts/disclosing-bugs/</id>
    <updated>2017-06-13T16:30:27-04:00</updated>
    <published>2017-06-13T16:30:27-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/disclosing-bugs/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over on Facebook, a fellow CS educator &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/disclosing-bugs/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; made a comment on something he
wanted to try with his students this summer: having the students
pre-disclose bugs when they submit their projects.
&lt;/p&gt;

&lt;p&gt;
The post was asking for any links to "the literature." I can't speak
to that but I I've done something similar to what the post was asking
about so, as per usual, I thought I'd write about it here. It may not
be "research" but I'm more interested in teacher practices than ivory
towers anyway so here goes…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
At a very basic level, I ask my students to provide a roadmap to any
project they submit - usually in a readme file. I basically ask:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;How to use the project
&lt;/li&gt;
&lt;li&gt;What's cool and I should make sure to check out
&lt;/li&gt;
&lt;li&gt;What doesn't work, where were the sticking points and what's the
status.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I tell my students that when I test the project, I'm not "out to get
them" and by their telling me how to navigate the project, it makes
sure I see things in the best possible light. I also tell them that I
will be more harsh on bugs that they don't tell me about -
particularly bugs that only occur some of the time.
&lt;/p&gt;


&lt;p&gt;
I also encourage (and sometimes require) that students maintain a
changelog in their repo and also sometimes encourage them to have a
todo list and list of bugs and for longer projects, I expect to see
these and the readme updated over the course of the project (which
should always be up to date on &lt;a href="https://cestlaz.github.io/posts/sigcse-2017-github-4"&gt;GitHub&lt;/a&gt;, Dropbox or wherever the project
is living). 
&lt;/p&gt;

&lt;p&gt;
When the students provide a good write up it makes evaluating the
project much easier.
&lt;/p&gt;


&lt;p&gt;
When students buy in, they're hopefully thinking more deeply about
their projects in terms of design and implementation and also from the
point of view of someone else using their product. When they maintain
the readme and other files over time, it also enables me to better
support them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
So, does this work? Yes but with some caveats. It works better once
the class and teacher know each other. If the students trust the
teacher they're more likely to be open and honest when they write up
the project. On the other hand, there will always be some students to
"phone it in" and do the bare minimum in terms of writing up their
projects.
&lt;/p&gt;

&lt;p&gt;
The bottom line is that having the students do this is has a low cost
and is beneficial to both the students and the teacher. When it works,
it's great and when it doesn't, it's still pretty good.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/disclosing-bugs/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I'm not sharing names from the Facebook post because it was
made in a semi-private forum and I haven't asked permission.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>A* is born</title>
    <id>http://cestlaz.github.io/posts/a-star-is-born/</id>
    <updated>2017-06-05T18:42:55-04:00</updated>
    <published>2017-06-05T18:42:55-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/a-star-is-born/"/>
    <summary type="html">&lt;p&gt;
Over on the &lt;a href="https://cseducators.stackexchange.com/"&gt;CS Educator StachExchange&lt;/a&gt;, which is in private beta for a
few more days, I saw a post asking about how to introduce the &lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A*
search algorithm&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I taught A* as part of the APCS class at Stuy so I thought I'd talk
about what I did here.
&lt;/p&gt;

&lt;p&gt;
Some time around mid year, we get to intermediate recursion. This is
about the time, give or take, when we talk about the nlogn sorts.
&lt;/p&gt;

&lt;p&gt;
We also build a recursive maze solver. It's a nice algorithm and a
nice little program. It's around 15 lines of code to perform a
recursive depth first search:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/astar/dfs.gif" alt="dfs.gif" align="center" height="200px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The basic algorithm is:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* solve the maze from an x,ylocation */&lt;/span&gt;
&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Yay&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;wall&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;
     &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's a nice lesson because in addition to all the recursion stuff, we
also get to talk about state space, state space search, backtracking,
efficiency concerns and much more. After we finish the maze solver, we also talk about
other problems that can be similarly examined using state-space search
like the knights tour and N-queens problems. 
&lt;/p&gt;

&lt;p&gt;
A month or so later, when we're learning about stacks and queues as
data structures, we revisit the maze solver. This time we solve the
problem in a more general way. We talk about using a data structure to
hold the set of nodes that we're aware of and that we want to visit
next. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;goal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;adjacent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;isn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;yet&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;
     &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As we write the solution, we see that using a queue for this
data structure yields a breadth first search:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/astar/bfs.gif" alt="bfs.gif" align="center" height="200px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
while using a stack yields depth first. 
&lt;/p&gt;

&lt;p&gt;
All of this leads to a discussion as to how deciding on which
locations to look at next can greatly influence the steps to the
exit. From here it's easy to see that you can use a heuristic to order
the nodes in our data structure so that we explore "better"
possibilities first. The data structure becomes a priority queue and
we finally get to both "best first" and A* search:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/astar/astar.gif" alt="astar.gif" align="center" height="200px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It's a nice sequence of lessons, albeit lessons spread out over
months. The end result is that the students see both the need and
motivation for something like A* and they see that it's not hard to
implement. One basic routine where you can plug in one of three data
structures - stack, queue, or priority queue to get very different
results.
&lt;/p&gt;</summary>
    <category term="algorithms" label="algorithms"/>
    <category term="cs" label="cs"/>
    <category term="data-structures" label="data structures"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>A new first language? What's the follow up plan?</title>
    <id>http://cestlaz.github.io/posts/first-language-changing/</id>
    <updated>2017-04-21T14:46:07-04:00</updated>
    <published>2017-04-21T14:46:07-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/first-language-changing/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This morning, &lt;a href="https://twitter.com/guzdial"&gt;Mark Guzdial&lt;/a&gt; wrote about Stanford possibly &lt;a href="https://computinged.wordpress.com/2017/04/21/cs-department-updates-introductory-courses-java-is-gone/"&gt;moving away
from Java&lt;/a&gt; as their intro language. This comes on the heels of a
semi-regular thread on one of the lists I'm on asking about what
languages are used at assorted colleges around the country. Invariably
the Pascal -&amp;gt; C++ -&amp;gt; Java progression of APCS turns up in these
threads.
&lt;/p&gt;

&lt;p&gt;
There are plenty of arguments to be made both for and against pretty
much any language or platform. There's no single best universal
answer. Each choice giveth and each choice taketh away. 
&lt;/p&gt;

&lt;p&gt;
What I'm really curious about is who's looking at intro languages in
the context of complete programs or even complete educations that
could span multiple institutions.
&lt;/p&gt;

&lt;p&gt;
Early language choices can make a big difference in engaging and
exciting newcomers but there are ramifications later on that few seem
to consider.
&lt;/p&gt;

&lt;p&gt;
Take the APCS change from C++ to Java. It removed memory management
from the first year course. It also simplified issues relating to
pass by value vs pass by reference (or, rather, passing address by
value), bought much more strongly into OOP and moved more towards
using built in implementations of data structures like Lists rather
than rolling your own.
&lt;/p&gt;

&lt;p&gt;
Removing memory management from the first year course in and of itself
isn't a problem as long as it's taught and taught effectively
somewhere later on. It could be argued that "memory is already covered
in our required systems course." That could be the case, but there are
many concepts that kids don't get the first time around. Is an
institution that covered memory management in CS1/2 and then came back
to it in a later Systems course giving their students the same
understanding now that they've eliminated the CS1/2 experience? 
&lt;/p&gt;

&lt;p&gt;
What about OOP buy in. Personally, I've never been a big OOP fan but
that's neither here nor there. What I have found is that depending on
how a student is exposed to programming in CS1/CS2 can have a big
influence on how they approach problems later. Did the move to Java
cause more of our students to try to use shoehorn OOP into a problem
that really shouldn't be approached in an OOP manner?
&lt;/p&gt;

&lt;p&gt;
I suspect that the use of built in data structures has had a
negative impact. A few years after the switch to Java, I was talking
to a senior tech worker. He was having a bad day - interviewing
potential internees and full time engineers. My friend was complaining
that the kids couldn't come up with solutions to what he thought were
pretty straightforward questions. He felt that had the kids actually
implemented algorithms like the nlogn sorts rather than just learning
java .sort method and just talking about the algorithm they'd be
better prepared. I've heard this sentiment repeated over and over
throughout the years.
&lt;/p&gt;

&lt;p&gt;
This is not to say that Java is a horrible language or horrible for
teaching - that's another debate. The point is that you can't just
look at the intro class and who it draws in. You have to consider how
it will prepare students for the next level and you have to look at
the big picture – will our students get everything they need by the
time they leave us.
&lt;/p&gt;

&lt;p&gt;
Many schools have moved to Python. Will that effect students take on
type systems later on? Will the flexibility and constructs like list
comprehensions make it harder to teach recursion since there are
"easier" ways to do it? 
&lt;/p&gt;

&lt;p&gt;
None of these are really problems so long as the CS1/2 (or even CS0)
isn't taught in a vacuum. 
&lt;/p&gt;

&lt;p&gt;
I fear, however that too often we're paying attention to the intake of
the pipe and not so much the output.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="langauges" label="langauges"/>
    <category term="pedagogy" label="pedagogy"/>
  </entry>
  <entry>
    <title>SIGCSE 2017 - a path to github part 1</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-github-1/</id>
    <updated>2017-03-16T09:11:00-04:00</updated>
    <published>2017-03-16T09:11:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-github-1/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes. 
&lt;/p&gt;

&lt;p&gt;
This series is not meant to be a git or &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I've linked to below).  This is
about the process I use with my students to get them up to speed. 
&lt;/p&gt;

&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool. 
&lt;/p&gt;

&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I'll talk about that at the end of the
series.
&lt;/p&gt;


&lt;p&gt;
Here's part one. 
&lt;/p&gt;

&lt;p&gt;
I'm doing this with git and GitHub but there's no reason why other
systems and hosts can't be used. I'd also recommend that any educator
or student sign up for the assorted &lt;a href="https://education.github.com/"&gt;discounts&lt;/a&gt; offered by GitHub.
&lt;/p&gt;

&lt;p&gt;
I've followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Step 1 - code distribution&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
To start, I don't even talk about version control. We start with code
distribution. For years, I've looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments. 
&lt;/p&gt;

&lt;p&gt;
I've tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.
&lt;/p&gt;

&lt;p&gt;
At Stuy, we've always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.
&lt;/p&gt;

&lt;p&gt;
Uploading to a CMS system was also problematic - I'm a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.
&lt;/p&gt;

&lt;p&gt;
Enter git. Now, of course, if you're going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://try.github.io/"&gt;https://try.github.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0fKg7e37bQE"&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href="https://classroom.github.com/"&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don't use it because, as I said,
I'm an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I'd take some time to look at their
current offerings before jumping in.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Set up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;This&lt;/a&gt; help page
has more information. You'll want to register an ssh key from every
machine you use - home, work, laptop. 
&lt;/p&gt;


&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;b&gt;&lt;b&gt;classcode&lt;/b&gt;&lt;/b&gt;. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; when creating the repo, make sure to
check the "initialize this repository with a README" box. If you don't
you'll be given a set of instructions on how to set things up once you
click &lt;b&gt;&lt;b&gt;Create repository&lt;/b&gt;&lt;/b&gt; but it's easier and easier to follow if
you start with an initialized repo with a README.
&lt;/p&gt;

&lt;p&gt;
I make the repo public – it's code I'm distributing – nothing to
hide here. If you aren't comfortable with that, just make the repo
private. If you've registered as a teacher with GitHub, you can set up
an organization and you'll be able to set up free private repos within
it. The other downside here is that you'll have to individually give
each student access to the repo. That's a mild annoyance but it only
has to be done once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Teacher use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Next, clone out the repo. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;b&gt;&lt;b&gt;clone&lt;/b&gt;&lt;/b&gt; button, it says "Clone with SSH." If not, just
click the "Use SSH" link in the same box. Students will clone the
using https.
&lt;/p&gt;

&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git pull&lt;/b&gt;&lt;/b&gt; at the start of class
&lt;/li&gt;
&lt;li&gt;write code throughout class
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git add&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;git commit&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git push&lt;/b&gt;&lt;/b&gt; at the end of class
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I use a similar flow when I want to add files in my office or at home.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Student use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;b&gt;&lt;b&gt;git
pull&lt;/b&gt;&lt;/b&gt;. That's all there is to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Thoughts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
That's it. The kids are now using GitHub – they're probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;b&gt;&lt;b&gt;git status&lt;/b&gt;&lt;/b&gt;,
&lt;b&gt;&lt;b&gt;git log&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git diff&lt;/b&gt;&lt;/b&gt; to set the stage for step 2 of this
process and beyond.
&lt;/p&gt;

&lt;p&gt;
Since the students aren't adding, committing or pushing, you probably won't
get any errors. 
&lt;/p&gt;

&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven't pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.
&lt;/p&gt;


&lt;p&gt;
I'm happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.
&lt;/p&gt;

&lt;p&gt;
The next step  is having the students add files to a repo. That's the
next post in this series.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>SIGCSE 2017 - Recap</title>
    <id>http://cestlaz.github.io/posts/sigcse-2017-recap/</id>
    <updated>2017-03-14T08:19:18-04:00</updated>
    <published>2017-03-14T08:19:18-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse-2017-recap/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
As a high school teacher, I was never able to attend SIGCSE, the
conference of the ACM's Special Interest Group on Computer Science
Education. Between the number of instructional days I would lose and
the cost, I could never justify going. Instead I looked over the
proceedings and read many of the papers.
&lt;/p&gt;

&lt;p&gt;
Now that I'm at Hunter, I was finally able to attend. This year in
Seattle, the conference ran from Wednesday through Saturday. I was
part of a panel on "Tools we can't live without." Over the next few
weeks, I hope to blog about a number of things I thought and talked
with people about over the conference including:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The path I use to teach git and why GitHub a good teaching tool
(my talk).
&lt;/li&gt;
&lt;li&gt;The relationship of different CS Ed stakeholders - teachers,
researchers, organizations, etc.
&lt;/li&gt;
&lt;li&gt;Teaching at the high school level vs college - perceptions and
reality.
&lt;/li&gt;
&lt;li&gt;The challenges of tech tool adoption in schools.
&lt;/li&gt;
&lt;li&gt;What's going on in K12 CS Certification.
&lt;/li&gt;
&lt;li&gt;Maybe some other stuff.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Today, some overall thoughts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;The good&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
As with many conferences, the "hallway track" along with receptions
sponsored by &lt;a href="https://csnyc.org/our-work/cs4all"&gt;the CS4All consurtium&lt;/a&gt;, &lt;a href="http://tealsk12.org"&gt;TEALS&lt;/a&gt;, &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; were terrific. I
was able to finally meet in person many people who I've only known
virtually and got to know many more as well. I left the conference
with a much larger address book and a long list of follow up
items. Being in Seattle, I also enjoyed being able to spend time with
people from &lt;a href="http://tealsk12.org"&gt;TEALS&lt;/a&gt; and &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt;, two of the CS Ed groups working hard
to do some real good (yes - I do like and support these guys even
though I call them out on things I disagree with, but that's the
subject of another post). 
&lt;/p&gt;

&lt;p&gt;
I attended sessions on CS certification, teacher preparation,
assessments, POGIL based instruction to name a few. They ranged from
valuable to interesting and to be honest, a couple of "what were they
thinking" but the overall experience was very much worth the trip. I
also got to speak to a number of wonderful students at the
poster sessions.
&lt;/p&gt;

&lt;p&gt;
The keynotes are also well worth a read (sorry if you don't have ACM
digital library access). &lt;a href="http://dl.acm.org/citation.cfm?id=3025045&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Jeannette Wing&lt;/a&gt; talked about the importance of
probability and statistics in CS Ed, and aspects of  &lt;a href="http://dl.acm.org/citation.cfm?id=3025047&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Gail Chapman&lt;/a&gt;'s talk
"Inspire, Innovate, and Improve…" keynote and &lt;a href="http://dl.acm.org/citation.cfm?id=3025046&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Mitch Resnick&lt;/a&gt;'s
"Fulfilling Papert's Dream" both spoke to the educator inside me. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;The bad&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
The biggest downside to me was that I found very little value added in
a number of the paper sessions over just reading the papers. Part of
this is probably because of my own over-inflated expectations given the
number of years I've waited to attend. Part of it though, was the fact
that sessions were so tightly packed that I didn't have time to follow
up with presenters before having to run to the next
thing. Unfortunately, in some
cases, it was because the presenter merely
"read" the paper much as a professor sometimes just reads the slides
or the book to his class.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Other thoughts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
One paper presentation I very much liked was &lt;a href="http://dl.acm.org/citation.cfm?id=3017701&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Exam Wrappers: Not a
Silver Bullet&lt;/a&gt; presented by &lt;a href="https://michellecraig.github.io/"&gt;Michelle Craig&lt;/a&gt; and &lt;a href="http://pages.cpsc.ucalgary.ca/~bdstephe/"&gt;Ben Stephenson&lt;/a&gt;. I
actually came in late since I was hustling over from the Code.org
lunch. The result was that I didn't actually know what "Exam Wrappers"
were until well after the talk when I ran into &lt;a href="https://twitter.com/jkhuggins"&gt;Jim Huggins&lt;/a&gt;. Exam
wrappers, in short, are merely when you require the students fill out something
for some credit when picking up their exams. The funny thing is that
it's a strategy that high school teachers have used for years without
a special name and we already knew the good and bad of it without the
research but that's not what I want to get at here. What I loved about
the talk, besides the fact that Ben and Michelle are clearly strong
presenters is that this was a negative result that was being
presented. I also loved the fact that they didn't present their
research as gospel but rather pointed out the strengths and weaknesses
of their approach - they made a case to what and why we should pay
attention to and what should be taken with a grain of salt.
&lt;/p&gt;

&lt;p&gt;
This was a major breath of fresh air after being exposed to so much
education 'research' over the course of my life that the author or
presenter felt was just as strong as a mathematical proof rather than
an indication based on a specific experience or small set of
experiences.
&lt;/p&gt;

&lt;p&gt;
I also felt a little weird at times during the week when west coast people seemed
to know me. I know I'm a loud mouthed curmudgeon and I go on my
periodic ed rants but given the dearth of comments on this blog I was
really surprised to get as many as "great to meet you in person after
reading your blog" or "we know you and your work" all week. It was
weird and somewhat humbling.
&lt;/p&gt;

&lt;p&gt;
Finally, another highlight f`or me was that I got to catch up with
some of family.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-seattle.jpg" alt="sigcse-seattle.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Already planning to submit something to present at SIGCSE 2018 in Baltimore.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="csed" label="csed"/>
    <category term="cseducation" label="cseducation"/>
    <category term="teaching-cs" label="teaching cs"/>
  </entry>
  <entry>
    <title>Whiteboard interviews</title>
    <id>http://cestlaz.github.io/posts/whiteboard-interviews/</id>
    <updated>2017-03-05T08:54:10-05:00</updated>
    <published>2017-03-05T08:54:10-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/whiteboard-interviews/"/>
    <summary type="html">&lt;p&gt;
A few days ago, I saw a &lt;a href="https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process%0A"&gt;piece&lt;/a&gt; on &lt;a href="https://twitter.com/dhh"&gt;David Heinemeier Hansson's&lt;/a&gt; tweet on
whiteboard interviews:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don't do riddles.&lt;/p&gt;— DHH (@dhh) &lt;a href="https://twitter.com/dhh/status/834146806594433025"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
I'm not a huge fan of the whiteboard interview but I think many of the
tweets missed the point. Most of the whiteboard interviews I'm
aware of involve algorithmic problem solving while the tweets, at
least the ones I've seen all refer to things that indeed one would
look up. Things like API calls - not things that whiteboard interviewers
typically care about.
&lt;/p&gt;

&lt;p&gt;
Tim Bray takes that point of view and shared his thoughts in a
&lt;a href="https://www.tbray.org/ongoing/When/201x/2017/03/04/Whiteboard-Interviews"&gt;recent blog post&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The idea behind the whiteboard interview isn't all bad. The
interviewer has an opportunity to see how the candidate thinks and
works through a problem and in an ideal situation the interviewer is,
at least to a point, coaching the candidate to help them through the
process. It seems to me that the problem lies more in the types of
questions asked and the skill of the interviewer rather than the idea
that candidates work through a problem live.
&lt;/p&gt;

&lt;p&gt;
I'd imagine that whiteboard interview success skew towards candidates
who work well in isolation in a short period of time, have a good
amount of exposure to these types of algorithmic problems. Also those
who have practiced and trained specifically for the interview will
have a huge edge. For people new to the process, it can be very
stressful. 
&lt;/p&gt;

&lt;p&gt;
Once a candidate has accepted a position, they'll likely be working
with a team, with additional resources, and with time to solve
problems. This is a very different environment.  The whiteboard
interview, much like the SAT is thus something of an arbitrary
gatekeeper that a candidate must prepare for and conquer rather than a
skill that they must develop that will make them a more productive
team member.
&lt;/p&gt;

&lt;p&gt;
This whole process tends to advantage those with the time and
background to prepare - this is one of the places where the argument
that whiteboard interview hurt diversity come from.
&lt;/p&gt;

&lt;p&gt;
I could be totally wrong but I seem to recall that the whiteboard
interview, at least in terms of external visibility grew out of the
legendary Google puzzle interview questions. 
&lt;/p&gt;

&lt;p&gt;
A tech giant like Google can interview however they like and they'll
still get the talent. They go to the most selective institutions where
candidates have already been culled for success. If they then interview 100
candidates and 10 of them would be good fits, as long as a couple
thrive through the whiteboard interview process, they'll get their
engineer. They'll miss out on a lot of great talent but they can cast
such a large net they'll fill there seats with productive employees. 
&lt;/p&gt;

&lt;p&gt;
On the other hand, smaller companies will certainly miss out on great
talent if they follow the same approach.
&lt;/p&gt;

&lt;p&gt;
Is there a better way?
&lt;/p&gt;

&lt;p&gt;
Some companies pre-assign mini projects and then discuss that at the
interview. Pairing could also be a lower stress alternative to the
technical interview. Another option would be to look at a candidates
existing projects. 
&lt;/p&gt;

&lt;p&gt;
An interesting question is "why do so many companies use the
whiteboard interview?" I can't say for certain but I wouldn't be
surprised if it was a simple as "because Google does it."
&lt;/p&gt;

&lt;p&gt;
For over 100 years, Stuyvesant high school required students study
mechanical drawing (drafting). The relevance of the subject lessened over the
decades and what was taught in many ways has become a joke. A typical
class during the CAD parts of the class might be going over the
&lt;b&gt;&lt;b&gt;cylinder&lt;/b&gt;&lt;/b&gt; command in CadKey. That's like spending a day studying
the &lt;b&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/b&gt; menu in Microsoft Word in an English class. If you can't
tell, I'm not a fan. Drafting at Stuyvesant is the vestigial organ of
the course of study. 
&lt;/p&gt;

&lt;p&gt;
My point isn't to bash drafting at Stuy but rather that there have
been any number of schools that require their students take drafting
even though it doesn't prepare students for, nor lead them to anything
else in the schools curriculum (which now can be said for Stuy's
drafting requirement). I've spoken to teachers and principals at these
schools and we go back and forth as I press them for the reason for
the requirement and ultimately, they tell me that their school
requires drafting "because Stuyvesant does." 
&lt;/p&gt;

&lt;p&gt;
Why do so many small companies employ the whiteboard interview?
Because the big kids do. The trouble is that the big kids can get away
with it, the smaller players on the other hand, are hurting
themselves. Even the bigger players would be well served to 
try to come up with an interview process that better assesses fit
rather than a course filter that while it does pull in talent misses
talent as well.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="interviews" label="interviews"/>
    <category term="jobs" label="jobs"/>
  </entry>
  <entry>
    <title>Quality Devs and Coding Contests</title>
    <id>http://cestlaz.github.io/posts/quality-devs-and-coding-contests/</id>
    <updated>2017-02-19T16:53:56-05:00</updated>
    <published>2017-02-19T16:53:56-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/quality-devs-and-coding-contests/"/>
    <summary type="html">&lt;p&gt;
I've been planning to put together a response to &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;'s
recent post - &lt;a href="http://blog.acthompson.net/2017/02/software-developersquantity-vs-quality.html"&gt;Software Developers - Quantity vs Quality&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
TL;DR, although it isn't really long and I do encourage you to read
Alfred's post: a couple of articles talk about how the U.S. has the most
people entering CS competitions like HackerRank but Americans are not
at the top of the leaderboard. does this mean that there's less talent
in America? Does it even matter?
&lt;/p&gt;

&lt;p&gt;
Before getting to "does it matter," I looked over at the Kaggle
leaderboards. Looking at their top 10, 2 were from the US - no other
country had more than 1. The 11th placing competitor was also from the
US and then 12 was from China, giving them 2 in the top 12.  I also
looked at recent &lt;a href="http://stats.ioinformatics.org/delegations/2016?sort=total_desc"&gt;IOI results&lt;/a&gt; and a quick glance seems to indicate that
the USA seems to do reasonably well. In short, if you buy into ranking
a country by these types of individual results on specific
competitions then we're doing fine.
&lt;/p&gt;

&lt;p&gt;
But, does filling the leaderboard mean a country's producing the best
tech talent? Probably not.
&lt;/p&gt;

&lt;p&gt;
Coding competitions focus on a specific skill set. There are problem
solving aspects but they also require speed, knowledge of data
structures and algorithms, and, yes, even accurate, fast typing
skills. They also require you work alone. They don't encourage well
designed, architected, or written code, working on existing code bases
or working with a team. 
&lt;/p&gt;

&lt;p&gt;
Over the years, I've known some very smart and talented individuals
who've excelled at these types of competitions. If you extend the pool
to math and science competitions, I've known quite a few. These
individuals have by and large done well for themselves but as a group,
you couldn't call them more successful than any other subset of my
former students. A number of them have gone on and are doing well as
professors or programmers but, by and large, they're not the ones
who've gone on to found companies and provide jobs for scores or even
hundreds of other people and they're not necessarily the ones who've
led teams that have developed major platforms and projects&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/quality-devs-and-coding-contests/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
I don't argue that people who populate competition leaderboards are
talented and a necessary part of our tech ecosystem but they're only a
part. I probably want one of these programmers on my team, but not as
the entire team (see Fake Grimlock's laws of startups - &lt;a href="http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team"&gt;law 9&lt;/a&gt;).
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
&amp;lt;div align="center"&amp;gt;
&amp;lt;a href="&lt;a href="http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team"&gt;http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team&lt;/a&gt;"&amp;gt;
&amp;lt;img width="30%", 
src="&lt;img src="http://media3.cdn.builtinchicago.org/sites/default/files/imagecache/Original/images/BATMAN-THEN-ROBIN.jpg" alt="BATMAN-THEN-ROBIN.jpg"&gt;"
/&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
Competitive programming is a piece of the puzzle as competitive
programmers are a part of the population. So are project based events
like &lt;a href="https://dreamitcodeitwinit.wordpress.com/"&gt;Dream it. Code it. Win it.&lt;/a&gt;, science fairs, and hackathons, which
can be either cooperative, competitive, or a combination.
&lt;/p&gt;

&lt;p&gt;
What do we want? Balance. I think the Stuy program does it pretty
well. StuyCS graduates who wish to take part in coding competitions
can do so but if they want to excel at it, they have to work at it on
their own time. At the same time, the students learn how to work in
teams and take a project from idea to delivery all the while learning
some good academic CS and software engineering practices. They'll
learn more in college on the academic side and the rest on the
job. I'd love to see better balance in the colleges between CS
programs preparing kids for graduate programs and CS programs that
prepare kids for industry. I'd also love to see CS minors that were
more targeted towards CS+X rather than half of a CS major targeting
students going to grad schools. 
&lt;/p&gt;

&lt;p&gt;
I also think there's a tremendous opportunity for community colleges
to fill the role currently occupied by code schools. They could more
easily strike a balance between academic depth and practical
preparation.
&lt;/p&gt;

&lt;p&gt;
I'm working on building Hunter College's honors CS program and while I
can't move the Hunter curriculum, I'm seeking that balance in my own
way.
&lt;/p&gt;

&lt;p&gt;
Will we get there? I don't know. Given the way education works, I
figure at some point people will decide that we have to have more of a
presence on the CS leaderboards and we'll see programs pop up with
that in mind. I have no doubt that when that happens, we'll see many
more Americans near the top. We have a large enough population that
talent shouldn't be in question. This will be great for students to
whom these competitions attract. It won't do much, however for the
rest of the students. I'm not really concerned one way or
another. Unlike math, where there's a natural progression through K12
math classes with math team and math competitions being a natural add
on, the driving forces in CS - be they from industry, government, or
academia don't seem to have partaken in any code competition Kool-Aid
so code competitions won't become a driving force in CS ed any time
soon. 
&lt;/p&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/quality-devs-and-coding-contests/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;Some
are but probably a smaller percent from that group than from the
general pool.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
  </entry>
  <entry>
    <title>Starting with scheme</title>
    <id>http://cestlaz.github.io/posts/starting-with-scheme/</id>
    <updated>2017-02-15T12:20:25-05:00</updated>
    <published>2017-02-15T12:20:25-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/starting-with-scheme/"/>
    <summary type="html">&lt;p&gt;
Scheme is one of the languages used in Stuy's intro CS course. Like
any other language, there are pros and cons of using it to introduce
students to CS. Here are some of the reasons why I like Scheme as a
first language and why despite that,  I don't recommend it in many
cases.
&lt;/p&gt;

&lt;p&gt;
Scheme certainly isn't mainstream. That's not the main reason why I
like it but it is a side benefit. It's less likely kids come into
class knowing it which creates a level playing field. The few times
I've had a student with a background in Scheme, they've been good,
helpful kids rather than ones that tried to show off and dominate the
class. 
&lt;/p&gt;

&lt;p&gt;
I like scheme because it's simple. It looks different than other
languages but is &lt;code&gt;(+ 3 4)&lt;/code&gt; really that different than &lt;code&gt;add(3,4)&lt;/code&gt; or
&lt;code&gt;3+4&lt;/code&gt;? 
&lt;/p&gt;

&lt;p&gt;
We can tell kids "everything's a function." While technically not
true, and I tell my students that it isn't, it's close enough for our
purposes. Everything's a function and the way we write a function is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Apply function &lt;b&gt;&lt;b&gt;f&lt;/b&gt;&lt;/b&gt; on arguments &lt;b&gt;&lt;b&gt;b c …&lt;/b&gt;&lt;/b&gt;. So we have &lt;code&gt;(+ 2 3)&lt;/code&gt; to
add 2 and 3, &lt;code&gt;(and a b)&lt;/code&gt; for logical and &lt;code&gt;(= 3 4)&lt;/code&gt; to test to see if 3
is equal to 4, etc. We also have the same basic notation for things
like conditionals. In java, we might write:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In scheme, it would be:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Even though we're fudging the rules, we can lay out a handful of rules
for the kids such as lambda and define follow a similar form to create and
name functions:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;add2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
where &lt;code&gt;(lambda (a b) (+ a b))&lt;/code&gt; returns a function that adds &lt;b&gt;&lt;b&gt;a&lt;/b&gt;&lt;/b&gt; and
&lt;b&gt;&lt;b&gt;b&lt;/b&gt;&lt;/b&gt; and &lt;code&gt;define&lt;/code&gt; associates it with the identifier &lt;b&gt;&lt;b&gt;add2&lt;/b&gt;&lt;/b&gt;. Now we
can use the function: &lt;code&gt;(add2 5 10)&lt;/code&gt; which evaluates to 15.
&lt;/p&gt;

&lt;p&gt;
With lambda, define, if, and a few more basics, it's off to the
races. The simple, consistent syntax makes things easy for the kids
and the constrained tool set lets us focus their way of thinking.
&lt;/p&gt;

&lt;p&gt;
Of course this wouldn't work had DrScheme (now &lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt;) not
existed. That gave us a nice learning IDE to work in.
&lt;/p&gt;

&lt;p&gt;
Using Scheme, we can not only cover the basics like conditionals,
abstraction and such but also deeper concepts like recursion, map,
filter, and reduce. When we move on from Scheme, the kids also have a
frame of reference for all the other languages and paradigms they use.
&lt;/p&gt;

&lt;p&gt;
There are downsides, however. Outside help is harder to come by and
there is some pushback from parents and it isn't as pretty and flashy
as some other tool-sets. Scheme worked at Stuy for a number of
reasons. When I created the class that used it, there were no good
pre-AP classes in the school and I had a pretty good reputation as a
teacher. The class also used multiple tools with &lt;a href="https://ccl.northwestern.edu/netlogo/"&gt;NetLogo&lt;/a&gt; being the
primary other one and tackled a variety of CS and non CS topics.
First time through, reputation and buzz filled the classes and after
that, the class developed a solid enough reputation to fill itself.
&lt;/p&gt;

&lt;p&gt;
It also didn't hurt that our program developed from the inside
out. First, we had APCS-AB on the books as a junior year course, then
I added our post AP senior year electives. Since it was easy to show
what the kids were already graduating with, it was easy to diffuse any
pushback from not using mainstream tools in the first class.
&lt;/p&gt;

&lt;p&gt;
Scheme worked at Stuy and I feel that it still does. Would I use
Scheme for a first experience in a drop in program at an after-school
where kids might not come back if they don't get to a payoff
immediately? Probably not. Would I recommend it at a school where I
want to integrate CS with some of the other subjects quickly, again,
probably not (except for integration with algebra where &lt;a href="http://www.bootstrapworld.org/"&gt;Bootstrapworld&lt;/a&gt;
is a terrific program).
&lt;/p&gt;

&lt;p&gt;
In any event, if you're a high school CS teacher and  haven't played
with scheme  or some other functional language, I highly recommend
it - you might not actually ever teach it or use it but it can really
help develop you as a programmer and an educator.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="curriculum" label="curriculum"/>
    <category term="education" label="education"/>
  </entry>
  <entry>
    <title>Selecting a starting language - why not Javascript</title>
    <id>http://cestlaz.github.io/posts/starting-with-js/</id>
    <updated>2017-02-13T08:45:48-05:00</updated>
    <published>2017-02-13T08:45:48-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/starting-with-js/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was catching up with the team at Stuy the other day and they
mentioned that they were periodically getting pushback on their choice
of languages, particularly in the intro class. The pushback was mostly
in the form of "why don't you start them with Javascript?" 
&lt;/p&gt;

&lt;p&gt;
Back in the day, when I created our intro class where we use Scheme,
NetLogo and then later Python, I'd get similar pushback but then it
was "why not Java?", "why not C?", or "whu not C++?"
&lt;/p&gt;

&lt;p&gt;
We had a good discussion on this and I shared my thoughts as to why I
don't like Javascript as a first language and I thought I'd share some
of them here. I'll try to get around to the rationale behind Scheme
and NetLogo in a later post.
&lt;/p&gt;

&lt;p&gt;
To start, let me say that I &lt;b&gt;&lt;b&gt;Love&lt;/b&gt;&lt;/b&gt; Javascript -
particularly when approaching it as a functional language. I also
think every school and situation is different so there are likely
times when Javascript is the right beginner language for the job.
&lt;/p&gt;

&lt;p&gt;
Let's dive in.
&lt;/p&gt;

&lt;p&gt;
Why are some of the pluses for Javascript as an intro language.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Ubiquity and availability:

&lt;p&gt;
If you have a browser, you have Javascript - it's also available
through online IDEs and online lightweight sites like &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt;. 
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Interactivity:

&lt;p&gt;
You can tweak websites almost live, use the HTML5 canvas pretty
interactively and mode
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;It's mainstream
&lt;/li&gt;

&lt;li&gt;It's quick to get up and running
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is all true, but there are also downsides.
&lt;/p&gt;

&lt;p&gt;
One of my big problems with Javascript is the lack of simple solid
educational tooling. I love to use tools like &lt;a href="http://www.drjava.org/"&gt;DrJava&lt;/a&gt;, &lt;a href="http://drpython.sourceforge.net/"&gt;DrPython&lt;/a&gt;, and
&lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt; (formerly DrScheme) with beginners. All simple learning
IDEs. True, you can use a simple online IDE but I haven't found them
to have as strong a learning interface. They also, generally, keep you
in an oversimplified programming sandbox. There's no clean transition
from the sandbox to the real deal - particularly given the non-trivial
state of js build tools and environments. These simple learning IDEs
set the stage and then we can transition to more powerful development environments.
&lt;/p&gt;

&lt;p&gt;
I also prefer, where possible, to have kids learn locally so that they
can learn something about the underlying operating system even if
only at a user level.
&lt;/p&gt;

&lt;p&gt;
A problem relating to the lack of tooling is the fact that a JS
program can fail to run and not give you any meaningful feedback at
all - this is a problem for a beginner. 
&lt;/p&gt;

&lt;p&gt;
Javascript also has all sorts of wonkiness. We have &lt;code&gt;=&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;
which is pretty conventional, but then there's also &lt;code&gt;===&lt;/code&gt;. We have
potentially confusing scoping issues and also some other real
weirdness:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  50&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 50 &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//50&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  56&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '533'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '533&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'53'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '533'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For more, check out the this &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;video&lt;/a&gt;. Start watching at about 1:20 -
it's a riot.
&lt;/p&gt;

&lt;p&gt;
All of this weirdness actually makes sense - just not to a beginner. 
&lt;/p&gt;

&lt;p&gt;
Javascript also gives plenty of freedom - there are many ways to do
things. This can be great for the developer but not necessarily ideal
for the learner. Loops, recursion, mapping functions - you name it,
Javascript's got it. I like simpler languages for beginners because
it's easier to get them thinking and problem solving in certain ways
when there tool set is somewhat restricted (more on that when I write
about Scheme).
&lt;/p&gt;

&lt;p&gt;
Finally, the fact that Javascript's a mainstream language can be a
minus. Given its popularity, a beginner class could have at  least a
few kid who've at least played with the language. This can lead them
to think they know more than they do and more importantly, this can
be intimidating to the real newbies who develop the impression that
"everyone knows this but me." A less mainstream language puts everyone
on a level playing field.
&lt;/p&gt;

&lt;p&gt;
Let me say again that I love javascript as a language and before a
student graduates Stuy they can learn all about Javascript, front end
development, some functional programming, and more. It's just not the
right language to start with - at least not at Stuy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="curriculum" label="curriculum"/>
    <category term="education" label="education"/>
    <category term="languages" label="languages"/>
  </entry>
  <entry>
    <title>Should CS Ed be in bed with the College Board</title>
    <id>http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</id>
    <updated>2017-02-04T06:00:00-05:00</updated>
    <published>2017-02-04T06:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'm guessing my views  on this aren't very popular -that's OK, every
community needs a curmudgeon.
&lt;/p&gt;

&lt;p&gt;
A few years ago, I cautioned if we weren't careful, once the big
players got involved, CS Ed would go the way of other disciplines, and
not in a good way. It looks like indeed we're well on our way down
that road.
&lt;/p&gt;

&lt;p&gt;
I've ranted before about things like non-profits, drop in and summer
programs. &lt;a href="https://cestlaz.github.io/posts/2015-05-07-learning-takes-time.html/#.WJXSS99vHmE"&gt;STEM Oil Salesmen&lt;/a&gt; &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;
selling easy fixes, exciting kids and parents, using the Think Method
just like Professor Harold Hill only to send the kids off where they
can blame a future teacher for failure.
&lt;/p&gt;

&lt;p&gt;
I've also ranted about teacher preparation and how all the rage is
short term, &lt;a href="https://cestlaz.github.io/posts/scotland/#.WJXT999vHmE"&gt;Superficial PD and scripted curricula&lt;/a&gt;  and my concern that   
once the politicians can say CS is in the schools, &lt;a href="https://cestlaz.github.io/posts/2015-03-04-expedient-vs-good.html/#.WJXT7d9vHmE"&gt;we'll be done&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I've been working towards getting CS to all students for most of my
career and while it's wonderful to see us getting closer to the goal,
I'm seeing more and more signs that my caution is becoming
reality. and CS Ed is going the way of other Ed - aligned to testing
and more to the whims of the power players and politicians than to
teachers and students.
&lt;/p&gt;

&lt;p&gt;
The other week I noticed, &lt;a href="http://teacherblog.code.org/post/156278055294/ap-cs-principles-could-make-history-how-can-we"&gt;this post&lt;/a&gt; by Code.org trying to encourage
more students to take the APCSP exam - not encourage more students
take the class or some other class or to have more students be exposed
to CS but to actually sit for the APCSP exam. That post was followed
by &lt;a href="http://teacherblog.code.org/post/156689658029/ask-your-cs-principles-students-to-star-in-our"&gt;this one&lt;/a&gt; which also highlights actually taking the exam.
&lt;/p&gt;

&lt;p&gt;
This didn't sit well with me. 
&lt;/p&gt;

&lt;p&gt;
What does the exam do for the kid? It doesn't drive instruction - by
that time, any good teacher knows their student and is better served
by using their own &lt;a href="https://cestlaz.github.io/posts/ap-we-dont-trust-teachers/#.WJXbA99vHmE"&gt;assessments&lt;/a&gt;. The college credit thing? I'm
skeptical. Fewer and fewer schools are giving credit for APCSA let
alone this new CS0 non major course. Blanket credit? Since full time
students pay for a range of credits, I'm still skeptical
here. Placement? It's a course for non-majors - what exactly are you
placing out of?
&lt;/p&gt;

&lt;p&gt;
Reasons not to take the exam?
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;If it doesn't do anything for the kid, why take it
&lt;/li&gt;
&lt;li&gt;Stress of taking the exam
&lt;/li&gt;
&lt;li&gt;There are other ways of placing out of courses once in college
&lt;/li&gt;
&lt;li&gt;Save the expense
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As a general rule, I'm against forcing students to sit for
AP exams. At the extreme case, since we've been brainwashed to think
that a school that has lots of kids sitting for exams is good, I've
seen at least one case of a principal having all his kids sit for, and
just about all &lt;b&gt;&lt;b&gt;fail&lt;/b&gt;&lt;/b&gt; AP Calculus - that is, get a 1 or 2 on the exam. This
principal had all his students take the exam, and only 2 scores were 3
or higher. This principal then parlayed his success into a higher
profile gig - he's moved up in the world while setting up his students
to fail.
&lt;/p&gt;

&lt;p&gt;
This follows last year's announcement that code.org was &lt;a href="https://cestlaz.github.io/posts/2015-05-19-code-org-college-board.html/#.WJXbm99vHmE"&gt;partnering with
the College Board&lt;/a&gt; - offering PD to teachers for free if the schools
signed up their students for the PSAT 8/9 - another meaningless
exam. So, we get teacher training light &lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt; as long as the school pays for
the PSAT8/9 for every kid so that the kid can take yet another test
with really no value&lt;sup&gt;&lt;a id="fnr.3" name="fnr.3" class="footref" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
Why should students pay for an AP exam that doesn't do anything for
them? Why should Jane Q Taxpayer pay for exams that only server to
enrich the College Board.
&lt;/p&gt;

&lt;p&gt;
True, The College Board is a big player. They already have much more
influence of American High School education than they should. It's
easy to climb on board the AP train for entre into our schools. The
question is, should we use positions of influence to push efforts that
might help our end but leave collateral damage to students and the public.
&lt;/p&gt;

&lt;p&gt;
I don't doubt code.org's sincerity in wanting good CS in all schools
nor the efforts or value as an advocate for CS Education. I'm
concerned that the desire to win big and win now is moving us in a
direction that we'll regret years from now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;Not my term, but I really like it&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;If you think that PD based
teacher training is OK, ask yourself if you want your own child's
chemistry teacher to be a history teacher with a few weeks summer
training in chemistry&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" name="fn.3" class="footnum" href="http://cestlaz.github.io/posts/cs-ed-in-bed-college-board/#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;And I'm guessing the exam will be offered
during the day so teachers will proctor for free rather than be
allowed to, you know, teach their students.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>BS? - BA</title>
    <id>http://cestlaz.github.io/posts/ba-bs/</id>
    <updated>2017-01-01T20:14:25-05:00</updated>
    <published>2017-01-01T20:14:25-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/ba-bs/"/>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;
I didn't know Hunter College had computer science.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I heard that refrain more than once during my fall visits to high
schools. Part of the reason for this is due to Hunter CS's low
profile and small size in spite of its high quality.
&lt;/p&gt;

&lt;p&gt;
Part, though, was also because of some misconceptions about Computer
Science programs. I'd hear things like "but they only offer a BA not a
BS," or "but Hunter isn't an engineering school."
&lt;/p&gt;

&lt;p&gt;
I've come to realize that we have to do a better job educating kids as
to what can come next after high school.
&lt;/p&gt;

&lt;p&gt;
I'm not entirely sure why many assume that CS has to be under
engineering. When I was applying to college, most of my choices were
Arts and Science schools offering BAs in CS. Maybe it's because people don't
disagregate STEM subjects. Even though it's not a computer science
program many schools seem to associate FIRST robotics with computer
science. Likewise any class with even a modicum of coding becomes
computer science and as makerspaces and robotics are a percieved as
easy entry STEM classes that appear to be CS (something I'll rant
about in a future post), CS becomes associated with engineering.
&lt;/p&gt;

&lt;p&gt;
It's easy enough to explain the difference between a BA in CS and a BS
in CS and it's equally easy to show that you can have tremendous
success either way. All you have to do to show the validity of a BA in
CS is look at succesful people from places like NYU, Courant, Columbia
College (as opposed to Columbia Engineering), Cornell school of Arts
and Sciences, etc to balance successful people from the engineering schools.
&lt;/p&gt;

&lt;p&gt;
As I'm sure you know, I'm pretty high on Hunter CS and it's certainly
one of the best value CS educations out there. Personally, I'm a big believer in a
liberal arts education but in any case, as a community we have to do a
better job educating the high schools so that graduating seniors are
best informed when deciding on their futures.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
  </entry>
  <entry>
    <title>It gets easier (or advent of code 2016 day 19)</title>
    <id>http://cestlaz.github.io/posts/it-gets-easier-advent19/</id>
    <updated>2016-12-19T19:56:09-05:00</updated>
    <published>2016-12-19T19:56:09-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/it-gets-easier-advent19/"/>
    <summary type="html">&lt;p&gt;
Today's &lt;a href="http://adventofcode.com/2016/day/19"&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href="http://mathworld.wolfram.com/JosephusProblem.html"&gt;Josephus
problem&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I recalled that there was a formula to figure out the 
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.
&lt;/p&gt;

&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href="http://adventofcode.com/2016/day/19"&gt;problem description&lt;/a&gt; for details).
&lt;/p&gt;

&lt;p&gt;
For both solutions I coded up a circular doubly linked list:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;make_ring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can see my complete solutions &lt;a href="https://github.com/zamansky/advent2016/blob/master/day19.cpp"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I was thinking about how I wrote the code – I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar. 
&lt;/p&gt;

&lt;p&gt;
I'm not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven't really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat. 
&lt;/p&gt;

&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn't fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.
&lt;/p&gt;

&lt;p&gt;
All of this is to say that it does get easier.
&lt;/p&gt;

&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href="http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA"&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.
&lt;/p&gt;

&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.
&lt;/p&gt;</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="coding" label="coding"/>
    <category term="cs" label="cs"/>
  </entry>
  <entry>
    <title>Advent of Code 2016 - Check your data</title>
    <id>http://cestlaz.github.io/posts/advent-of-code-2016-check-data/</id>
    <updated>2016-12-10T11:25:38-05:00</updated>
    <published>2016-12-10T11:25:38-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-of-code-2016-check-data/"/>
    <summary type="html">&lt;p&gt;
I'm spending the weekend up in Michigan. Visiting my brother and is
family. We're here to see the &lt;a href="http://umgass.org"&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan's &lt;a href="http://www.umgass.org/current-production"&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.
&lt;/p&gt;

&lt;p&gt;
This hasn't left much time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday's challenge this morning.
&lt;/p&gt;

&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/"&gt;because I'm an
idiot&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="http://adventofcode.com/2016/day/9"&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.
&lt;/p&gt;

&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did. 
&lt;/p&gt;

&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it's
always good to have a daughter that's smarted than you are) but she
saw no problems.
&lt;/p&gt;

&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.
&lt;/p&gt;

&lt;p&gt;
What could be the problem.
&lt;/p&gt;

&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a "save-as"
to save it - last time, I cut and pasted.
&lt;/p&gt;

&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.
&lt;/p&gt;

&lt;p&gt;
The moral of the story – make sure you check the integrity of your
data set - you'll never get the right answer if you're working with
the wrong data.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, you can find my AoC code &lt;a href="https://github.com/zamansky/advent2016"&gt;here&lt;/a&gt;.
&lt;/p&gt;</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="cs" label="cs"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>A Teacher looks at Advent of Code 2016 #2</title>
    <id>http://cestlaz.github.io/posts/advent-of-code-2016-2/</id>
    <updated>2016-12-08T08:40:49-05:00</updated>
    <published>2016-12-08T08:40:49-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-of-code-2016-2/"/>
    <summary type="html">&lt;p&gt;
Today we're looking at &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href="http://adventofcode.com/2016/day/2"&gt;number 2&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To change things up, I thought I'd do a video where I live code a solution.
&lt;/p&gt;

&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code. 
&lt;/p&gt;

&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;

&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href="http://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt; to take
away edge and special cases. 
&lt;/p&gt;

&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;

&lt;p&gt;
Here's the video, I hope you enjoy it:
&lt;/p&gt;

&lt;div class="export"&gt;
&lt;p&gt;
&amp;lt;iframe width="560" height="315" src="&lt;a href="https://www.youtube.com/embed/EC8gSrYQ11g"&gt;https://www.youtube.com/embed/EC8gSrYQ11g&lt;/a&gt;" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;

&lt;/div&gt;</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>A Teacher looks at Advent of Code 2016 #1</title>
    <id>http://cestlaz.github.io/posts/advent-code-2016-1/</id>
    <updated>2016-12-06T10:46:17-05:00</updated>
    <published>2016-12-06T10:46:17-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-code-2016-1/"/>
    <summary type="html">&lt;p&gt;
I recently &lt;a href="http://cestlaz.github.io/posts/advent-of-code-2016/"&gt;posted&lt;/a&gt; about &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;

&lt;p&gt;
I thought I'd share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://adventofcode.com/2016/day/1"&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there's a problem - there are no limits on coordinates and we
can't make an unlimited size array.
&lt;/p&gt;

&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; location changes over
time. In the solution below, we start at &lt;b&gt;&lt;b&gt;(0,0)&lt;/b&gt;&lt;/b&gt; and count the steps as
we update two variables &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; and we have the number of steps taken to get there.
&lt;/p&gt;

&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I'm not arguing that what's written is
superior in any way, it's just what I ended up writing).
&lt;/p&gt;

&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which assigns &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; to the first item in the tuple and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt; the
second. I used that a number of times 
&lt;/p&gt;

&lt;p&gt;
I also use a list  I call &lt;b&gt;&lt;b&gt;dirs&lt;/b&gt;&lt;/b&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;

&lt;p&gt;
Here's all the code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# assume our starting location is 0,0&lt;/span&gt;

&lt;span class="c1"&gt;# we start with d=0 -&amp;gt; facing north&lt;/span&gt;
&lt;span class="c1"&gt;# as we turn left or right, we can just increment or decrement d&lt;/span&gt;
&lt;span class="c1"&gt;# and dirs[d] will give us the appropriate dx and dy to update&lt;/span&gt;
&lt;span class="c1"&gt;# our locatoin for the next step&lt;/span&gt;
&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# This is only needed for part 2  - We track visited locations&lt;/span&gt;
&lt;span class="c1"&gt;# by adding them to the dictionary. If we try to add a location&lt;/span&gt;
&lt;span class="c1"&gt;# that's already been visited we know that we've found our final &lt;/span&gt;
&lt;span class="c1"&gt;# location&lt;/span&gt;
&lt;span class="c1"&gt;# locs={}  # uncomment this line for part 2&lt;/span&gt;


&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# the first char in i is the direction to turn in (L or R)&lt;/span&gt;
    &lt;span class="c1"&gt;# the rest represents the number of steps.&lt;/span&gt;
    &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

	&lt;span class="c1"&gt;# Uncomment this block for part 2&lt;/span&gt;
	&lt;span class="c1"&gt;# each time we have a new location, see if it's already in&lt;/span&gt;
	&lt;span class="c1"&gt;# locs, if it isn't, add it.&lt;/span&gt;
	&lt;span class="c1"&gt;# if it is, we're visiting somewhere twice so we're done.&lt;/span&gt;
	&lt;span class="c1"&gt;#if ((x,y) not in locs):&lt;/span&gt;
	&lt;span class="c1"&gt;#    locs[(x,y)]=1&lt;/span&gt;
	&lt;span class="c1"&gt;#else:&lt;/span&gt;
	&lt;span class="c1"&gt;#    print((x,y))&lt;/span&gt;
	&lt;span class="c1"&gt;#    print(abs(x)+abs(y)) # the answer&lt;/span&gt;
	&lt;span class="c1"&gt;#    sys.exit(0)&lt;/span&gt;
	&lt;span class="c1"&gt;#    break&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the answer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>Advent of Code 2016</title>
    <id>http://cestlaz.github.io/posts/advent-of-code-2016/</id>
    <updated>2016-12-03T15:25:26-05:00</updated>
    <published>2016-12-03T15:25:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-of-code-2016/"/>
    <summary type="html">&lt;p&gt;
Once again, it's time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day. 
&lt;/p&gt;

&lt;p&gt;
I wrote a bit about it &lt;a href="http://cestlaz.github.io/posts/2015-12-15-advent.html/"&gt;last&lt;/a&gt; &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ"&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href="http://adventofcode.com/2015/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It's only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I'm thinking of
looking at a couple of the problems this week with my class at Hunter.
&lt;/p&gt;

&lt;p&gt;
I didn't think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You're
first presented with the problem and the input and once you put in the
correct answer, you're presented with part two.
&lt;/p&gt;

&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded. 
&lt;/p&gt;

&lt;p&gt;
It's not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.
&lt;/p&gt;

&lt;p&gt;
Check out &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; and see if it's something you or your classes
might enjoy.
&lt;/p&gt;</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="apcs" label="apcs"/>
    <category term="cs" label="cs"/>
    <category term="misc" label="misc"/>
  </entry>
  <entry>
    <title>Inverted Index Project</title>
    <id>http://cestlaz.github.io/posts/inverted-index/</id>
    <updated>2016-11-26T16:52:56-05:00</updated>
    <published>2016-11-26T16:52:56-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/inverted-index/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I haven't spoken much about the class I've been teaching this
semester. It's an intro CS course - a programming heavy intro. I
decided to use Python with a transition at the end to C++. The
transition is to mirror Hunter's normal first CS course that ends with
a C++ intro to prepare the students for next semester's CS course
which is a more intense OOP class using C++ - the language we use in
our core courses.
&lt;/p&gt;

&lt;p&gt;
Throughout the semester I've tried to use a variety of interesting
application areas so as to try to give the students some idea of the
possibilities that studying CS will open up for them.
&lt;/p&gt;

&lt;p&gt;
After covering Python dictionaries and lists I thought we'd play by
building an inverted Index.
&lt;/p&gt;

&lt;p&gt;
The basic idea is to map a set of words back to source files. For
example, given the following four one line files:
&lt;/p&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;files&lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;file.01&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you prick us do we not bleed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.02&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you tickle us do we not laugh&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.03&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you poison us do we not die and&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.04&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;if you wrong us shall we not revenge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
You could build a data structure mapping each word back to the file(s)
that contain it (partially shown here),
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Word&lt;/th&gt;
&lt;th scope="col" class="left"&gt; &lt;/th&gt;
&lt;th scope="col" class="left"&gt;Files containing It's&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;if&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;you&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;prick&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;us&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;do&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
You can, of course, store more information - how many times a word
appears in a file, where it appears, etc.
&lt;/p&gt;

&lt;p&gt;
This is a fairly easy structure to build. A dictionary where the keys
are the words in the file and the values are lists of the documents
containing the words.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;inverted_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;'if'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'you'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'prick'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'us'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'do'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In addition to letting us work with dictionaries and lists, we can
also review file access and even the python CSV module if we want.
&lt;/p&gt;

&lt;p&gt;
We can immediately write simple queries – "what document(s) contain
the word 'prick,' but things get more interesting if you write
functions to perform &lt;b&gt;&lt;b&gt;and&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt; queries - "what document(s)
contain the words 'prick' &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt; 'do'" for instance.
&lt;/p&gt;

&lt;p&gt;
Why are we building this (besides as a data structure and programming
exercise)? I've seen a number of references to using an inverted index
when building a web search engine. In fact, I think that's something
you do early on in the Udacity Mooc. I just wanted to play with
information retrieval.
&lt;/p&gt;

&lt;p&gt;
I remembered that there was a collection of information, including
last statements from &lt;a href="https://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"&gt;executed offenders in Texas&lt;/a&gt;. Someone conveniently
converted it into a &lt;a href="https://docs.google.com/spreadsheets/d/1HAjZTtPriClY-X3n9whTkA4i5D7bn3bmtHnLoaVICvI/edit#gid=1"&gt;Google Spreadsheet&lt;/a&gt;. The format's a little
different from our simple four file example but then there's more
data. It's straightforward enough to download the spreadsheet as a CSV
file and then read it with a Python program that builds it into an
inverted index.
&lt;/p&gt;

&lt;p&gt;
Now we have some interesting data to play with.
&lt;/p&gt;

&lt;p&gt;
How many offenders used words like "sorry" or "apologize?" How about
references to religion? We can do all sorts of &lt;b&gt;&lt;b&gt;and&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt;
queries. 
&lt;/p&gt;

&lt;p&gt;
We just played with this a bit but I could see all sorts of
explorations. What about taking some great work of literature and
turning it into an inverted index by chapter. You could query
characters or certain words and see where and when they appear in the
book. A new and different way of exploring literature.
&lt;/p&gt;

&lt;p&gt;
So, there you have it - an interesting little project we played with
this past semester. We did it in an intro Python course but I could
see it as an interesting project in AP CS A using hashmaps and lists.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="intro" label="intro"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>Cornell Technion Project Studio</title>
    <id>http://cestlaz.github.io/posts/cornell-tech-proj-studio/</id>
    <updated>2016-11-01T20:34:03-04:00</updated>
    <published>2016-11-01T20:34:03-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/cornell-tech-proj-studio/"/>
    <summary type="html">&lt;p&gt;
I spent this evening as a crit advisor for this semesters &lt;a href="http://tech.cornell.edu/studio/curriculum/product-studio"&gt;Project
Studio&lt;/a&gt;. The class is basically a finishing class for their Masters
students. The class forms teams that work with a "company champion"
that acts an advisor to build a product.
&lt;/p&gt;

&lt;p&gt;
As a Crit Advisor, I, along with two other people from the tech
industry have a give and take with three groups and hopefully we can
provide useful feedback.
&lt;/p&gt;

&lt;p&gt;
As a "tech industry person" I feel a bit like an outsider since I'm
really the "teacher guy," but I think I had some worthwhile things to
share with the groups.  Besides,
I'd like to think I'm sufficiently in touch with the tech industry
through "the family" to be a reasonably sound advisor.
&lt;/p&gt;

&lt;p&gt;
As it turns out, two of the groups I worked with had an education bent
so at least in terms of product they were in my wheelhouse.
&lt;/p&gt;

&lt;p&gt;
I don't want to talk specifically about the student products since I
didn't ask permission but I did want to share a few thoughts.
&lt;/p&gt;

&lt;p&gt;
The products reminded me very much of the projects my Stuy kids
produced in their senior SoftDev class. This is not to belittle the
Cornell Tech people but rather noting how advanced the work of the
Stuy kids is. Beyond that, I liked the composition of the groups I
talked to - nice combinations of skill sets and backgrounds. 
&lt;/p&gt;

&lt;p&gt;
I love the idea of the mentoring company which had an interesting effect on
the groups. In all cases, the mentoring company helped provide the
teams with an idea framework but in one case, I think the company's point of
view actually limited the groups vision a bit. This came up in our
discussions and I'm hoping that the students got something out of
that.
&lt;/p&gt;

&lt;p&gt;
I also liked the crit review I was part of - bringing in outsiders to
show your work to and to get feedback from. It would probably hard
logistically at Stuy, but I'll talk to the guys there about the
concept. 
&lt;/p&gt;

&lt;p&gt;
I shared my contact info with the two groups that asked and if they
follow up, I'd love to be a resource for them. 
&lt;/p&gt;

&lt;p&gt;
I'm also looking forward to taking part in more events like this in
the future.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
  </entry>
  <entry>
    <title>Computational Thinkers in Scotland</title>
    <id>http://cestlaz.github.io/posts/scotland/</id>
    <updated>2016-09-30T07:28:53-04:00</updated>
    <published>2016-09-30T07:28:53-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/scotland/"/>
    <summary type="html">&lt;p&gt;
I'm way behind on my &lt;a href="http://cacm.acm.org/"&gt;Communications of the ACM&lt;/a&gt;. I generally only read
them when I use my trainer in the mornings and with summer running and
outside riding, I'm still on the December 2015 issue.
&lt;/p&gt;

&lt;p&gt;
This morning, I read a viewpoint by Jeremy Scott and Alan Bundy on &lt;a href="http://cacm.acm.org/magazines/2015/12/194638-creating-a-new-generation-of-computational-thinkers/abstract"&gt;a
program in Scotland&lt;/a&gt;. If you're an ACM member, and if you're a CS
practitioner, student, academic, or teacher you should be, you can read the piece for details.
&lt;/p&gt;



&lt;p&gt;
Me? I noticed a number of similarities between what Bundy and Scott
described and efforts here in the USA including some of the red flags.
&lt;/p&gt;

&lt;p&gt;
I'm not here to talk about the program described in detail or their
successes and failures. I don't have enough information to fairly
comment on that. I'm here in my usual role of curmudgeon to highlight
common red flags that if unheeded could cost all of us the opportunity
to get really great CS Ed to all of our students.
&lt;/p&gt;

&lt;p&gt;
One red flag right away were a number of references to the program
being curriculum and materials driven, not teacher driven. The
viewpoint states that materials "were designed to be used by even
non-specialist teachers." We see the same thing here in the USA and
not just in CS Ed. Teaching overall is being devalued with the elite
pushing programs that handcuff good teachers to a script (which leads
students towards "success" in passing a nonsense standardized exam)
all the while sending their own kids to elite private schools with
knowledgeable teachers.
&lt;/p&gt;

&lt;p&gt;
I know i didn't want my kids to be taught chemistry history or any
other subject by a teacher that hasn't studied the content yet here we
go saying it's okay for CS. 
&lt;/p&gt;

&lt;p&gt;
The counter argument is that we have to do something now and we'll do
better later. We all go in with the best of intentions but more often
than not, once a politician has their sound bite and once a cheap
apparent solution is in place, it's good enough and we're done. I
ranted about that a while back both &lt;a href="http://cestlaz.github.io/posts/2015-03-04-expedient-vs-good.html/#.V-5UqN9vGAk"&gt;here&lt;/a&gt; and &lt;a href="http://cestlaz.github.io/posts/2015-05-07-learning-takes-time.html/#.V-5Uot9vGAk"&gt;here&lt;/a&gt;. To their credit,
Bundy and Scott talk a bit about this concern in the piece.
&lt;/p&gt;

&lt;p&gt;
The piece also said "It is also necessary to employ a pedagogy that is
informed by the latest research into the most effective ways to teach
computing." This sounds good but the truth is, education research
doesn't have the best reputation among educators. Last month, I
asked one of the best math teachers around what was being bandied
about as best practices in math education according to "the
research?" He basically said "the research says do &lt;b&gt;&lt;b&gt;fad du jour&lt;/b&gt;&lt;/b&gt;
but that doesn't work for me so I just do &lt;b&gt;&lt;b&gt;actually good technique&lt;/b&gt;&lt;/b&gt;."
&lt;/p&gt;

&lt;p&gt;
Over the years, I've spoken to many teachers and by and large the best
ones discredit "the research." Of course, my comment will be
discredited by ed researchers saying that "you're just giving
anecdotes" but then, if I did the same thing while employed as a
researcher, did a couple of surveys and submitted it for publication,
then it would be "research." So much of teaching is a craft and the
truth is, practitioners know best.
&lt;/p&gt;

&lt;p&gt;
Related to this is authentication by citing authority. Particularly
dangerous in our field because many people with little to no real
background in teaching CS are anointed as experts and thought leaders
(see this post: &lt;a href="http://cestlaz.github.io/posts/2015-10-26-self-appointed-experts.html/"&gt;here&lt;/a&gt;). In this case, the viewpoint cites Cameron
Fadjo. I've only met Cameron once or twice and he seems like a sharp
guy but when he was given the post of Director of Software Engineering
for NYC, according to his linked in profile, he had neither taught k12
nor had any real CS background.  This is of course the profile of many
CS Education thought leaders. 
&lt;/p&gt;

&lt;p&gt;
My overall take. It sounds like just like here, Scotland has people
trying to make a difference and trying to do good. It also sounds like
they're falling into the same traps and pitfalls as we are on this
side of the Atlantic.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Can NYCIST become in leader in CS Education?</title>
    <id>http://cestlaz.github.io/posts/nycist/</id>
    <updated>2016-09-24T16:17:53-04:00</updated>
    <published>2016-09-24T16:17:53-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/nycist/"/>
    <summary type="html">&lt;p&gt;
I only learned about NYCIST last spring. They're the "New York
Consortium for Independent School Technologists." They had something
of an open house that I attended. I heard about them from friend
and fellow CS educator &lt;a href="https://twitter.com/ed_saber"&gt;Saber Khan&lt;/a&gt;.  
&lt;/p&gt;

&lt;p&gt;
Last Thursday I spent an afternoon and evening with NYCIST members for
a discussion of the state of K12 Computer Science Education in the
City.
&lt;/p&gt;

&lt;p&gt;
Most of my work has been with public schools and most of the teachers
I know, public school teachers so it was great to make new friends in
the Independent school community.
&lt;/p&gt;

&lt;p&gt;
One thing I realized during the evening was that NYCIST has a real
opportunity to do something special. 
&lt;/p&gt;

&lt;p&gt;
In some ways, the public schools are leading the way in computer
science education as a result of this administrations CS4All
initiative but at the same time, public schools face some real
challenges. While some "early adopters" have developed their own take
on computer science education, by and large, CS4All is being defined
and driven by few for all and, at least right now, the model seems to
be the "a little PD and you're a CS teacher" model.
&lt;/p&gt;

&lt;p&gt;
At the same time, standardized testing and teacher evaluations are
pressuring schools, particularly schools of our most vulnerable
students to push resources towards test prep in tested subjects rather
than real education, including CS.
&lt;/p&gt;

&lt;p&gt;
In this particular instance, NYCIST and independent schools can be
what charter schools were supposed to be before they were corrupted.
&lt;/p&gt;

&lt;p&gt;
Laboratories of innovation. 
&lt;/p&gt;

&lt;p&gt;
NYCIST has already gathered together interested parties and the
independent schools aren't burdened by the weight of politically
driven testing and teacher evaluation. At the same time, small class
sizes and flexible models allow for innovation.
&lt;/p&gt;

&lt;p&gt;
If they wanted to, they could probably create curricular and
instructional frameworks for CS education and. dare I say it, share it
back to the public schools. 
&lt;/p&gt;

&lt;p&gt;
I know I'm ignoring independent school politics and other issues that
would prevent this from happening, but I just feel that if there's a
desire to do so from a group like NYCIST, it could happen.
&lt;/p&gt;

&lt;p&gt;
I'm looking forward to continuing to work with my new friends and if
any of you are interested in finding out more about NYCIST, just tweet
to &lt;a href="https://twitter.com/ed_saber"&gt;Saber&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I don't know if my idea here will take root but if it does, I'd love
to work with NYCIST to make something happen.
&lt;/p&gt;</summary>
    <category term="community" label="community"/>
    <category term="cs" label="cs"/>
  </entry>
</feed>
