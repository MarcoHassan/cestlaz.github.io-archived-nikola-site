<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z (Posts about teaching)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/teaching.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 11 Dec 2017 15:18:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tools can shape how we think</title><link>http://cestlaz.github.io/posts/advent-2016-6-4/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgdb648c4" class="outline-2"&gt;
&lt;h2 id="orgdb648c4"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdb648c4"&gt;
&lt;p&gt;
I've been having fun with this years &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; competition. So
far, I've been able to keep up but with I expect that to change in
another couple of days since I'll be traveling for the weekend.
&lt;/p&gt;

&lt;p&gt;
After solving a problem, I like looking over some of the other
solutions on the Advent of Code &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;subreddit&lt;/a&gt;. Even with similar
agorithmic solutions there's a decent amount of variation in the
actual code and solutions in different languages can look radically
different.
&lt;/p&gt;

&lt;p&gt;
That got me thinking about how the tools we know and use both shape the ways we
approach solving problems and creating things and either limit or
empower us to go from a mental model of a solution or creation to an
actual artifact. 
&lt;/p&gt;

&lt;p&gt;
Relating to this are the common themes that come up in the CS
Education world. The idea that it's computer science not programming
and certainly not merely coding. That's true but the tools and
languages we use shape the whole thinking part and can also give the
students a valuable practical tool that they can leverage to great
advantage in both future classes and work and life endeavors.
&lt;/p&gt;

&lt;p&gt;
I decided to do this rant as a video. I hope you enjoy it:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/x8cZgEogWNw" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>adventofcode</category><category>pedagogy</category><category>teaching</category><category>tools</category><guid>http://cestlaz.github.io/posts/advent-2016-6-4/</guid><pubDate>Wed, 06 Dec 2017 20:01:15 GMT</pubDate></item><item><title>Thoughts On A Hackathon</title><link>http://cestlaz.github.io/posts/thoughts-on-a-hackathon/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org1f00f18" class="outline-2"&gt;
&lt;h2 id="org1f00f18"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1f00f18"&gt;
&lt;p&gt;
Yesterday I was one of the judges at &lt;a href="http://stuyhacks.com/"&gt;StuyHacks&lt;/a&gt;. A one day hackathon at
Stuyvesant run by and organized by the students. I don't have attendee
stats but there were kids from all over the city and at least one team
from New Jersey. The youngest student that I met was in sixth grade
and the oldest were high school seniors. The judging was at the end
but I decided to stop by earlier to see how the hackers were doing.
&lt;/p&gt;

&lt;p&gt;
There was an incredible variety of projects using a wide array of
tools. There were projects built with:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Processing&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Scratch&lt;/li&gt;
&lt;li&gt;A-Frame&lt;/li&gt;
&lt;li&gt;Python / Flask&lt;/li&gt;
&lt;li&gt;HTML/CSS/JS&lt;/li&gt;
&lt;li&gt;and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
A personal highlight for me was running into Sophie - the daughter of
two of my students from #Stuy95. Well, both a highlight and a reminder
that I'm getting old.
&lt;/p&gt;

&lt;p&gt;
The StuyHacks team did a terrific job running things and at the end I
told them I'd love to help with future events.
&lt;/p&gt;

&lt;p&gt;
I did notice a couple of things at the hackathon that echo things I've
learned as a teacher over the years and I thought they were worth
sharing.
&lt;/p&gt;

&lt;p&gt;
The first was the a number of the beginner groups needed more
direction. This didn't seem to be related to grade level or age as
much as CS experience. This isn't a hackathon only issue. It exists in
all learning environments. If as teachers we're too prescriptive
students end up with a single formula to follow. Sure, that'll get
them through a standardized exam like APCS-A but too much of it can
hinder them in becoming creative problem solvers.
&lt;/p&gt;

&lt;p&gt;
On the other hand, not enough structure will leave many kids staring
at a blank page. I remember I gave a quiz years ago. It had one
problem: "You have 20 minutes to prove to me that you learned
something about the past unit on Cellular Autmata" or something like
that. Some kids absolutely loved it but many hated it. Stuy kids are
trained test takers. They're prepared for structure. This threw many
for a loop.
&lt;/p&gt;

&lt;p&gt;
I noticed this issue with some of the hackers at StuyHacks. Some
beginners really had a hard time figuring out what they could do and
what they should do.
&lt;/p&gt;

&lt;p&gt;
A hackathon isn't a classroom so I think the problem is pretty easily
remedied. Groups that were able to latch on to a good mentor seemed to
get the guidance they needed. A beginners hackathon should make sure
they have not only plenty of mentors but they should make sure that
the mentors are prepped with a number of project ideas in a number of
the standard beginner platforms. A hackathon could also provide an
assortment of ideas in a list.
&lt;/p&gt;

&lt;p&gt;
The second thing I noticed was at the end of the day as I was
judging. It started with one particular group. They were pretty
apologetic about their project. Basically because it wasn't
finished. Personally, I thought what they accomplished in essentially
7 hours was pretty impressive. What became clear as we talked is that
this group was deathly afraid of failure. Their deepest fear at that
moment was that I was going to give them high marks and they might
have to show off their incomplete (yet rather impressive) project to a
room full of strangers. 
&lt;/p&gt;

&lt;p&gt;
This fear of failure was prevalent in groups that ultimately didn't
submit their projects for judging and it seemed to be common among
students from high performing, high expectation schools where
frequently one associates a test score or grade with ones value. I'm
not happy to say that Stuy has always had this problem.
&lt;/p&gt;

&lt;p&gt;
This isn't really a problem that a hackathon can or should be able to
address. It's just something I noticed. It's a problem for schools and
also for a society that's test obsessed.
&lt;/p&gt;

&lt;p&gt;
I hope nobody reads too much into these observations. The day was a
tremendous success. A whole bunch of kids had a great day working
together to build cool things with technology. Congratulations to the
StuyHacks team. They did a terrific job putting it all together. If
you're a middle or high school student or know one, keep an eye on the
StuyHacks &lt;a href="http://stuyhacks.com/"&gt;web page&lt;/a&gt; and make sure to attend their next event.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hackathons</category><category>teaching</category><guid>http://cestlaz.github.io/posts/thoughts-on-a-hackathon/</guid><pubDate>Sun, 03 Dec 2017 12:47:34 GMT</pubDate></item><item><title>Early Interesting Problems - Happy Ladybugs</title><link>http://cestlaz.github.io/posts/happy_ladybug/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org021e193" class="outline-2"&gt;
&lt;h2 id="org021e193"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org021e193"&gt;
&lt;p&gt;
We all love interesting problems. The trouble is that it's hard to
find suitably interesting problems for students when they're just
learning the basics. In the very beginning the problems practically
dictate the solution:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;loop over a list and add all the elements or calculate the sum of a
list of integers.&lt;/li&gt;
&lt;li&gt;Determine if  number is prime&lt;/li&gt;
&lt;li&gt;Convert a word into pig-Latin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
It's not that there's no thought involved in solving these but the
students already know the mechanics of solving these by hand so it's a
direct translation into a program.
&lt;/p&gt;

&lt;p&gt;
This isn't a bad thing and it is important but it's fun when we get to the next
level. I've found that a number of the &lt;a href="http://hackerrank.com"&gt;Hacker Rank&lt;/a&gt; archived
competitions have "easy" problems that can be a good fit for
beginners. One that I found and really like is &lt;a href="https://www.hackerrank.com/challenges/happy-ladybugs"&gt;Happy Ladybugs&lt;/a&gt; problem.
&lt;/p&gt;

&lt;p&gt;
The problems is basically as follows:
&lt;/p&gt;

&lt;p&gt;
You get a string of letters. Each letter represents a ladybug of a
different color. Each letter also represents a location of the
ladybug.  A space (or underscore in the actual problem) represents a
free space. For example "AABC DDA" is a line of 2 A colored ladybugs
followed by a B colored one, C colored one, a blank space, 2 D colored and then one
more A colored. 
&lt;/p&gt;

&lt;p&gt;
You can rearrange the line of ladybugs by swapping any ladybug with a
blank space.
&lt;/p&gt;

&lt;p&gt;
A ladybug is happy if it is next to another ladybug of the same
color. The challenge is to determine if all the ladybugs can be made
happy.
&lt;/p&gt;

&lt;p&gt;
I like this problem because while it is non-trivial it is very
approachable. 
&lt;/p&gt;

&lt;p&gt;
To me, the key is that while you can rearrange the list you
don't have to. You only have to determine if it is possible to make
the ladybugs happy. You don't actually have to do so.
&lt;/p&gt;

&lt;p&gt;
The edge cases are pretty easy to deal with - a string of length one
or two but then a little thought is required.
&lt;/p&gt;

&lt;p&gt;
The first insight is that if there are no spaces, you can't rearrange
the ladybugs so all you have to do is scan through the string to test
to see if every ladybug has a neighbor of the same color.
&lt;/p&gt;

&lt;p&gt;
The next insight, and the big one is that if you have at least one
space you can arbitrarily re-order the string. You can show this is
possible  by using a single space to swap any two elements. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someletter&lt;/span&gt;
&lt;span class="n"&gt;someletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someotherletter&lt;/span&gt;
&lt;span class="n"&gt;someotherletter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The final insight is that since you can arbitrarily re-order the
ladybugs as long as you have at least 2 of each color, you can make
them all happy.
&lt;/p&gt;

&lt;p&gt;
Since my class is currently just starting dictionaries in Python we
solved this with lists and then transitioned to dictionaries.
&lt;/p&gt;

&lt;p&gt;
Here's a dictionary based solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;    This might miss some of the real edge cases in the hackerrank&lt;/span&gt;
&lt;span class="sd"&gt;    problem. I haven't read the problem carefully in over a year and &lt;/span&gt;
&lt;span class="sd"&gt;    forget what it specified for things like lists of only spaces,&lt;/span&gt;
&lt;span class="sd"&gt;    lists with only one bug etc.&lt;/span&gt;

&lt;span class="sd"&gt;    Also, the Hackerrank question uses an underscore (_) instead of a space.&lt;/span&gt;
&lt;span class="sd"&gt;    '''&lt;/span&gt;
    &lt;span class="c1"&gt;# handle a string of less than 2 ladybugs&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# handle the string of 2 ladybugs - both must be the same and not a space&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;


    &lt;span class="c1"&gt;# handle the case of no spaces &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="c1"&gt;# no spaces, every item must be next to one of the same color&lt;/span&gt;
	&lt;span class="c1"&gt;# so we loop from 1 to len-1 and for each item&lt;/span&gt;
	&lt;span class="c1"&gt;# check the one before and the one after&lt;/span&gt;
	&lt;span class="c1"&gt;# if we ever have an unhappy bug, we can just return False&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

	&lt;span class="c1"&gt;# if we ever get here every bug has at least one neighbor of the same color&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# if we get here it means there's at least one space so we can rearrange the bugs&lt;/span&gt;
    &lt;span class="c1"&gt;# however we please so as long as there are at least 2 bugs of each color&lt;/span&gt;
    &lt;span class="c1"&gt;# we can make them all happy&lt;/span&gt;

    &lt;span class="c1"&gt;# replace the spaces with "" since we don't want to count them&lt;/span&gt;
    &lt;span class="c1"&gt;# Since we know they were in the string we can rearrange but&lt;/span&gt;
    &lt;span class="c1"&gt;# they're no longer needed&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# tally up all the bugs to see if there are at least 2 of each&lt;/span&gt;
    &lt;span class="n"&gt;bugcounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set to 0 the first time we see this key&lt;/span&gt;
	&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;


    &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugcounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# if there is any value of 1 in the counts then there's a lone ladybug&lt;/span&gt;
    &lt;span class="c1"&gt;# that can't be made happy&lt;/span&gt;
    &lt;span class="c1"&gt;# so we return True (happy) if there are 0 counts of 1 in our list &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 


&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"abaccbe ff eggggggg"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;are_happy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I love problems like these. 
&lt;/p&gt;

&lt;p&gt;
I just wish there was an easy way to find all contest problems of a
certain level like "easy" or "medium." If anybody knows please share
in the comments.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>problems</category><category>teaching</category><guid>http://cestlaz.github.io/posts/happy_ladybug/</guid><pubDate>Mon, 23 Oct 2017 12:47:46 GMT</pubDate></item><item><title>Programming Idioms</title><link>http://cestlaz.github.io/posts/programming-idioms/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org7f05229" class="outline-2"&gt;
&lt;h2 id="org7f05229"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7f05229"&gt;
&lt;p&gt;
I just read Jeff Yearout's recent post titled &lt;a href="http://k12csteaching.blogspot.com/2017/10/the-beginners-garden-of-concepts.html"&gt;The Beginner's Garden of
Concepts&lt;/a&gt;. Not directly related but it got me thinking about
programming idioms.
&lt;/p&gt;

&lt;p&gt;
I've been using the phrase "programming idiom" for years to describe a
short useful recurring code construct. I didn't realize that it was
officially "a thing" until doing a web search on the phrase years
later.
&lt;/p&gt;

&lt;p&gt;
As our students grow from newbies on I think it's helpful for them to
see recurring and related patterns and programming idioms gives us a
name to apply to many beginner patterns. An early idiom might be
"finding the smallest in a list:"
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;min_index&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	&lt;span class="n"&gt;min_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Another is the very similar and more general "do something on every
item in a list:"
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something to or with dataset[i]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By talking about constructs like these as idioms it helps students see
and develop coding patterns. It also helps them to build mental
abstractions. Each of the above idioms are a few lines of code but
each are also a single concept. Students learn to think of them as the
concept.
&lt;/p&gt;


&lt;p&gt;
When students learn about list comprehensions in python they'll
rewrite the "do something…" more like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
but the pattern or idea is the same.
&lt;/p&gt;

&lt;p&gt;
Other early idioms might include swapping variables:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and loops until an exit condition are met:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_exit_condidtion&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do stuff&lt;/span&gt;
    &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;checks&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Even more difficult concepts like recursion can be described in an
idiomatic way:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;BASE_CASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;new_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modify_to_eventually_get_to_base_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Patterns like these, or idioms, come up over and over again. We don't
have to explicitly mention them in our teaching but I think it's
helpful to our students if we do.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>programming</category><category>teaching</category><guid>http://cestlaz.github.io/posts/programming-idioms/</guid><pubDate>Sun, 08 Oct 2017 15:51:46 GMT</pubDate></item><item><title>New Term New Tool - Thonny, a Python IDE</title><link>http://cestlaz.github.io/posts/new-tool-thonny/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org66119cb" class="outline-2"&gt;
&lt;h2 id="org66119cb"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org66119cb"&gt;
&lt;p&gt;
Last year I &lt;a href="https://cestlaz.github.io/posts/new-term-new-tool-replit"&gt;wrote about&lt;/a&gt; &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;, an online IDE that supports multiple
languages. At the time it had some rudimentary classroom support and
since I started using it, repl.it has become better and better. I
used it last year with my class because I had to start the year in a
lab where I couldn't easily install my own software. I'll continue to
use repl.it - mostly for it's ability to schedule publish and manage
assignments but when possible, I like having my students work
locally. 
&lt;/p&gt;

&lt;p&gt;
This year I'm excited about another tool - &lt;a href="http://thonny.org"&gt;Thonny&lt;/a&gt;. Thonny's a simple
Python IDE designed for beginners. I discovered it last year but at a
time when it was impractical for me to use with my students. This
year I can and I'm really liking it. I'm still an Emacs guy and will
continue to use Emacs for my python development (&lt;a href="http://cestlaz.github.io/posts/using-emacs-12-python/"&gt;video 1&lt;/a&gt;, &lt;a href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet"&gt;video 2&lt;/a&gt;) but
for beginners I think Thonny is the way to go.
&lt;/p&gt;

&lt;p&gt;
Some of Thonny's highlights:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An integrated Python 3 virtual environment making for ease of
installation and consistency across student installs&lt;/li&gt;
&lt;li&gt;A debugger that shows how expressions are evaluated&lt;/li&gt;
&lt;li&gt;Great visualizations of function calls that make it easier to
understand the call stack and scope&lt;/li&gt;
&lt;li&gt;The ability to look at memory to understand references.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Rather than go into the gory details in text, I put together this
video:
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/lWaCl0WjNZI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>teaching</category><category>tools</category><guid>http://cestlaz.github.io/posts/new-tool-thonny/</guid><pubDate>Thu, 21 Sep 2017 11:31:42 GMT</pubDate></item><item><title>Theseus's Curriculum</title><link>http://cestlaz.github.io/posts/theseus%27s-curriculum/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org0098d75" class="outline-2"&gt;
&lt;h2 id="org0098d75"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0098d75"&gt;
&lt;p&gt;
With the school year starting I was originally planning on writing
about my class rules. 
&lt;/p&gt;

&lt;p&gt;
Instead I think I'll riff on &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;'s post today titled
&lt;a href="http://blog.acthompson.net/2017/09/curriculum-is-hard.html"&gt;Curriculum is Hard&lt;/a&gt;. I'm guessing I found curriculum design and
development daunting decades ago but at this point in my career it's
something I enjoy. In any event, Alfred got me to thinking - when is a
curriculum your own?
&lt;/p&gt;

&lt;p&gt;
If you grab a curriculum complete with lesson plans, assignments; the
whole kit and caboodle and you use it verbatim it's clearly not your
curriculum. It probably also isn't really teaching.
&lt;/p&gt;

&lt;p&gt;
What about the more common case. Math curricula has basically been set
for years. Algebra, Geometry &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;, and then Algebra 2
and Trigonometry. Most books seem to be sequenced in a similar way
and at least in the schools I know about, the math department has some
document listing a day by day list of topics. This makes sense since
you probably have more than one class of each type and you want some
cross class consistency. Particularly during the first weeks of the
semester when kids can transfer and then also at the end of term or
year. 
&lt;/p&gt;

&lt;p&gt;
When a teacher uses that departmental document are they using someone
elses curriculum?
&lt;/p&gt;

&lt;p&gt;
What if they create their own homeworks and assigments?
&lt;/p&gt;

&lt;p&gt;
Most teachers I know use the department's curriculum but make their
own unit and day to day lesson plans. Most revise them each
semester. Typically these teachers do a little more here or a little
less there depending on a number of factors.
&lt;/p&gt;

&lt;p&gt;
Are they creating their own curriculum?
&lt;/p&gt;

&lt;p&gt;
What if they re-sequence the topics?
&lt;/p&gt;

&lt;p&gt;
How about adding an enrichment topic?
&lt;/p&gt;

&lt;p&gt;
Back when I taught math I used the departmental syllabus, as many
texts as I could find, colleagues lesson plans and whatever I could
find but I always pulled it together to something I could call my
own. If I didn't, I wouldn't have been comfortable going in front of
my class. Was it my curriculum? They were certainly my lessons.
&lt;/p&gt;

&lt;p&gt;
Now, when designing a course I start from the end outcomes and work
backwards but when teaching a course, I still look at as many
resources as I can find. I'll pull a little from here, a little from
there and combine that with whatever I can come up with myself.
&lt;/p&gt;

&lt;p&gt;
So, when is it your curriculum and when is it not? 
&lt;/p&gt;

&lt;p&gt;
If you're just delivering scripted lessons it's certainly not yours.
&lt;/p&gt;

&lt;p&gt;
If you know your stuff and you  take someone elses material, make it
your own and add it to your bag of tricks, I think it's now yours as
well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/theseus%27s-curriculum/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;which is really logic and deductive
reasoning using Euclidean Geometry as platform&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>currulum</category><category>teaching</category><guid>http://cestlaz.github.io/posts/theseus%27s-curriculum/</guid><pubDate>Tue, 05 Sep 2017 22:41:14 GMT</pubDate></item><item><title>Teaching APCS-A for the first time</title><link>http://cestlaz.github.io/posts/teaching-ap-first-time/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org4c65e9a" class="outline-2"&gt;
&lt;h2 id="org4c65e9a"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4c65e9a"&gt;
&lt;p&gt;
I got  an email from a friend the other day. Among other things, he
mentioned that he would be teaching APCS-A for the first time this
year. He's a little trepidatious. He knows his stuff but he hasn't
really done much using Java.
&lt;/p&gt;

&lt;p&gt;
I was going to respond in an email but thought I might share here
instead.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
TL;DR - for all you APCS teachers who are new or new to Java - learn
your core CS, lean on your resources and support and it's OK to tell
your kids "I don't know, I'll get back to you.". Don't worry, you'll be great.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The first time I taught APCS was some time around 1991 or 1992. It was at
&lt;a href="http://www.sewardparkhs.com/Famous-Alumni/"&gt;Seward Park&lt;/a&gt; &lt;a href="http://www.sewardparkhs.com/History/"&gt;High School&lt;/a&gt;. It was the AB curriculum - that is one
semester of programming in Pascal and one semester of Data Structures
and Algorithms.  Being a computer science major the core material was
never a concern. I had taken APCS the first time it was offered in May
1984 in Pascal and while most of my college and pre-teaching professional work
was in C, my college started it's CS sequence with Pascal. I was more
concerned with the actual teaching part. I had taught math for a year
and a half at that point but never CS and by any measure I was still
wet behind the ears. I never finished that first experience because I
was excessed to Stuy mid semester. I wasn't particularly happy with my
performance but looking back, I think I did a pretty good job given
the situation and my experience.
&lt;/p&gt;

&lt;p&gt;
After teaching math for a year and a half I was back in APCS at
Stuy. Still in Pascal. I spent the next few years figuring out how to
teach CS and APCS in particular along with starting a couple of new
classes. When the College Board decided to move the AP class to C++ I
was happy, sad and a little worried. Pascal had a bunch of limitations
but I had never used C++. True, I was a C programmer at heart but I
had never really done the OOP thing. I did, as it turned out, design a
number of my C systems in an Object Typed design: I would use a single
file per "class" where local variables were de facto instance
variables and functions in the file were methods and each file was a
singleton class. I read &lt;a href="https://www.amazon.com/Object-Oriented-Analysis-Design-Applications-3rd/dp/020189551X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1503519770&amp;amp;sr=8-1&amp;amp;keywords=Grady+Booch"&gt;Booch&lt;/a&gt; and &lt;a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=asap_bc?ie=UTF8"&gt;Meyer&lt;/a&gt; on my own but I had no
schooling in OOP and no professional experience.
&lt;/p&gt;

&lt;p&gt;
As it turned out, I didn't have to worry. I knew my CS and while it
took me a while to become comfortable with OOP, the class, and of
course I knew this from the get go, started from nothing and built
up complexity a step at a time. The worst that might have happened is
that some of my solutions might have been more C-esque than C++.
&lt;/p&gt;

&lt;p&gt;
The move to Java was a little more jarring. Now we had a totally new
language. I couldn't fall back on C. It removed memory management and
explicit pointers and it had to be used in an Object Oriented
manner. I remember asking Mike Schidlowsky, a former student turned
friend who was the Java consultant on the Java edition of Sedgewick's
&lt;a href="https://www.amazon.com/Robert-Sedgewick-Algorithms-Fundamentals-Structures/dp/B008VR3ZH4/ref=sr_1_4?ie=UTF8&amp;amp;qid=1503520269&amp;amp;sr=8-4&amp;amp;keywords=schidlowsky"&gt;Algorithms&lt;/a&gt; book how to do something. It had to do with passing and
modifying arrays. In C there were a number of ways to accomplish what
I wanted to do. In Java, I couldn't figure out how to do it the way I
wanted. My friend Mike told me "you just don't do it that way in
Java." Again, it turned out that I didn't have to worry. The basic
coding was still the same as were the data structures and
algorithms. The only challenge was that I had to get into a Java OOP
mindset which it turned out wasn't that hard. 
&lt;/p&gt;

&lt;p&gt;
While I never really warmed up to OOP - I find other paradigms more
natural for me, I knew my CS and got more and more comfortable with
the Java (or C++) way of doing things as time wore on. Sometimes I
would say "I don't know" or "let's figure it out" but that's OK.
&lt;/p&gt;

&lt;p&gt;
Nowadays, there are many more resources available for CS teachers. If
you're new, lean on them. Use the mailing lists, stackexchange,
facebook groups. Online resources like repl.it, codehs.com etc. Yes,
it's true that you'll be better next time around and even better years
down the road but right now, you're probably better than you think.
&lt;/p&gt;

&lt;p&gt;
A number of my former students volunteer for &lt;a href="https://www.tealsk12.org/"&gt;TEALS&lt;/a&gt; - a really great
program that brings software engineers into the classroom to work with
non-CS teachers to deliver instruction. A number of my kids have
shared the following sentiment: 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
I don't know if I'm really helping
the teacher to become self sufficient or if I'm a great teacher but I
do know one thing - while I'm there, the kids are getting a hell of a
lot more than if I wasn't there." 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
– Remember that as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ap</category><category>apcs</category><category>cs</category><category>education</category><category>teaching</category><guid>http://cestlaz.github.io/posts/teaching-ap-first-time/</guid><pubDate>Wed, 23 Aug 2017 19:56:46 GMT</pubDate></item><item><title>Three strikes and you're out or third time's a charm</title><link>http://cestlaz.github.io/posts/three-times/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orge76b2cb" class="outline-2"&gt;
&lt;h2 id="orge76b2cb"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge76b2cb"&gt;
&lt;p&gt;
&lt;a href="https://twitter.com/CompSci4All/with_replies?lang=en"&gt;Brenda Wilkerson&lt;/a&gt;, Director of CS and IT education for Chicago public
schools was one of the keynote speakers at this year's CSTA
conference.  During her talk, she made a comment about it taking three
times through to get it right so if you're working hard and struggling
in your first year of teaching CS, it's not the time to give
up. Learning to teach takes time.
&lt;/p&gt;

&lt;p&gt;
She's absolutely correct. I saw this in myself and I've seen this in
many other young teachers. First year through, your job is to
survive. This is when you rely on colleagues lesson plans, it you can
you shadow another teacher and in general do your best to give what
you can to your students while making it through the semester. 
&lt;/p&gt;

&lt;p&gt;
Then, I often see something interesting. Year two is frequently a step
back. It was for me and I've seen this in many young teachers in many
subject areas. I'm guessing this happens because we feel we have a
year under our belt and then we overreach while trying to be
innovative and more effective.
&lt;/p&gt;

&lt;p&gt;
In year three things start to improve again and then, if the teacher
continues to work at their craft, there's steady progress for years to
come. At the point, the teachers seem to better understand how to
experiment and grow as a teacher in a safer way while also
understanding that it's OK to have a bad day or even a bad unit -
there's usually time to recover.
&lt;/p&gt;

&lt;p&gt;
It's also interesting that while this progression is most obvious in
new teachers it also seems to take place with experienced teachers
teaching new courses. 
&lt;/p&gt;

&lt;p&gt;
All this means that teaching CS or any new subject takes time, effort,
and patience. It means young teachers shouldn't beat themselves up and
that supervisors need to be supportive and give the time and resources
to allow teachers to succeed.
&lt;/p&gt;

&lt;p&gt;
It also means that schools with high teacher churn - notably charter
chains create environments that are anything but conducive to allowing
society to build a cadre of expert teachers. It works for these
charter chains because they're exploiting the fact that they require a
small number of teachers as compared to large urban public schools so
can burn through teachers like gasoline and the fact that they're
judged only by standardized tests. The model is not sustainable if
privatizers get their wish and charters become the national norm.
&lt;/p&gt;

&lt;p&gt;
Finally, it's another reason for people to wise up to "leadership"
programs like Teach for America where candidates come in for a couple
years before moving on to "better" opportunities.
&lt;/p&gt;

&lt;p&gt;
So, if the third time's a charm, how about the flip side? After how long
a period of time should we expect CS teachers to really know their
subject area? I'd say three years is also probably right. Year one,
the teacher is just surviving but after that, I'd expect a teacher to
want to master their subject. When I taught math early on in my
career, I felt overmatched. Particularly at Stuyvesant. I was a CS
major, not a math major. What did I do? I sat in on colleagues
classes and did self study over the summer. Of course by the time I
got up to speed, at least to my standards, I was teaching compute
science.
&lt;/p&gt;

&lt;p&gt;
So, if you're a new CS teacher, why not take CS101 and data structures
over the summer instead of doing another scripted PD? Between local
and community colleges, at least in urban areas, this shouldn't be
a problem. 
&lt;/p&gt;

&lt;p&gt;
So, is third time a charm? Three strikes and you're out? A bit of
both? 
&lt;/p&gt;

&lt;p&gt;
We have to give our new CS teachers the time and support to learn to
teach and to learn the subject area but at the same time, I think it's
reasonable to require that they do so given the resources.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>education</category><category>teaching</category><guid>http://cestlaz.github.io/posts/three-times/</guid><pubDate>Fri, 21 Jul 2017 21:38:19 GMT</pubDate></item><item><title>Observing CS Teachers</title><link>http://cestlaz.github.io/posts/cs-teacher-eval/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgcdafb65" class="outline-2"&gt;
&lt;h2 id="orgcdafb65"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcdafb65"&gt;
&lt;p&gt;
Another set of tweets god me thinking:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;How do we help school administrators help and evaluate CS
teachers? asks &lt;a href="https://twitter.com/lsudol"&gt;@lsudol&lt;/a&gt; of &lt;a href="https://twitter.com/CSForAll"&gt;@CSForAll&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csta2017?src=hash"&gt;#csta2017&lt;/a&gt;
Many don't understand CS&lt;/p&gt;— Alfred Thompson (@alfredtwo)
&lt;a href="https://twitter.com/alfredtwo/status/884427047635795969"&gt;July
10, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;If the current system is any indication, checklists are not
the answer&lt;/p&gt;— Mike Zamansky (@zamansky) &lt;a href="https://twitter.com/zamansky/status/886220912110043136"&gt;July 15,
2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
I get the intent. CS teachers should be evaluated by people who have
some clue about the subject. Leigh Ann's reporting that some people
are working on checklists got me wondering if it really matters? Sure,
it matters if teacher observations were actually set up to improve
instruction but given what we have in NY does it really?
&lt;/p&gt;

&lt;p&gt;
In New York City, teacher observations are a major part of a teacher's
annual rating and the other part is still &lt;a href="https://cestlaz.github.io/posts/2013-09-06-why_i_might_no_longer_be_an_effective_teacher.md/#.WWqzc9_6yEI"&gt;that standardized test
nonsense&lt;/a&gt;. Teachers are observed at least 4 and commonly 6 times
or more per year. There might be pre and
post observation conferences.
&lt;/p&gt;

&lt;p&gt;
Sounds good but the system is amazingly flawed.
&lt;/p&gt;

&lt;p&gt;
To start, the DOE uses the &lt;a href="http://schools.nyc.gov/NR/rdonlyres/8A4A25F0-BCEE-4484-9311-B5BB7A51D7F1/0/TeacherEffectivenessProgram1314Rubric201308142.pdf"&gt;Danielson Framework&lt;/a&gt; which provides a basis
for teacher evaluation. The framework is at best &lt;a href="https://tedmorrissey.wordpress.com/2014/03/23/fatal-flaws-of-the-danielson-framework/"&gt;flawed&lt;/a&gt; with even
Danielson coming out to say &lt;a href="https://tedmorrissey.wordpress.com/2016/04/27/danielson-framework-criticized-by-charlotte-danielson/"&gt;it's being misused&lt;/a&gt;. Of course I'm sure she
protested all the way to the bank. A teacher can be a "Danielson
style" teacher and be great but a teacher can also check all
the Danielson boxes and be mediocre at best. Likewise, some of the
best teachers I know break the Danielson mold and if a supervisor
rigidly adheres to the framework these great teachers would be found
ineffective.
&lt;/p&gt;

&lt;p&gt;
To make matters worse, the rubric is so large that the DOE just
focuses on small parts which means even if the framework was
comprehensive and correct, teachers are only evaluated on a small
part.
&lt;/p&gt;

&lt;p&gt;
When a supervisor evaluates a teacher, they have a checklist with the
rubric where they can rate a teacher 1 (ineffective), 2 (developing),
3 (effective), and 4 (highly effective) and write down some notes. 
&lt;/p&gt;

&lt;p&gt;
I guess the hope was to have some consistency but the truth is the
process is very subjective. I know a supervisor who gave a teacher a
ratings of 2 (which is basically failing) for the professional
development category even though the teacher fulfilled all contractual
obligations and then some. There are also supervisors who won't give a
rating of 4 out of principle. On the other side, I've met supervisors
loathe to give low scores.
&lt;/p&gt;

&lt;p&gt;
The tweets at the top of this post refer to the current situation
where CS teachers are never observed and evaluated by supervisors who
are knowledgeable about CS. Even if someone designs a checklist -
something I'm skeptical about given the fact that there are so few
people strong in CS, experienced as teachers and with an eye for
teacher evaluation out there, if the application of the Danielson
framework is any indication, a CS checklist won't help.
&lt;/p&gt;

&lt;p&gt;
Besides, CS won't be any different from any other subject. Since the
destruction of the comprehensive neighborhood high school we've had a
proliferation of small schools. Some people think that small schools
are universally better. They're wrong. You need a mix. One of the
problems with small schools is that you don't have subject area
supervisors. You have a principal and an assistant principal. The
result is that most teachers are evaluated by supervisors with no
subject area expertise and no subject area pedagogical expertise.
&lt;/p&gt;

&lt;p&gt;
The old system, even though it was also subject to abuses was much
better - at least in the hands of a good supervisor. The observation
system is inherently flawed. Observations are snapshots out of context
and the mere presence of an observer changes the tone of the
room. That said, if a supervisor knows the heartbeat of their school
and has ongoing conversations with their staff, they can both ensure
teachers are doing an honest job and also help them to improve.
&lt;/p&gt;

&lt;p&gt;
The method of observation also doesn't have to be complicated. My
first supervisor made it very simple. He said he looked for one basic
thing - "was learning going on?" The conversation would then go from
there. 
&lt;/p&gt;

&lt;p&gt;
Sometimes you have to look beyond the lesson. In my first year, I
frequently observed a friend's history class. One day the class seemed
to do very little. It seemed like all talk and play. I talked to the
teacher about this. He said "that was what they needed today." He was
a master and he was right. You might drop in on his class to see
amazing instruction or you might come in and wonder why he wasn't
fired long ago but at the end of the year when you looked at how much
his kid learned and loved his class you realized that he was an
amazing teacher. No rubric or framework needed. Just the eyeball test.
&lt;/p&gt;

&lt;p&gt;
They also used to have more peer observations.They had to be coordinated
by the department supervisor and he or she had to be in the loop but
the peer observation model helped cross pollinate ideas in a
department, build camaraderie and it also eased the workload of the
supervisor.
&lt;/p&gt;

&lt;p&gt;
To answer Alfred's question from his tweet, how do we help
administrators help CS teachers? Get other teachers involved, keep an
open mind and look at the big picture.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>supervision</category><category>teaching</category><guid>http://cestlaz.github.io/posts/cs-teacher-eval/</guid><pubDate>Sun, 16 Jul 2017 00:13:38 GMT</pubDate></item><item><title>CS Teachers - teacher first or content first</title><link>http://cestlaz.github.io/posts/teacher-to-cs-or-cs-to-teacher/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org1d651ff" class="outline-2"&gt;
&lt;h2 id="org1d651ff"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1d651ff"&gt;
&lt;p&gt;
Is it easier to take CS people and teach them to teach or is it easier
to take teachers and teach them CS?
&lt;/p&gt;

&lt;p&gt;
The question gets batted around from time to time.
&lt;/p&gt;

&lt;p&gt;
This time via twitter:
&lt;/p&gt;


&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Some think it's easier to teach a teacher to teach CS than to teach a CS pro to teach. &lt;a href="https://twitter.com/alfredtwo"&gt;@alfredtwo&lt;/a&gt; is not one of them &lt;a href="https://t.co/QCUP8d8llZ"&gt;https://t.co/QCUP8d8llZ&lt;/a&gt;&lt;/p&gt;— Diane Levitt (@diane_levitt) &lt;a href="https://twitter.com/diane_levitt/status/881874056911388673"&gt;July 3, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Agreed. It takes a lot of work. More than a week long workshop.&lt;/p&gt;— Alfred Thompson (@alfredtwo) &lt;a href="https://twitter.com/alfredtwo/status/882243591090962432"&gt;July 4, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
The conversation was referring to blog posts by &lt;a href="http://blog.acthompson.net/2017/06/become-computer-science-teacher-in-five.html?spref=tw&amp;amp;m=1"&gt;Alfred Thompson&lt;/a&gt; and &lt;a href="https://gflint.wordpress.com/2017/06/20/a-week-of-in-service-another-python-course/"&gt;Garth flint&lt;/a&gt;. 
Alfred's key point - one that I've spoken about before is that short
term professional development does not a CS teacher make.
&lt;/p&gt;

&lt;p&gt;
As to the lead in question? I've seen both routes succeed and both
routes fail. Both can be heavy lifts but there's a missing part of the
equation that's never addressed.
&lt;/p&gt;

&lt;p&gt;
The claim is that it's easier to teach CS to a non-CS teacher because
they already know how to teach. The problem is, particularly in the
later grades that teachers of different subject areas have very
different tool sets. Sure, there are common factors – get the kids
involved, layer, spiral, etc. but you don't teach a CS lesson the same
way you teach a math lesson let alone a literature, history, language
lesson. 
&lt;/p&gt;

&lt;p&gt;
In a math class, it's common to have students write solutions to
problems up on the board. If you try that in a CS class, you'll be
waiting 20 minutes while the kids transcribe the problems. Likewise,
math homework will likely consist of a certain amount of repetitive
practice problems whereas a CS class won't have something directly
analogous. This is not to say that you don't have opportunities for
students to present at the board in CS class or that there isn't
worthwhile homework but rather that even at this simple level, there
are differences. 
&lt;/p&gt;

&lt;p&gt;
So, if we're going to teach a non-CS teacher the CS content, beyond
the challenge of giving them the necessary depth and breadth of
content knowledge we have to teach them how to teach CS.
&lt;/p&gt;

&lt;p&gt;
I've inventoried some of the techniques my colleagues and I have used
in our classes and the collected methods could easily fill a couple of
graduate education courses. 
&lt;/p&gt;

&lt;p&gt;
So, what's the answer to the question? It doesn't matter where you
start but if we want to do right by our kids we need to prepare them
in not two but three areas:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;CS Content&lt;/li&gt;
&lt;li&gt;CS Pedagogy&lt;/li&gt;
&lt;li&gt;General education and pedagogy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Short term PD (professional development) won't do it and neither will
scripts for "teachers" to follow. It's going to take time, will, and
effort.
&lt;/p&gt;

&lt;p&gt;
Here's hoping that municipalities look at the long game. It's fine to
do PD now to get something started but it's not enough. I wanted my
kids math teachers to know math and how to teach it. We should demand
no less from our CS teachers.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>education</category><category>policy</category><category>teaching</category><guid>http://cestlaz.github.io/posts/teacher-to-cs-or-cs-to-teacher/</guid><pubDate>Tue, 04 Jul 2017 20:39:43 GMT</pubDate></item></channel></rss>