<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>C'est la Z (teaching cs)</title><link>http://cestlaz.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://cestlaz.github.io/categories/teaching-cs.xml"></atom:link><language>en</language><lastBuildDate>Tue, 24 Jan 2017 21:30:37 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Essential topics for an intro course (not)</title><link>http://cestlaz.github.io/posts/essentials-for-an-intro-course/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
What essential topics should we teach in our intro courses? This seems
to be a recurring topic recently. 
&lt;/p&gt;

&lt;p&gt;
It can be an important topic but, unfortunately, too often, it seems
that people have too myopic a view
&lt;/p&gt;

&lt;p&gt;
I remember thinking about this years ago when APCS moved from C++ to
Java. Both languages have good and bad points both for practical and
educational use. A big loss in the move to Java was memory management
and the topics you could cover when memory issues arose. 
&lt;/p&gt;

&lt;p&gt;
Of course one might say that memory management shouldn't be in the
first year of CS. That's fine, as long as you put it back in somewhere
later on - something that didn't seem to happen universally. 
&lt;/p&gt;

&lt;p&gt;
That's the myopic view - far too few look at the overall picture.
&lt;/p&gt;

&lt;p&gt;
C++ to Java ended up in removing a topic. I've also seen the reverse. 
I was talking to a friend about intro topics. He told me that it was
critical to cover (insert topic here) in an intro course. Why, I
asked? Because the kids absolutely needed to know that material in the
third year course he was teaching.
&lt;/p&gt;

&lt;p&gt;
I pressed a bit â€“ "how many kids actually remember (insert topic
here) and do you have to reteach anything." The answer - pretty much
no one remembered and he always retaught the subject.
&lt;/p&gt;

&lt;p&gt;
Did this mean that no one taught the topic in the earlier class?
Unlikely. More likely is that the topic was taught without purpose or
context, just because it was supposed to be taught and thus the
knowledge wasn't retained. Sounds to me like the topic wasn't in the
right place to begin with. Maybe it should have just been taught in
that 300 level course to begin with.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/alfredtwo?ref_src=twsrc%255Etfw"&gt;Alfred Thompson&lt;/a&gt; wrote a post earlier today asking about &lt;a href="http://blog.acthompson.net/2017/01/how-important-are-number-bases-for-pre.html"&gt;teaching
number bases&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Is it important? Maybe. Is it essential for an intro course? Probably
not. 
&lt;/p&gt;

&lt;p&gt;
Binary makes sense when you start talking about low level stuff. If
your intro course never gets close to the machine then why muddy the water
with a topic that's out of place. The topic probably won't be
appreciated and retention and understanding will be low. 
&lt;/p&gt;

&lt;p&gt;
If your intro course gets close to the machine or if you decide to
talk about compiled code or similar topics, you have an entre to talk
binary which leads to the convenience of hexadecimal. At Stuyvesant,
it was much more sensible to talk about number bases in our systems
course when we looked at C code in a debugger rather than in our intro
our AP course. 
&lt;/p&gt;

&lt;p&gt;
You also might work on some application where bitmaps or similar as
useful. That might be another good time to talk about number bases.
&lt;/p&gt;

&lt;p&gt;
Is it important for a CS person to understand binary and it's relation
to digital computers? Certainly. Does it have to be studied day one?
Certainly not.
&lt;/p&gt;

&lt;p&gt;
We need to keep an eye on the big picture. You can't get everything
into a single class or a single yea. The question to ask is - do our students know what they have to by the time they
leave our charge?
&lt;/p&gt;</description><category>curriculum</category><category>teaching cs</category><guid>http://cestlaz.github.io/posts/essentials-for-an-intro-course/</guid><pubDate>Mon, 09 Jan 2017 20:56:08 GMT</pubDate></item></channel></rss>