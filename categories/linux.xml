<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z (linux)</title><link>http://cestlaz.github.io/</link><description></description><atom:link href="http://cestlaz.github.io/categories/linux.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 12 May 2016 13:48:46 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>BASH scripting?</title><link>http://cestlaz.github.io/posts/bash-scripting/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over in the Facebook AP Computer Science Teachers group someone asked
for thoughts on covering BASH scripting as a post AP topic.
&lt;/p&gt;

&lt;p&gt;
A number of us made suggestions. I linked to &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzR7Et9vETt"&gt;this&lt;/a&gt; old blog post.
&lt;/p&gt;

&lt;p&gt;
One group member said she asked around for similar suggestions and the
response she got was "vi and awk." I wanted to jokingly respond "and
after they suggested that they got into their time machine and went
back to the 70's."
&lt;/p&gt;

&lt;p&gt;
In all seriousness though, I think that suggesting specific tools or
commands is off base.
&lt;/p&gt;

&lt;p&gt;
The important thing to know about Vi is how to get out of it but it
isn't really a tool in the scripting sense. I do think students should
spend a good amount of time learning a powerful editor and should try
bot Emacs (my choice) and Vim but that's another story.
&lt;/p&gt;

&lt;p&gt;
I also use AWK but as it's a programming language in it's own right,
I'm not sure if I'd introduce it right off the bat.
&lt;/p&gt;

&lt;p&gt;
There are a number of important ideas kids can take away from learning
some Linux (or other Unix flavor):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;There's something out there besides Windows and MacOS
&lt;/li&gt;
&lt;li&gt;All about free software
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;The Unix Philosophy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That last one is the biggie and more specifically, there's a huge
upside in teaching kids the value of "OS as Toolset" where they can
compose the many tools that comprise the Linux experience to get
things done. 
&lt;/p&gt;

&lt;p&gt;
I gave an example of that in the &lt;a href="http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzSBHt9vETu"&gt;post&lt;/a&gt; I previously linked to.
&lt;/p&gt;

&lt;p&gt;
For the teacher, that means wrapping your head around that way of
working. Living in the shell and using pipes to connect program to
progarm to program.
&lt;/p&gt;

&lt;p&gt;
I'd recommend getting into a time
machine ourselves and taking a look at: 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Unix_Programming_Environment" width="250px" align="center"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif" alt="English4.gif" width="250px" align="center"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It's dated but it's really a great book on getting into the Unix way
of doing things, particularly the chapter about filters. It also has
one of the best and clearest introductions to writing a compiler in
the chapter on program development.
&lt;/p&gt;

&lt;p&gt;
As I said, it is dated - shells are much easier to use and much more
robust, there are many more tools now, and they've evolved but it's
really a must read book.
&lt;/p&gt;

&lt;p&gt;
In terms of tools, I get a lot of mileage out of:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;description&lt;/th&gt;
&lt;th scope="col" class="left"&gt;example&lt;/th&gt;
&lt;th scope="col" class="left"&gt;explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;cat&lt;/td&gt;
&lt;td class="left"&gt;catenate or display a file&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;tr&lt;/td&gt;
&lt;td class="left"&gt;Translate characters&lt;/td&gt;
&lt;td class="left"&gt;tr A-Z a-z&lt;/td&gt;
&lt;td class="left"&gt;convert upper to lower case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;sed&lt;/td&gt;
&lt;td class="left"&gt;Stream editor&lt;/td&gt;
&lt;td class="left"&gt;sed "s/a/b/g"&lt;/td&gt;
&lt;td class="left"&gt;Replace all a with b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;wc&lt;/td&gt;
&lt;td class="left"&gt;word count&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt;counts words lines and chars&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;cut&lt;/td&gt;
&lt;td class="left"&gt;cut columns&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;sort&lt;/td&gt;
&lt;td class="left"&gt;sort lines&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
A nice simple thing you can do with these is clean data. Let's say you
want to do some analytics on a book from Project Gutenberg. You might
want to convert all non letters to spaces, and all letters to lower
case:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat book.txt | sed "s/[^a-zA-Z ]/ /g | tr A-Z a-z"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That sends book.txt into sed which uses a regular expression to convert
no space and letters to spaces. The tr command converts all upper case
letters to lower case.
&lt;/p&gt;

&lt;p&gt;
If you want one word per line, add:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "s/\n/g"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and maybe get rid of blank lines:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sed "/^$/d"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We can now count the number of words in the file using &lt;b&gt;&lt;b&gt;*wc&lt;/b&gt;&lt;/b&gt; or even
get counts of all the words:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| sort | uniq -c | sort -n
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;sort&lt;/b&gt;&lt;/b&gt; will sort all the lines, &lt;b&gt;&lt;b&gt;uniq -c&lt;/b&gt;&lt;/b&gt; will compress the lines that are
adjacent and the same and give you a count and then &lt;b&gt;&lt;b&gt;sort -n&lt;/b&gt;&lt;/b&gt; will
sort the results numerically.
&lt;/p&gt;

&lt;p&gt;
I wrote another post a while ago about using the shell to detect
who responded on a Google form. It looks like it didn't convert when
I moved to my current blogging platform - I'll repost that shortly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>linux</category><category>shell</category><guid>http://cestlaz.github.io/posts/bash-scripting/</guid><pubDate>Thu, 12 May 2016 12:39:25 GMT</pubDate></item></channel></rss>