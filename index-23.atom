<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z (old posts, page 23)</title>
  <id>http://cestlaz.github.io/index-23.atom</id>
  <updated>2016-10-15T23:04:14Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index-23.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-22.atom"/>
  <link rel="previous" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="current" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="prev-archive" type="application/atom+xml" href="http://cestlaz.github.io/index-22.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/index-23.html"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>New Term, New Tool - repl.it</title>
    <id>http://cestlaz.github.io/posts/new-term-new-tool-replit/</id>
    <updated>2016-09-02T09:26:02-04:00</updated>
    <published>2016-09-02T09:26:02-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/new-term-new-tool-replit/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
We're now a week in to my first class at Hunter. It's a little early
for me to really compare and contrast the high school to college
experience but I thought I'd share some thoughts on a tool that I've
recently started to play with.
&lt;/p&gt;

&lt;p&gt;
My students were all supposed to be issued laptops at the beginning of
the semester. The plan was to have them learn Linux, the command line,
and a little DevOps along the way. I guess I shouldn't have been too
surprised to learn that the laptops weren't going to come in until
late September.
&lt;/p&gt;

&lt;p&gt;
Scratch all that advance lesson planning. A brief scramble and I was
able to relocate the class into a computer lab but now we can't
customize the kids environments. 
&lt;/p&gt;

&lt;p&gt;
Time to look for an online solution.
&lt;/p&gt;

&lt;p&gt;
We're starting the kids off in Python, a choice that I'll talk about
in some future post and normally my online go to for Python is
&lt;a href="http://codesters.com"&gt;codesters.com&lt;/a&gt;. I'm a big fan of the codesters team and product. This
time, though, I decided to try something else. Specifically &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;. Partly because, as with
codesters, I like the people behind it. It's also pretty simple and it
supports a lot of different languages:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
APL, ES2015 ,Bloop, BrainF, C, CoffeeScript, C++, C++11, C#, Emoticon,
Forth, F#, Go, Java, JavaScript, LOLCODE, Lua, Nodejs, PHP, Python,
Python3, QBasic, Roy, Ruby, Rust, Scheme, Swift, Unlambda, and HTML, CSS, JS
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
It's still a pretty new product so there are occasional hiccups but
I'm really liking things so far. Some of the things I like include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;a simple clean interface.
&lt;/li&gt;
&lt;li&gt;sharing and embedding code:
&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="//repl.it/embed/DF3m/19.js"&gt;&lt;/script&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;project mode which allows multi file projects
&lt;/li&gt;
&lt;li&gt;examples to get you started
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
But the thing I'm really liking are the teacher features they're
working on. The teacher interface isn't fancy. I like that. Things are
simple and clean and they let me get the job done.
&lt;/p&gt;

&lt;p&gt;
I had two extra minutes in class yesterday and in that time, I was
able to:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Make a classroom
&lt;/li&gt;
&lt;li&gt;Invite all my students by email
&lt;/li&gt;
&lt;li&gt;Create 2 quick assignments.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The assignment page lets you give starter code as well as instructions
and it also lets you put in tests that are run when a student submits
their work for instant feedback.
&lt;/p&gt;

&lt;p&gt;
I really like the tests feature on projects. So far, I've only played
with Python unit tests. Repl.it uses a really easy to follow
interface and has a sample test to guide you. There's also an option
for input/output matching which includes flexible matching and regular
expressions but I haven't played with it yet.
&lt;/p&gt;

&lt;p&gt;
Overall, I'm liking this tool. When the kids get their laptops we'll
probably use it somewhat less as they start to learn to use their own
systems but I'm glad to have repl.it in my teaching arsenal.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="pedagogy" label="pedagogy"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Federal Aid for Code Schools - is this a good thing?</title>
    <id>http://cestlaz.github.io/posts/fed-aid-for-code-schools/</id>
    <updated>2016-08-30T15:42:30-04:00</updated>
    <published>2016-08-30T15:42:30-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/fed-aid-for-code-schools/"/>
    <summary type="html">&lt;p&gt;
I saw this headline earlier today: &lt;a href="http://www.inc.com/salvador-rodriguez/coding-bootcamps-just-got-a-big-boost.html"&gt;The U.S. Just Made a Bold Move to Improve Diversity in Tech&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The article talks about a program by which a number of code schools
will be able to accept federal student aid. I don't know if we're
talking student loans or  grants but I'm not sure it matters.
&lt;/p&gt;

&lt;p&gt;
The headline sounds great. I'm not so sure that this is a good thing.
&lt;/p&gt;

&lt;p&gt;
My thinking's evolved over the years but right now, everything tells
me that public funds and for profit education don't mix.
&lt;/p&gt;

&lt;p&gt;
What we, more often than not, end up with is a cash cow for a private concern. 
&lt;/p&gt;

&lt;p&gt;
Example one: The edTPA - a required exam for teacher licensing, at
least in NY. Prospective teachers pay hundreds of dollars to pass this
gatekeeper. Pearson, a private company (and not even an American one)
is essentially in charge of teacher licensing. They make the
assessments, they grade them, they decide who passes. A foreign
company is deciding who teaches our kids and at great expense to those
prospective teachers.
&lt;/p&gt;

&lt;p&gt;
We'd be much better off going back to the old days. To become a
teacher, you had to pass through "The board of examiners." Basically,
to get your permanent license you had to do an oral defense. Teachers
would be placed in a room of principals, supervisors, and master
teachers for an open grilling. It was cheaper and MUCH more
effective. 
&lt;/p&gt;

&lt;p&gt;
Example two: The PSAT 8/9, PSAT, and SAT. These are exams that tell us
one thing: how kids will do on future PSAT and SAT tests. They're not
good predictors of college success but the college board (a non-profit
in name only) has convinced us, or at least "convinced" our
politicians of the exams importance. So, rather than having
individuals make a choice as to whether or not to take these exams, NY
forks over who knows how much money per year so that our kids can take
a test with the belief that the exam will mystically make them college
ready. To make matters worse, students lose a day of instruction and
teachers have to proctor the exam instead of teaching.
&lt;/p&gt;

&lt;p&gt;
Example three: Common core tests. Made in secret, graded in secret
with cut off scores designed after the fact. Absolutely no educational
value but once again, public funds flow freely into testing companies.
&lt;/p&gt;

&lt;p&gt;
The problem is that these private concerns never really have to show
results and they're never held accountable and since the money we pay
them is hidden in city and state budgets, the taxpayer is none the wiser.
&lt;/p&gt;

&lt;p&gt;
So, what about code schools?
&lt;/p&gt;

&lt;p&gt;
In a similar vein, money will flow from the government to the code
schools. The question is, do they really have the secret sauce.
&lt;/p&gt;

&lt;p&gt;
I have lots of friends who run and work in code schools and have met
many more. Some code schools are trying to really educate and some
not so much. In any case, let's take a look.
&lt;/p&gt;

&lt;p&gt;
You frequently hear about the success stories but for every one of
those, you can also find a manager talking about the fact that the
code school graduate can't do anything other than ape the narrow tool
that they were exposed to in the three or so months at the code
school. So, the truth is that results are probably a mixed bag.
&lt;/p&gt;

&lt;p&gt;
Is this good? Well, when you consider the typical code school MO it
really isn't.
&lt;/p&gt;

&lt;p&gt;
To attend a for profit code school you have to not only afford the
tuition but also be able to sustain yourself for the duration of the
program. That makes most code schools options for the well to do -
those already well positioned for success.
&lt;/p&gt;

&lt;p&gt;
Then they make the candidates go through pre-work â€“ frequently online
course work. So, before you even step into a code school, they know
you're likely going to succeed. 
&lt;/p&gt;

&lt;p&gt;
Once in, they train the candidates in a narrow slice of tech. I've
talked to a number of code school leaders about that. I've asked how
well the kids would be able to adapt given the constraints of their 3
month or so training. The typical answer was that the candidate could
just re-up and pay again to learn the next limited time only skill.
&lt;/p&gt;

&lt;p&gt;
Should taxpayer dollars go to this? Probably not. There's no
indication that code schools can provide meaningful long lasting
education to even those who are best prepared to learn on their
own. Whats' more, we haven't seen evidence that they have the answers
for the under-served. Combine that with government's history of not
keeping an eye on and not holding accountable private education
providers, I think we're just setting up a new line of corporate
welfare that will, on the surface help some but it is in no way the
answer. 
&lt;/p&gt;

&lt;p&gt;
Too often public/private means that the private entity gets the money
and the public gets stuck holding the bag. Better would be to have
tech companies foot the bill. Some coding schools already do
this. Tech companies that are happy with coding school graduates can
finance the program. 
&lt;/p&gt;

&lt;p&gt;
What we should be doing is focusing on things like community
colleges. Organizations that are supposed to be real, long term,
community centers. With moderate tweaking, there's no reason why a
community college, not to mention 4 year schools, couldn't provide far
superior preparation than even the best code school.
&lt;/p&gt;</summary>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Using Emacs - 14 - Thoughts</title>
    <id>http://cestlaz.github.io/posts/using-emacs-14-thoughts/</id>
    <updated>2016-08-17T00:00:00</updated>
    <published>2016-08-17T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-14-thoughts/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Sorry for the incosistancy of the posts. I hope to get to that one
video a week soon but I've still got a hectic couple of weeks ahead.
&lt;/p&gt;

&lt;p&gt;
No new material this week, or at least very little. This week, I talk
about some thoughts on the "Using Emacs" series. 
&lt;/p&gt;

&lt;p&gt;
In the video I talk about Sacha Chua and her work as a leader in the
Emacs community. Check out her stuff here: &lt;a href="http://sachachua.com/blog/"&gt;http://sachachua.com/blog/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here's the video - I hope you enjoy it.
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/tSx_sGgoVNk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
As always, please leave feedback here or on the video.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 13 - Yasnippet</title>
    <id>http://cestlaz.github.io/posts/using-emacs-13-yasnippet/</id>
    <updated>2016-08-04T00:00:00</updated>
    <published>2016-08-04T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
It turns out that &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;Elpy&lt;/a&gt;, a popular emacs package for python development
is much easier to set up than I remember. It turns out all you need
is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elpy&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elpy-enable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The video shows how to install and a bit of use. I don't think it's a
package I'm going to use much since I use other tools to do similar
things but it's worth checking out. 
&lt;/p&gt;

&lt;p&gt;
The main event this week is &lt;a href="https://github.com/joaotavora/yasnippet"&gt;yasnippet&lt;/a&gt;, a package that lets you expand
text aliases. Let's say you want to put the fairly standard:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
in my file. I can just type &lt;b&gt;&lt;b&gt;ifm&lt;/b&gt;&lt;/b&gt; and then hit the &lt;b&gt;&lt;b&gt;TAB&lt;/b&gt;&lt;/b&gt; key and
it would expand to the above code. Yasnippet also lets you leave
placeholders for variables, function names and more. It's a pretty
neat package.
&lt;/p&gt;

&lt;p&gt;
I use it for boilerplate code. The example in the video shows how I
set up a snippet for the boilerplate code used when creating an
application with the &lt;b&gt;&lt;b&gt;Flask&lt;/b&gt;&lt;/b&gt; python microframework.
&lt;/p&gt;

&lt;p&gt;
Setting up yasnippet is as easy as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and it has built in support for &lt;a href="https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d"&gt;tons of langauges&lt;/a&gt;. You can also easily
create your own snippets. See the documentation for details on the
file format. Just create a text file for the snippet and place it in a
subidectory under the snippets subdirectory of .emacs.d. The name of
the subdirectory should be the name of the emacs mode for which the
snippet is defined. I put up the snippet I use for flask so feel free
to check that out.
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/4aYMa8f6B0o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Yasnippet:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/joaotavora/yasnippet"&gt;Home Page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joaotavora.github.io/yasnippet/"&gt;Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d"&gt;Included snippets&lt;/a&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elpy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/jorgenschaefer/elpy"&gt;Home Page&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flask:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org"&gt;Flask Home Page&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
</feed>
