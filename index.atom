<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z</title>
  <id>http://cestlaz.github.io/index.atom</id>
  <updated>2016-06-15T15:06:02Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-20.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Robots platforms and practicalities</title>
    <id>http://cestlaz.github.io/posts/robot-survey/</id>
    <updated>2016-06-15T09:08:28-04:00</updated>
    <published>2016-06-15T09:08:28-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/robot-survey/"/>
    <summary type="html">&lt;p&gt;
I received an email from a friend the other day asking me about a
particular robotics platform she recently saw.
&lt;/p&gt;

&lt;p&gt;
I've played with robotics on and off over the years ranging from
building them from (not using) scratch using Atmel chips and programming them in
assembly to using Arduino based platforms to using pre-built robot
platforms. They're really cool and since they interact with the real
world you can do all sorts of interesting and motivational things with students.
&lt;/p&gt;

&lt;p&gt;
I've done these on my own as a hobbyist and also with students either
individually or in small groups, but never as part of a class I had
been teaching.
&lt;/p&gt;

&lt;p&gt;
Why not?
&lt;/p&gt;

&lt;p&gt;
The biggest reason is that the classes I've taught are already so
packed full of CS goodness that we can't even get everything done
that's theoretically on the syllabi.
&lt;/p&gt;

&lt;p&gt;
The other has to do with practical concerns.
&lt;/p&gt;

&lt;p&gt;
Equipment costs - Let's say we can get our platform at $100 a pop. I
just can't see a public school with 34 kids in a class getting one per
student or one for every two.
&lt;/p&gt;

&lt;p&gt;
So, what's the robot to student ratio and how much actual access do
the kids get? If they're designing  building, do they all get to
design and build? Same question with coding and operating.
&lt;/p&gt;

&lt;p&gt;
Then there's space â€“ if we're talking about a mobile platform as
opposed to something that sits on the desk and is near stationary, we
have a problem. The classrooms I've taught in can barely hold the
students.
&lt;/p&gt;

&lt;p&gt;
There are also issues with breakage, loss, theft and long term
maintainability - will we be able to or even want to fill in with
compatible units in a few years as needed or will we have to reboot
the program from scratch.
&lt;/p&gt;

&lt;p&gt;
All that to deal with before we even get to the fun of teaching and learning.
&lt;/p&gt;

&lt;p&gt;
I'm really curious about the experiences of those of you who do teach
using robots and similar platforms. 
&lt;/p&gt;

&lt;p&gt;
If you are such a teacher, could you please fill out this form or
leave a comment for anything that the form doesn't cover?
&lt;/p&gt;


&lt;iframe src="https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true" width="760" height="500" frameborder="0" marginheight="0" marginwidth="0"&gt;Loading...&lt;/iframe&gt;</summary>
    <category term="hardware" label="hardware"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="robotics" label="robotics"/>
    <category term="robots" label="robots"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 5 - Windows</title>
    <id>http://cestlaz.github.io/posts/using-emacs-5-windows/</id>
    <updated>2016-06-14T00:00:00</updated>
    <published>2016-06-14T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-5-windows/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Sorry for the delay in getting this next video / post up. I spent the
last part of last week at &lt;a href="http://go.personaldemocracy.com/"&gt;The Personal Democracy Forum 2016&lt;/a&gt; which is really an exceptional conference.
&lt;/p&gt;

&lt;p&gt;
I posted a bit about it in my &lt;a href="http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/#.V2B9th9vGAk"&gt;last post&lt;/a&gt; and plan to write some more on it, but for now, more Emacs.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D6OUMVbPKSA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
This video concerns using windows. By using buffers and windows and
the basics you got from the tutorial, you shouldn't have to ever leave emacs.
&lt;/p&gt;

&lt;p&gt;
From here, we'll be able to start going over effective Emacs and then
using it for things like development or document creation.
&lt;/p&gt;


&lt;p&gt;
Some of the key window bindings:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="left"&gt;what it does&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-x 2&lt;/td&gt;
&lt;td class="left"&gt;split-window-below (vertically)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 3&lt;/td&gt;
&lt;td class="left"&gt;split-window-right (horizontally)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 0&lt;/td&gt;
&lt;td class="left"&gt;delete-window (this one)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 1&lt;/td&gt;
&lt;td class="left"&gt;delete-other-windows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x o&lt;/td&gt;
&lt;td class="left"&gt;other-window (moves foxus to the next window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
You also have frames which use &lt;b&gt;&lt;b&gt;C-x 5&lt;/b&gt;&lt;/b&gt; as the prefix, so &lt;b&gt;&lt;b&gt;C-x 5 2&lt;/b&gt;&lt;/b&gt;
creats a new frame and &lt;b&gt;&lt;b&gt;C-x 5 1&lt;/b&gt;&lt;/b&gt; closes the other frames.
&lt;/p&gt;

&lt;p&gt;
Remember, you can always use the help system, in particular &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
to describe a key and &lt;b&gt;&lt;b&gt;C-x f&lt;/b&gt;&lt;/b&gt; to describe a function.
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; can be a little clunky so some people like to use
&lt;b&gt;&lt;b&gt;windmove&lt;/b&gt;&lt;/b&gt; which lets you move between windows by holding the shift
key and with the arrows. To set that up, you can add this to your
&lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;windmove-default-keybindings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I prefer using &lt;b&gt;&lt;b&gt;ace-window&lt;/b&gt;&lt;/b&gt; mode which still uses &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; add this to init.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ace-window&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;remap&lt;/span&gt; &lt;span class="nv"&gt;other-window&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;'ace-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;custom-set-faces&lt;/span&gt;
     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;aw-leading-char-face&lt;/span&gt;
       &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;ace-jump-face-foreground&lt;/span&gt; &lt;span class="nv"&gt;:height&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; 
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The other mode I mention in the video is winner mode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;winner-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which will allow you to use &lt;b&gt;&lt;b&gt;C-c left or right&lt;/b&gt;&lt;/b&gt; to move through past
window configurations.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Ace window mode: &lt;a href="https://github.com/abo-abo/ace-window"&gt;https://github.com/abo-abo/ace-window&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-5-windows"&gt;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>PDF 2016 - How we lost the open web</title>
    <id>http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/</id>
    <updated>2016-06-11T14:41:32-04:00</updated>
    <published>2016-06-11T14:41:32-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/"/>
    <summary type="html">&lt;p&gt;
I spent the last couple of days attending &lt;a href="http://go.personaldemocracy.com/"&gt;Personal Democracy Forum
2016&lt;/a&gt;, described on their landing site as:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The worldâ€™s leading conference exploring and analyzing technology's
impact on politics, government, and society.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
That's the reason why I haven't posted my latest Emacs video.
&lt;/p&gt;

&lt;p&gt;
PDF is a great conference and raised a huge number of important
issues. I'll probably blog about a few over the next few weeks. 
&lt;/p&gt;

&lt;p&gt;
One topic that I've already lamented about has been the way we as a
society are allowing so much information to be silo-ed in platforms
like Facebook.
&lt;/p&gt;

&lt;p&gt;
I use Facebook as much as the next guy but it always irks me when I
see a CS Education post followed by rich discussion hidden within
Facebook's walls and not available for discovery to the outside world
and the future.
&lt;/p&gt;

&lt;p&gt;
I generally don't get a lot of comments on my posts, but when I do,
more appear in the Facebook link to my post rather than publicly on
the post itself.
&lt;/p&gt;

&lt;p&gt;
At the conference, we watched a video by &lt;a href="https://en.wikipedia.org/wiki/Hossein_Derakhshan"&gt;Hossein Derakhshan&lt;/a&gt; which
talked about the direction the web is moving in and the red flags it
should raise with all of us. He echoed my concerns and beyond but in a much more
eloquent way.
&lt;/p&gt;

&lt;p&gt;
I'm urging you to take the less than ten minutes to watch this
video. I know school's winding down for all of us but for those of you
who are teachers out there - share this with your students. I'm sure a
rich discussion will follow.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/oBLAZZd_Xqc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary>
    <category term="civic-tech" label="civic tech"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Navajo Math Circles</title>
    <id>http://cestlaz.github.io/posts/navajo-circles/</id>
    <updated>2016-06-08T07:03:55-04:00</updated>
    <published>2016-06-08T07:03:55-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/navajo-circles/"/>
    <summary type="html">&lt;p&gt;
Yesterday, I saw the New York Premiere of &lt;a href="http://www.zalafilms.com/navajo/"&gt;Navajo Math Circles&lt;/a&gt;, a
documentary on a &lt;a href="http://www.mathcircles.org/"&gt;Math Circle&lt;/a&gt; put in place to support and enrich the
currently under-served community in the Navajo educational system.
&lt;/p&gt;

&lt;p&gt;
At their core, Math Circles are math outreach and enrichment
programs. I'm most familiar with the &lt;a href="https://www.nymathcircle.org/"&gt;New York Math Circle&lt;/a&gt;. I'm friends
with many of their teachers and organizers and my son took part in
their summer program for a couple of years.
&lt;/p&gt;

&lt;p&gt;
Over in the southwest, these Math Circles have been bringing together
students, frequently across great distances each day to explore
problem solving and creativity through mathematics.
&lt;/p&gt;

&lt;p&gt;
As someone who's worked hard to bring educational opportunities to the
have nots, I love the program. Some of the highlights include the kids
working on open ended problems, focusing on process and techniques
more than specific results, working both collaboratively but also
developing self sufficiency, and more. I also love the fact that
they've started teacher math circles to help to bring some of that
math circle magic to the everyday classroom.
&lt;/p&gt;

&lt;p&gt;
I enjoyed the film and recommend you check it out to see what's
possible and I want to share my two big takeaways.
&lt;/p&gt;

&lt;p&gt;
First, early on in the film, one of the people running the program
talked about developing a math enrichment program through and with
Navajo traditions and culture. This is HUGE and I feel it's something
we're losing. America is so diverse from coast to coast and here in
New York City you can see radically different ways of life living
right across the street from each other. Everyone pays lip service to
"making the work interesting and relevant to the student" but few
people walk the walk. These folk do.
&lt;/p&gt;

&lt;p&gt;
Second, I left the documentary with a sour taste in my mouth. Not
because of the program but because the Navajo Math Circle project and
projects like it are scraping together what little resources they can
to try to do what the school systems should be doing to begin with.
&lt;/p&gt;


&lt;p&gt;
As we move to scripted lessons, national standards, curricula dictated
or at least influenced by large private concerns and standardized
tests, our schools are moving further and further away from community
and local culture.
&lt;/p&gt;

&lt;p&gt;
In the documentary, one student pointed out that in math class, they
have to use the textbook. They learn the process and then have to
solve the problems. In Math Circle, there are no textbooks. 
&lt;/p&gt;

&lt;p&gt;
Afterwards, the students in from the Math Circle did some Q&amp;amp;A. I asked
them to elaborate - what's the difference between there Math Circle
experiences and their in school ones. I got:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Math Circle is fun!!!!
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I think that says it all.
&lt;/p&gt;

&lt;p&gt;
I know many great teachers who try to bring culture and community to
their classes. One of my son's best teachers, &lt;a href="http://www.heinemann.com/authors/828.aspx"&gt;Paula Rogovin&lt;/a&gt; did it all
the time. Many of my friends and colleagues try to do so as well but
the powers that be make it harder and harder. 
&lt;/p&gt;

&lt;p&gt;
Until we win back public education it's important to support programs
like Math Circles (and, if I do say so myself, programs like our own
&lt;a href="http://cstuy.org"&gt;CSTUY&lt;/a&gt;) and it's also critical that we work to try to bring community
and culture to our regular classes.
&lt;/p&gt;</summary>
    <category term="curriculum" label="curriculum"/>
    <category term="education" label="education"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Using Emacs - 4 - Buffers</title>
    <id>http://cestlaz.github.io/posts/using-emacs-4-buffers/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-4-buffers/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/v5eTK5lC0xs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Now that we're past the intro material, we'll start looking at emacs
features one at a time. This will let you focus on using the one
feature we're covering, fit it into your work flow, and really get
comfortable with it. 
&lt;/p&gt;

&lt;p&gt;
This time we'll dive into using Emacs effectively with buffers.
&lt;/p&gt;

&lt;p&gt;
Watch the video and then make a real effort to use buffers over the
next few emacs sessions. Before you know it, they'll be a natural part
of your work flow.
&lt;/p&gt;

&lt;p&gt;
The idea of incrementally learning a tool this way seems to be called
&lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;developing micro-habits&lt;/a&gt; and I first read about the idea from &lt;a href="https://twitter.com/sachac"&gt;Sacha
Chua&lt;/a&gt; who is an amazing member of the emacs community.
&lt;/p&gt;

&lt;p&gt;
When seeing beginners, I'll frequently observe this work flow:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Open a terminal
&lt;/li&gt;
&lt;li&gt;Load emacs on a file
&lt;/li&gt;
&lt;li&gt;Edit the file
&lt;/li&gt;
&lt;li&gt;Save and quit emacs
&lt;/li&gt;
&lt;li&gt;Try to compile and run the program (since usually this is in a programming class)
&lt;/li&gt;
&lt;li&gt;repeat
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If the beginner needs to see multiple files at once, they fire up multiple separate emacs.
&lt;/p&gt;

&lt;p&gt;
All of this causes me physical pain.
&lt;/p&gt;

&lt;p&gt;
In emacs, your editor can load several buffers at once, each
associated with a separate file. You can quickly switch between them,
search across them, and more. The video will get you started.
&lt;/p&gt;

&lt;p&gt;
The video also mentions &lt;b&gt;ido&lt;/b&gt; mode. To set up &lt;b&gt;ido&lt;/b&gt; mode, add the
following code to your init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-enable-flex-matching&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-everywhere&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ido-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And here's a great little write up on it by &lt;a href="https://www.masteringemacs.org/reading-guide"&gt;Mickey Petersen&lt;/a&gt;:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://www.masteringemacs.org/article/introduction-to-ido-mode"&gt;https://www.masteringemacs.org/article/introduction-to-ido-mode&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
As I mentioned in the video, I actually use another mode for completions (&lt;a href="https://github.com/abo-abo/swiper"&gt;swiper&lt;/a&gt;),
which I'll cover in a future video and another popular option is &lt;a href="https://github.com/emacs-helm/helm"&gt;helm&lt;/a&gt;
which we'll also cover.
&lt;/p&gt;

&lt;p&gt;
For buffers, the keys to remember are:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Key&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-x b&lt;/td&gt;
&lt;td class="left"&gt;switch-buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x C-b&lt;/td&gt;
&lt;td class="left"&gt;list-buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
To use ibuffer, which is more powerful than list-buffers you can add
either:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'list-buffers&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; make ibuffer default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Or if you want to open ibuffer in another Window:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'list-buffers&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; make ibuffer default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are a couple of useful links on ibuffer and buffer switching:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://ergoemacs.org/emacs/emacs_buffer_switching.html"&gt;http://ergoemacs.org/emacs/emacs_buffer_switching.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/"&gt;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Finally, if you like a tab bar, you can add the following to your
init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;tabbar&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tabbar-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There's also a package &lt;a href="https://github.com/mattfidler/tabbar-ruler.el"&gt;tabbar-ruler&lt;/a&gt; which is supposed to make the
tabbar look nicer but since I don't use the tabbar at all, I haven't
checked it out.
&lt;/p&gt;

&lt;p&gt;
Hope this gets you using emacs more effectively.
&lt;/p&gt;

&lt;p&gt;
Stay tuned for our next video on window management.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-4-buffers"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-4-buffers"&gt;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 3 - How to think about Emacs</title>
    <id>http://cestlaz.github.io/posts/using-emacs-3-elisp/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-3-elisp/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nyQxRarVYH4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
&lt;/p&gt;

&lt;p&gt;
In some ways, it's like those new fangled interactive programming environments where you type in code and the updates are reflected instantly. 
&lt;/p&gt;

&lt;p&gt;
In this video, I try to explain the way I think about Emacs and why it's so cool.
&lt;/p&gt;

&lt;p&gt;
The only change we made to our configuration was adding:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gets rid of the tool bar at the top.
&lt;/p&gt;

&lt;p&gt;
Next time, we start talking about efficiently using Emacs.
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-3-elisp"&gt;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Intro to Org Mode</title>
    <id>http://cestlaz.github.io/posts/using-emacs-2-org/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-2-org/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/x5KiYDd9s8k?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
This video is a brief introduction to org-mode, a mode I use for all
sorts of things.
&lt;/p&gt;

&lt;p&gt;
We'll dive into org-mode later in the series. Right now I just want
you to see the basics since we'll be using org-mode for any notes that
are written up during this series. 
&lt;/p&gt;

&lt;p&gt;
Actually, all my blog posts are written in org-mode.
&lt;/p&gt;

&lt;p&gt;
Here are the important lines to add to your Emacs &lt;b&gt;init.el&lt;/b&gt; file  to
get the nice looking bullets when in org-mode:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;org-bullets&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-bullets-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
About a month ago, Emacs user Harry Schwartz gave a nice overview talk
on org-mode. If you want to get a better idea as to all the things you
can do with it, check it out: &lt;a href="https://www.youtube.com/watch?v=SzA2YODtgK4"&gt;https://www.youtube.com/watch?v=SzA2YODtgK4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Next time, we'll look at a little Elisp. After that, we'll dive in to
using Emacs effectively and efficiently. 
&lt;/p&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-2-org"&gt;https://github.com/zamansky/using-emacs/tree/lesson-2-org&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/sabof/org-bullets"&gt;org-bullets&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Setting up the Package Manager</title>
    <id>http://cestlaz.github.io/posts/using-emacs-1-setup/</id>
    <updated>2016-05-23T13:29:36-04:00</updated>
    <published>2016-05-23T13:29:36-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-1-setup/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video will step you through setting up Emacs to use &lt;a href="http://melpa.org/#/"&gt;MELPA&lt;/a&gt; for packages.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/49kBWM3RQQ8?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
We configured emacs by creating a folder named &lt;b&gt;.emacs.d&lt;/b&gt; and creating a
file within it named &lt;b&gt;init.el&lt;/b&gt;. 
&lt;/p&gt;

&lt;p&gt;
Here's the contents of that file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
	&lt;span class="nv"&gt;:config&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The last two &lt;b&gt;inituse-package&lt;/b&gt; clauses install two helpful packages:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;try&lt;/b&gt;: let's you try packages without installing them.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;which-key&lt;/b&gt;: brings up help on key combinations.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Relavent links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-1-setup"&gt;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Melpa and packages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://melpa.org"&gt;&lt;/a&gt;&lt;a href="http://melpa.org"&gt;http://melpa.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/larstvei/Try"&gt;try&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - Introduction</title>
    <id>http://cestlaz.github.io/posts/using-emacs-introduction/</id>
    <updated>2016-05-23T10:07:18-04:00</updated>
    <published>2016-05-23T10:07:18-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-introduction/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I'm sure I've mentioned that I've been an Emacs wonk for
decades. Since the mid-80's in fact. I've spent time using other
editors, word processors, and development tools but always find my way
back.
&lt;/p&gt;

&lt;p&gt;
I recommend that budding computer science students develop a good tool
set and encourage them to explore Emacs but while it's pretty easy to
load Emacs and find your way around, particularly if you use the mouse
and menus there isn't a clear path to take you from beginner to using
it as an efficient tool let alone customizing it.
&lt;/p&gt;

&lt;p&gt;
Inspired by &lt;a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/featured"&gt;Mattias Petter Johansson&lt;/a&gt;, or MPJ who make a weekly video,
I decided to try to create a series of YouTube videos and matching
blog posts. I'll try to post one a week and I'll try to keep the
videos, at least after the first couple to just a few minutes and have
them focus on &lt;a href="http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/"&gt;micro-habits&lt;/a&gt; - one or two small things that you can
bring to your work flow and internalize.
&lt;/p&gt;

&lt;p&gt;
The first three four (this one and the next three) will focus on
setting things up. After this post we'll have
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Setting up the package manager
&lt;/li&gt;
&lt;li&gt;Intro to org-mode (just so that you recognize the markup)
&lt;/li&gt;
&lt;li&gt;Intro to Elisp (just so you have an idea of those configuration
lines)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then we're off to the races. Here's what I'm thinking about for
the first few topics after the above mentioned ones:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Efficient Navigation
&lt;/li&gt;
&lt;li&gt;Windows and Buffers
&lt;/li&gt;
&lt;li&gt;Theming
&lt;/li&gt;
&lt;li&gt;Auto Completion
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and then a series of short topics to show some of my favorite editing
tools. We'll also cover some larger topics including:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Python Development
&lt;/li&gt;
&lt;li&gt;C/C++ Development
&lt;/li&gt;
&lt;li&gt;Document Preparation
&lt;/li&gt;
&lt;li&gt;Scheduling / Calendaring / Note Taking
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll put together an index to these posts along with any ancillary
materials here: &lt;a href="file:///stories/emacs"&gt;&lt;/a&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Getting started&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This series is going to assume you've installed emacs and worked your
way through the included tutorial.
&lt;/p&gt;

&lt;p&gt;
To help you get to that point, here are some links to posts and sites
that I've found useful:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.braveclojure.com/basic-emacs/"&gt;http://www.braveclojure.com/basic-emacs/&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.masteringemacs.org/article/beginners-guide-to-emacs"&gt;https://www.masteringemacs.org/article/beginners-guide-to-emacs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs"&gt;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux"&gt;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here's a 10 minute getting started guide:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/K3_SFerNIeI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
So, stay tuned.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Collaborative Coding or Cheating</title>
    <id>http://cestlaz.github.io/posts/collaborative-coding-or-cheating/</id>
    <updated>2016-05-20T07:25:13-04:00</updated>
    <published>2016-05-20T07:25:13-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/collaborative-coding-or-cheating/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I haven't been teaching this past semester. That's why I haven't been
writing much about lessons. I miss working with students but that will
resume in the fall and this semester has allowed me to get a jump on
new projects.
&lt;/p&gt;

&lt;p&gt;
It's also allowed me to look at some student issues from a bit of a
distance.
&lt;/p&gt;

&lt;p&gt;
One issue that keeps coming up is cheating. 
&lt;/p&gt;

&lt;p&gt;
Some of it, classroom cheating. my friend &lt;a href="https://twitter.com/cscheerleader"&gt;Ria&lt;/a&gt; recently asked a
question on Facebook about it. A nice thread ensued but unfortunately,
it's locked in the Facebook silo. I've got a lot to say on that and
hope to explore it soon but today let's focus on project
cheating - something that could just as easily apply to homeworks and
student essays and research papers as well.
&lt;/p&gt;

&lt;p&gt;
One part of the question is on students using code they find out in
the wild. &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred&lt;/a&gt; wrote a bit about it on his blog &lt;a href="http://blog.acthompson.net/2016/05/copying-codesteal-from-best.html"&gt;here&lt;/a&gt; where he points
out some pluses, some minuses, and raises some good thought points.
&lt;/p&gt;

&lt;p&gt;
I want to keep it in the class - code sharing amongst students,
project and source code submission, and group projects.
&lt;/p&gt;

&lt;p&gt;
Teachers have all sorts of options these days including:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Using a CMS like Blackboard or Moodle
&lt;/li&gt;
&lt;li&gt;Dropbox based solutions
&lt;/li&gt;
&lt;li&gt;Emailing projects
&lt;/li&gt;
&lt;li&gt;Using development tools and sites such as git with GitHub, BitBucket
or other repository hosting services
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I've always been a fan of having the kids learn real software
engineering skills along with the CS so Git, GitHub and public repos
have been my weapon of choice.
&lt;/p&gt;

&lt;p&gt;
Interesting enough, I've gotten an earful both from fellow teachers
and professors and online for my stance on public repos. 
&lt;/p&gt;

&lt;p&gt;
I keep hearing "the kids will copy from each other" or something like
that. 
&lt;/p&gt;

&lt;p&gt;
As Alfred said in his post: "Students have been copying from
classmates for years."
&lt;/p&gt;

&lt;p&gt;
Students who want to copy assignments have done so long before we've
been teaching CS and they'll be doing it for years to come. 
&lt;/p&gt;

&lt;p&gt;
Using a hidden submission system doesn't help and could hurt.
&lt;/p&gt;

&lt;p&gt;
Far better to create an open environment. You get an opportunity to
talk about code sharing, attribution, learning from each other,
supporting each other, and where to draw the line.
&lt;/p&gt;

&lt;p&gt;
On top of that, the students learn a real tool set and have a chance
to learn real development methodologies.
&lt;/p&gt;

&lt;p&gt;
It's a win all around.
&lt;/p&gt;

&lt;p&gt;
Will open repos stop cheating and irresponsible copying? Certainly
not. It could, however, raise awareness. 
&lt;/p&gt;

&lt;p&gt;
So what do I do on the cheating front?
&lt;/p&gt;

&lt;p&gt;
Besides trying to create a culture where cheating is discouraged,
cooperation is encouraged but where students know the line, I will try
to keep them honest. 
&lt;/p&gt;

&lt;p&gt;
Frequently, the day a big project is due, I'll give a quiz on the
project. Students will have to describe parts of the project and what
they did. Either a student will have had to contributed or at least
will have had to have studied the rest of the teams code to pass the
quiz.
&lt;/p&gt;

&lt;p&gt;
GitHub also gives tools that help. 
&lt;/p&gt;

&lt;p&gt;
Here's the GitHub graph for a project:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/github-graph.png" alt="github-graph.png" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
You can see who did what and when. The teacher can drill down further
to examine the diffs â€“ what code did each student write, when, and
from where. If two students submit very similar code, the commit
timestamps will even tell you who was first.
&lt;/p&gt;

&lt;p&gt;
The tooling for teachers could be better but the infrastructure is
there.
&lt;/p&gt;

&lt;p&gt;
Technology isn't going to prevent cheating and more often than not, it
seems that measures taken don't stop the bad guys but inconvenience
those trying to do it right.
&lt;/p&gt;

&lt;p&gt;
Much better to build a class culture where the kids want to do it the
right way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cheating" label="cheating"/>
    <category term="git" label="git"/>
    <category term="github" label="github"/>
    <category term="policy" label="policy"/>
    <category term="tools" label="tools"/>
  </entry>
</feed>
