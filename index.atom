<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z</title>
  <id>http://cestlaz.github.io/index.atom</id>
  <updated>2016-12-13T19:45:33Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-25.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Rookie Season Redux</title>
    <id>http://cestlaz.github.io/posts/rookie-season-redux/</id>
    <updated>2016-12-12T18:41:28-05:00</updated>
    <published>2016-12-12T18:41:28-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/rookie-season-redux/"/>
    <summary type="html">&lt;p&gt;
Today was the last day of classes at Hunter thus ending my first
semester of teaching at Hunter College.
&lt;/p&gt;

&lt;p&gt;
I very much enjoyed the semester and my class and look forward to
working with the same group when the spring term starts in a few
weeks. 
&lt;/p&gt;

&lt;p&gt;
At the same time, even though I'm a quarter century veteran teacher,
in many ways this was like my rookie season all over again.
&lt;/p&gt;

&lt;p&gt;
My class was an honors intro class so the material wasn't new to me
but there were a number of adjustments going from high school to college.
&lt;/p&gt;

&lt;p&gt;
I taught a few college classes as an adjunct back in the nineties but
I was a young teacher at the time and that was a lifetime ago.
&lt;/p&gt;

&lt;p&gt;
The biggest difference is that we only met two days a week. Monday and
Thursday and we met for 1:45 rather than 45 minutes. The longer class
is nice but the twice a week means that you don't get that every day
reinforcement you have in high school.
&lt;/p&gt;

&lt;p&gt;
It also means that there were times when we would go a week between
classes due to a single day off. 
&lt;/p&gt;

&lt;p&gt;
The biggest challenge, one that I'm continuing to work on, is figuring
out how much we can do in a class, what and how much to assign between
classes and what's the best way to motivate the student's to space out
the work while doing something every day.
&lt;/p&gt;

&lt;p&gt;
That wasn't much of a challenge at Stuy. Having been there so long, I
had a good feel for my students as well as the pace and rhythm of
Stuy. Hunter has it's own rhythm and pace and I'm still figuring it
out.
&lt;/p&gt;

&lt;p&gt;
We also had to pivot early on as the student laptops didn't arrive
until a third of the semester was over.
&lt;/p&gt;

&lt;p&gt;
On the other hand, much of my work these days has to do with
developing the overall honors program as well as Hunter's forthcoming
teacher education programs in CS so I'm only teaching a single class
right now and it's small.
&lt;/p&gt;


&lt;p&gt;
If there are any rookie teachers reading this, congratulations on
getting through your first semester. I know you guys go a little bit
longer, but you're in the home stretch.
&lt;/p&gt;

&lt;p&gt;
Teaching right, particularly in public schools with large classes  will
always be an all in activity - certainly harder and more draining than
anything I ever did in industry but it does get easier as you learn
your school and students and develop your craft. 
&lt;/p&gt;</summary>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Advent of Code 2016 - Check your data</title>
    <id>http://cestlaz.github.io/posts/advent-of-code-2016-check-data/</id>
    <updated>2016-12-10T11:25:38-05:00</updated>
    <published>2016-12-10T11:25:38-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-of-code-2016-check-data/"/>
    <summary type="html">&lt;p&gt;
I'm spending the weekend up in Michigan. Visiting my brother and is
family. We're here to see the &lt;a href="http://umgass.org"&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan's &lt;a href="http://www.umgass.org/current-production"&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.
&lt;/p&gt;

&lt;p&gt;
This hasn't left much time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday's challenge this morning.
&lt;/p&gt;

&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/"&gt;because I'm an
idiot&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="http://adventofcode.com/2016/day/9"&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.
&lt;/p&gt;

&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did. 
&lt;/p&gt;

&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it's
always good to have a daughter that's smarted than you are) but she
saw no problems.
&lt;/p&gt;

&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.
&lt;/p&gt;

&lt;p&gt;
What could be the problem.
&lt;/p&gt;

&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a "save-as"
to save it - last time, I cut and pasted.
&lt;/p&gt;

&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.
&lt;/p&gt;

&lt;p&gt;
The moral of the story â€“ make sure you check the integrity of your
data set - you'll never get the right answer if you're working with
the wrong data.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, you can find my AoC code &lt;a href="https://github.com/zamansky/advent2016"&gt;here&lt;/a&gt;.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>A Teacher looks at Advent of Code 2016 #2</title>
    <id>http://cestlaz.github.io/posts/advent-of-code-2016-2/</id>
    <updated>2016-12-08T08:40:49-05:00</updated>
    <published>2016-12-08T08:40:49-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-of-code-2016-2/"/>
    <summary type="html">&lt;p&gt;
Today we're looking at &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href="http://adventofcode.com/2016/day/2"&gt;number 2&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To change things up, I thought I'd do a video where I live code a solution.
&lt;/p&gt;

&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code. 
&lt;/p&gt;

&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;

&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href="http://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt; to take
away edge and special cases. 
&lt;/p&gt;

&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;

&lt;p&gt;
Here's the video, I hope you enjoy it:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EC8gSrYQ11g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>A Teacher looks at Advent of Code 2016 #1</title>
    <id>http://cestlaz.github.io/posts/advent-code-2016-1/</id>
    <updated>2016-12-06T10:46:17-05:00</updated>
    <published>2016-12-06T10:46:17-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-code-2016-1/"/>
    <summary type="html">&lt;p&gt;
I recently &lt;a href="http://cestlaz.github.io/posts/advent-of-code-2016/"&gt;posted&lt;/a&gt; about &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;

&lt;p&gt;
I thought I'd share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://adventofcode.com/2016/day/1"&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there's a problem - there are no limits on coordinates and we
can't make an unlimited size array.
&lt;/p&gt;

&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; location changes over
time. In the solution below, we start at &lt;b&gt;&lt;b&gt;(0,0)&lt;/b&gt;&lt;/b&gt; and count the steps as
we update two variables &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; and we have the number of steps taken to get there.
&lt;/p&gt;

&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I'm not arguing that what's written is
superior in any way, it's just what I ended up writing).
&lt;/p&gt;

&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which assigns &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; to the first item in the tuple and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt; the
second. I used that a number of times 
&lt;/p&gt;

&lt;p&gt;
I also use a list  I call &lt;b&gt;&lt;b&gt;dirs&lt;/b&gt;&lt;/b&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;

&lt;p&gt;
Here's all the code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# assume our starting location is 0,0&lt;/span&gt;

&lt;span class="c1"&gt;# we start with d=0 -&amp;gt; facing north&lt;/span&gt;
&lt;span class="c1"&gt;# as we turn left or right, we can just increment or decrement d&lt;/span&gt;
&lt;span class="c1"&gt;# and dirs[d] will give us the appropriate dx and dy to update&lt;/span&gt;
&lt;span class="c1"&gt;# our locatoin for the next step&lt;/span&gt;
&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# This is only needed for part 2  - We track visited locations&lt;/span&gt;
&lt;span class="c1"&gt;# by adding them to the dictionary. If we try to add a location&lt;/span&gt;
&lt;span class="c1"&gt;# that's already been visited we know that we've found our final &lt;/span&gt;
&lt;span class="c1"&gt;# location&lt;/span&gt;
&lt;span class="c1"&gt;# locs={}  # uncomment this line for part 2&lt;/span&gt;


&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# the first char in i is the direction to turn in (L or R)&lt;/span&gt;
    &lt;span class="c1"&gt;# the rest represents the number of steps.&lt;/span&gt;
    &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

	&lt;span class="c1"&gt;# Uncomment this block for part 2&lt;/span&gt;
	&lt;span class="c1"&gt;# each time we have a new location, see if it's already in&lt;/span&gt;
	&lt;span class="c1"&gt;# locs, if it isn't, add it.&lt;/span&gt;
	&lt;span class="c1"&gt;# if it is, we're visiting somewhere twice so we're done.&lt;/span&gt;
	&lt;span class="c1"&gt;#if ((x,y) not in locs):&lt;/span&gt;
	&lt;span class="c1"&gt;#    locs[(x,y)]=1&lt;/span&gt;
	&lt;span class="c1"&gt;#else:&lt;/span&gt;
	&lt;span class="c1"&gt;#    print((x,y))&lt;/span&gt;
	&lt;span class="c1"&gt;#    print(abs(x)+abs(y)) # the answer&lt;/span&gt;
	&lt;span class="c1"&gt;#    sys.exit(0)&lt;/span&gt;
	&lt;span class="c1"&gt;#    break&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the answer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>Using Emacs - 24 - Org Capture 2</title>
    <id>http://cestlaz.github.io/posts/using-emacs-24-capture-2/</id>
    <updated>2016-12-03T15:45:26-05:00</updated>
    <published>2016-12-03T15:45:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-24-capture-2/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Not much in today's actual post. The video is a continuation of the last one on &lt;a href="http://cestlaz.github.io/posts/using-emacs-23-capture-1"&gt;org-capture&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The video goes over how I set things up to pop up a new frame to do a
capture even if emacs isn't on screen (as long as it's running) by
hitting &lt;b&gt;&lt;b&gt;F1&lt;/b&gt;&lt;/b&gt;. I would  have preferred to bind to &lt;b&gt;&lt;b&gt;C-c c&lt;/b&gt;&lt;/b&gt; - the
same as within emacs but I havn't figured out how to do that in Ubuntu
or Mint Linux yet.
&lt;/p&gt;

&lt;p&gt;
Here's the elisp code for the configuration file to do the heavy
lifting. I can't for th elife of me remember who's blog I found it
on. If anyone knows, please leave a comment - I'd like to give credit
where credit's due:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(defadvice org-capture-finalize 
    (after delete-capture-frame activate)  
  "Advise capture-finalize to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
    (delete-frame)))

(defadvice org-capture-destroy 
    (after delete-capture-frame activate)  
  "Advise capture-destroy to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
    (delete-frame)))  

(use-package noflet
  :ensure t )
(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
    (org-capture)))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emacsclient -ne "(make-capture-frame)"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There will be a third capture video in a few weeks where I'll talk
about scheduling and agendas. Right now, I'm playing with org-gcal to
sync with my Google calendar and want to figure out a config I'm happy
with before making that video.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gjr9mP01oWE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Advent of Code 2016</title>
    <id>http://cestlaz.github.io/posts/advent-of-code-2016/</id>
    <updated>2016-12-03T15:25:26-05:00</updated>
    <published>2016-12-03T15:25:26-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/advent-of-code-2016/"/>
    <summary type="html">&lt;p&gt;
Once again, it's time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day. 
&lt;/p&gt;

&lt;p&gt;
I wrote a bit about it &lt;a href="http://cestlaz.github.io/posts/2015-12-15-advent.html/"&gt;last&lt;/a&gt; &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ"&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href="http://adventofcode.com/2015/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It's only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I'm thinking of
looking at a couple of the problems this week with my class at Hunter.
&lt;/p&gt;

&lt;p&gt;
I didn't think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You're
first presented with the problem and the input and once you put in the
correct answer, you're presented with part two.
&lt;/p&gt;

&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded. 
&lt;/p&gt;

&lt;p&gt;
It's not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.
&lt;/p&gt;

&lt;p&gt;
Check out &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; and see if it's something you or your classes
might enjoy.
&lt;/p&gt;</summary>
    <category term="apcs" label="apcs"/>
    <category term="cs" label="cs"/>
    <category term="misc" label="misc"/>
  </entry>
  <entry>
    <title>Selling out or getting a seat at the table</title>
    <id>http://cestlaz.github.io/posts/selling-out-or-a-seat-at-the-table/</id>
    <updated>2016-11-30T19:47:17-05:00</updated>
    <published>2016-11-30T19:47:17-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/selling-out-or-a-seat-at-the-table/"/>
    <summary type="html">&lt;p&gt;
The other day, a friend posited a question on Facebook (paraphrased):
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
If called upon, would you take a job in an administration who's policies you strongly
disagreed with?
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
Would you go work for an administration that you reviled in order to
get a seat at the table? To try to affect change from the inside or
would you consider yourself a sellout or worse, publicly promote
positions you disagree with.
&lt;/p&gt;

&lt;p&gt;
Tough question.
&lt;/p&gt;

&lt;p&gt;
The original question implied national level positions. I've never and
will never breath such rarefied air but I have had such experiences
closer to ground level, both with DOE projects and also in
conversations with some charter chains.
&lt;/p&gt;

&lt;p&gt;
My take?
&lt;/p&gt;

&lt;p&gt;
Anyone that knows me knows that I've had various dealings with the NYC
DOE and also knows that those dealings never resulted in outcomes I
was happy with. Over my time at Stuy, I had many philosophical
differences with Tweed (a common nickname for the NYC DOE as they're
housed in the old Tweed courthouse) and these were times where I tried
to play nice to have a seat at the table.
&lt;/p&gt;

&lt;p&gt;
Once I was at a meeting that also included a number of tech industry
heavy hitters. After the meeting, one came over to me. He knew me
by having worked with my former students. I knew him by reputation. He
asked "do they really want our thoughts on this or are we just here so
that they can do what they wanted in the first place and then parade us out 
to say that they consulted experts in the tech industry?" I honestly
didn't know at the time but I had my doubts as to the DOE's sincerity
in being open to either my views or this CTO's As it turned out, they
just did want to parade us. Later in the process, I was told in a back
room that it would be wise of me not to publicly voice my thoughts
about the direction of one particular project.
&lt;/p&gt;

&lt;p&gt;
So there you have it. I was given a seat at the table but only as long
as my views mirrored the views of those in power. Not really much of a
seat. 
&lt;/p&gt;

&lt;p&gt;
I've also sat down with some charter chains - chains that I've been
more than happy to denounce publicly. Why did I take the meetings?
Mostly to find out if I was mistaken in my position and if so, maybe
I could help them. Every time I've had such a meeting, however, I've
left the table with my feelings unchanged and knowing that I would
never willingly help them as I felt their practices were harmful to
kids.
&lt;/p&gt;

&lt;p&gt;
In one case, I took the seat but failed to affect change. In the other
I refused the seat. I'll always take a meeting and I'll always work
with someone who wants to help kids and who has an open mind but I've
found that the more powerful the player, at least in education, the
more likely they are to just want confirmation of their own bias.
&lt;/p&gt;

&lt;p&gt;
You might get a seat at the table but you also might end up lending
your reputation to a cause you don't believe in.
&lt;/p&gt;</summary>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
  <entry>
    <title>Using Emacs - 23 - Org Capture 1</title>
    <id>http://cestlaz.github.io/posts/using-emacs-23-capture-1/</id>
    <updated>2016-11-29T12:00:00-04:00</updated>
    <published>2016-11-29T12:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-23-capture-1/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Org mode has an amazing feature - &lt;b&gt;&lt;b&gt;org-capture&lt;/b&gt;&lt;/b&gt;. I only started
using it recently but it's really awesome. 
&lt;/p&gt;

&lt;p&gt;
What took me so long?
&lt;/p&gt;

&lt;p&gt;
Probably that the manual seemed a little intimidating. 
&lt;/p&gt;

&lt;p&gt;
It really isn't hard, though. Combined with what I'll go over in the
next video and post (and a future one for Google calendar sync) it's
what I use for:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;recording blog ideas
&lt;/li&gt;
&lt;li&gt;managing bookmarks
&lt;/li&gt;
&lt;li&gt;taking short Notes
&lt;/li&gt;
&lt;li&gt;managing my calendar.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I use the binding:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c c"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="ss"&gt;'org-capture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By default, running org-capture brings up a form to capture a "task"
but things get really cool when you start making your own capture
templates. With capture templates, you can speed up recording
information and then tell org-mode to store it where you want it.
&lt;/p&gt;

&lt;p&gt;
Here are my template settings. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="s"&gt;"Appointment"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;  &lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt; &lt;span class="s"&gt;"Appointments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="s"&gt;"Note"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/notes.org"&lt;/span&gt; &lt;span class="s"&gt;"Notes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* Note %?\n%T"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="s"&gt;"Link"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/links.org"&lt;/span&gt; &lt;span class="s"&gt;"Links"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %? %^L %^g \n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="s"&gt;"Blog idea"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Blog Topics:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="s"&gt;"To Do Item"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"To Do Items"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="s"&gt;"Journal"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+datetree&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/journal.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\nEntered on %U\n  %i\n  %a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="s"&gt;"Screencast"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/screencastnotes.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%i\n"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Let's look at the &lt;b&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/b&gt; entry:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="s"&gt;"Blog idea"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Blog Topics:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
It's a list with a bunch of options. The first string &lt;b&gt;&lt;b&gt;b&lt;/b&gt;&lt;/b&gt; is the
key to type to select this template, &lt;b&gt;&lt;b&gt;Blog idea&lt;/b&gt;&lt;/b&gt; is the actual name
for this template. 
&lt;/p&gt;

&lt;p&gt;
The next item, &lt;b&gt;&lt;b&gt;entry&lt;/b&gt;&lt;/b&gt; describes the type of template you're
creating. &lt;b&gt;&lt;b&gt;entry&lt;/b&gt;&lt;/b&gt; says you're going to create an org node with a
headline which can then be added to an org-file. You can also have
your template create things like an org list &lt;b&gt;&lt;b&gt;item&lt;/b&gt;&lt;/b&gt; a checkbox
&lt;b&gt;&lt;b&gt;checkitem&lt;/b&gt;&lt;/b&gt; or even &lt;b&gt;&lt;b&gt;plain&lt;/b&gt;&lt;/b&gt; text. You can see the full set of
options &lt;a href="http://orgmode.org/manual/Template-elements.html#Template-elements"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Next, in parentheses, you have the target - where to store the captured
info. The &lt;b&gt;&lt;b&gt;Blog idea&lt;/b&gt;&lt;/b&gt; template says &lt;b&gt;&lt;b&gt;file+headline&lt;/b&gt;&lt;/b&gt; followed by a
filename in quotes and a headline in quotes. This says to store the
new org heading you're capturing in the file
"~/Dropbox/orgfiles/i.org" under the heading "Blog Topics:" Contrast
this to the &lt;b&gt;&lt;b&gt;appointments&lt;/b&gt;&lt;/b&gt; template which just specifies &lt;b&gt;&lt;b&gt;file&lt;/b&gt;&lt;/b&gt;
and a filename. The &lt;b&gt;&lt;b&gt;appointments&lt;/b&gt;&lt;/b&gt; template will just append the new
appointment to its specified file whereas &lt;b&gt;&lt;b&gt;Blog idea&lt;/b&gt;&lt;/b&gt; will prepend
(due to the &lt;b&gt;&lt;b&gt;:prepend&lt;/b&gt;&lt;/b&gt; option at the end of the template) to the
"Blog Topics:" heading in &lt;b&gt;&lt;b&gt;i.org&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
After this we have the actual template: "* %?\n%T" - the %? and %T are
placeholders for substitutions. The &lt;b&gt;&lt;b&gt;%T&lt;/b&gt;&lt;/b&gt; prompts for a date with a
timestamp and the &lt;b&gt;&lt;b&gt;%?&lt;/b&gt;&lt;/b&gt; is where to leave the cursor for final input
before saving the capture.
&lt;/p&gt;

&lt;p&gt;
Finally, &lt;b&gt;&lt;b&gt;:prepend&lt;/b&gt;&lt;/b&gt; and other options can be found at the above link.
&lt;/p&gt;

&lt;p&gt;
All the substitutions can be found in &lt;a href="http://orgmode.org/manual/Template-expansion.html#Template-expansion"&gt;the docs&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Once you've set up your templates, it's quick and easy to capture
information. 
&lt;/p&gt;

&lt;p&gt;
This video shows the basics. The next one shows how to pop up a
capture even when you're not in emacs and how I use org-capture to
maintain my web bookmarks.
&lt;/p&gt;

&lt;p&gt;
More information on capture templates can be found &lt;a href="http://orgmode.org/manual/Capture-templates.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-wPfxuxIfeU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Inverted Index Project</title>
    <id>http://cestlaz.github.io/posts/inverted-index/</id>
    <updated>2016-11-26T16:52:56-05:00</updated>
    <published>2016-11-26T16:52:56-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/inverted-index/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I haven't spoken much about the class I've been teaching this
semester. It's an intro CS course - a programming heavy intro. I
decided to use Python with a transition at the end to C++. The
transition is to mirror Hunter's normal first CS course that ends with
a C++ intro to prepare the students for next semester's CS course
which is a more intense OOP class using C++ - the language we use in
our core courses.
&lt;/p&gt;

&lt;p&gt;
Throughout the semester I've tried to use a variety of interesting
application areas so as to try to give the students some idea of the
possibilities that studying CS will open up for them.
&lt;/p&gt;

&lt;p&gt;
After covering Python dictionaries and lists I thought we'd play by
building an inverted Index.
&lt;/p&gt;

&lt;p&gt;
The basic idea is to map a set of words back to source files. For
example, given the following four one line files:
&lt;/p&gt;


&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;files&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Â &lt;/th&gt;
&lt;th scope="col" class="left"&gt;Â &lt;/th&gt;
&lt;th scope="col" class="left"&gt;contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;file.01&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;if you prick us do we not bleed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.02&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;if you tickle us do we not laugh&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.03&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;if you poison us do we not die and&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;file.04&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;if you wrong us shall we not revenge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
You could build a data structure mapping each word back to the file(s)
that contain it (partially shown here),
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Word&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Â &lt;/th&gt;
&lt;th scope="col" class="left"&gt;Files containing It's&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;if&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;you&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;prick&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;file.01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;us&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;do&lt;/td&gt;
&lt;td class="left"&gt;Â &lt;/td&gt;
&lt;td class="left"&gt;file.01 file.02 file.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
You can, of course, store more information - how many times a word
appears in a file, where it appears, etc.
&lt;/p&gt;

&lt;p&gt;
This is a fairly easy structure to build. A dictionary where the keys
are the words in the file and the values are lists of the documents
containing the words.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;inverted_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;'if'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'you'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'prick'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'us'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.04'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'do'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file.01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.02'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'file.03'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In addition to letting us work with dictionaries and lists, we can
also review file access and even the python CSV module if we want.
&lt;/p&gt;

&lt;p&gt;
We can immediately write simple queries â€“ "what document(s) contain
the word 'prick,' but things get more interesting if you write
functions to perform &lt;b&gt;&lt;b&gt;and&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt; queries - "what document(s)
contain the words 'prick' &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt; 'do'" for instance.
&lt;/p&gt;

&lt;p&gt;
Why are we building this (besides as a data structure and programming
exercise)? I've seen a number of references to using an inverted index
when building a web search engine. In fact, I think that's something
you do early on in the Udacity Mooc. I just wanted to play with
information retrieval.
&lt;/p&gt;

&lt;p&gt;
I remembered that there was a collection of information, including
last statements from &lt;a href="https://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"&gt;executed offenders in Texas&lt;/a&gt;. Someone conveniently
converted it into a &lt;a href="https://docs.google.com/spreadsheets/d/1HAjZTtPriClY-X3n9whTkA4i5D7bn3bmtHnLoaVICvI/edit#gid=1"&gt;Google Spreadsheet&lt;/a&gt;. The format's a little
different from our simple four file example but then there's more
data. It's straightforward enough to download the spreadsheet as a CSV
file and then read it with a Python program that builds it into an
inverted index.
&lt;/p&gt;

&lt;p&gt;
Now we have some interesting data to play with.
&lt;/p&gt;

&lt;p&gt;
How many offenders used words like "sorry" or "apologize?" How about
references to religion? We can do all sorts of &lt;b&gt;&lt;b&gt;and&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;or&lt;/b&gt;&lt;/b&gt;
queries. 
&lt;/p&gt;

&lt;p&gt;
We just played with this a bit but I could see all sorts of
explorations. What about taking some great work of literature and
turning it into an inverted index by chapter. You could query
characters or certain words and see where and when they appear in the
book. A new and different way of exploring literature.
&lt;/p&gt;

&lt;p&gt;
So, there you have it - an interesting little project we played with
this past semester. We did it in an intro Python course but I could
see it as an interesting project in AP CS A using hashmaps and lists.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="intro" label="intro"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>Evaluate teachers like they do in the real world</title>
    <id>http://cestlaz.github.io/posts/evaluating-teachers/</id>
    <updated>2016-11-19T16:47:32-05:00</updated>
    <published>2016-11-19T16:47:32-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/evaluating-teachers/"/>
    <summary type="html">&lt;p&gt;
This old article has been reposted a few times in my circles over the
past few weeks &lt;a href="http://educationnext.org/facadeofexcellence/"&gt;http://educationnext.org/facadeofexcellence/&lt;/a&gt;. It's from
2003 and complains about the lack of flexibility schools had back then
with regard to hiring and salary. The article is old and out of date
and the seniority system no longer holds for hiring but it does for
lay offs. The salary scale from back then, though, is still in place. 
&lt;/p&gt;

&lt;p&gt;
My friend Alex  asked my thought about how we might deal with evaluating
teacher quality. I thought I'd share them here.
&lt;/p&gt;

&lt;p&gt;
Alex listed a number of commonly tried and suggested options on
teacher evaluation and why they're all flawed. 
&lt;/p&gt;

&lt;p&gt;
I haven't asked Alex's permission so I won't post his list and
comments here. Instead let's start with the boogeyman those that attack public
education always trot out â€“ tenure.
&lt;/p&gt;

&lt;p&gt;
Let's get a couple of things straight - tenure is not a job for
life. For K12 teachers, it's the right to due process. That means you
can't be fired without cause. 
&lt;/p&gt;

&lt;p&gt;
I hear the free market capitalists out there already â€“ "in the real
world, you're an at will employee, why do teachers need this due
process?" - I'll get to that down below. For now, let's look at a few
points on tenure:
&lt;/p&gt;

&lt;p&gt;
First - you can fire a tenured teacher, you just have to document your
case. This means that the supervisor has to actually do their job.
&lt;/p&gt;

&lt;p&gt;
Next - people can complain about rubber rooms and the time it takes to
fire one of these tenured teachers. That's because the DOE won't hire
sufficient hearing officers. In a recently resolved case, a friend of
mine - a terrific AP was finally returned to her post after she was
railroaded on false charges. She was in the rubber room for years. The
DOE kept delaying the process â€“ all she wanted was to go to "trial"
since everyone knew she'd be exonerated - the fact that she was up on
charges at all speaks to why teachers need tenure.
&lt;/p&gt;

&lt;p&gt;
Next - teachers don't grant tenure, the administration does. Why are
all these horrible teachers being granted tenure? Stories abound of
administrators granting tenure to bad teachers so long as they
transfer to another school - who's to blame here? 
&lt;/p&gt;

&lt;p&gt;
Finally, the contract that establishes tenure is jointly negotiated
by the teachers union and the city - no one ever seems to complain
about the city.
&lt;/p&gt;

&lt;p&gt;
Next, let's talk about bonuses and competition. People in the business
world take the false assumption that everyone thinks, acts, and feels like
they do. Here's a surprising fact â€“ teachers aren't in it for the
money. Sure, we'd like to make a little more - perhaps enough to
actually  live in a decent apartment and not need a second job to make
ends meet -  but no one went into teaching to get rich. Teachers are in
it to uplift ALL their students and their school as a whole. 
&lt;/p&gt;

&lt;p&gt;
Now let's look at the model currently in vogue - value added
measures. Besides the fact that they're arbitrary and don't work (see
&lt;a href="http://cestlaz.github.io/posts/2013-09-06-why_i_might_no_longer_be_an_effective_teacher.md/"&gt;this post&lt;/a&gt; and &lt;a href="http://cestlaz.github.io/posts/2013-10-25-effective-teacher-2.md/"&gt;this one&lt;/a&gt;) they're nothing like how people are evaluated
in the real world.
&lt;/p&gt;

&lt;p&gt;
How are people evaluated in regular jobs? As far as I know, they're
evaluated by their managers and bosses - possibly also by their peers.
&lt;/p&gt;

&lt;p&gt;
Funny thing - that's how teachers used to be evaluated before all this
nonsense brought about by the "reformers." Of course, no one will
admit to this. 
&lt;/p&gt;

&lt;p&gt;
Did this system work? For the most part, but not entirely. Why were
there problems? Because, unlike a business, principals are not
necessarily incentivized to have the best teachers. 
&lt;/p&gt;

&lt;p&gt;
Schools and principals are evaluated on ridiculous metrics - the same
standardized tests they use to evaluate teachers. To look at a small
piece â€“ to graduate high school, kids need to pass at least one math
regents and pass three years of math classes. To be "college ready" a
student still only needs to pass one math regents and take at least
one year of geometry or trig.
&lt;/p&gt;

&lt;p&gt;
This means that as far as math is concerned, a principal is
incentivized to have a math department that can get their kids through
the algebra regents. Here's how this frequently plays out. The kids
take algebra over two years and then passes the exam. The kids take
geometry as their third year. They don't have to pass the regents, but
it appears that in order to increase a student's chances of passing
that exam, classes don't teach proof - the most important and hardest
part of the class. Why not? Because it's easier to pass the exam by
learning most of the other stuff.
&lt;/p&gt;

&lt;p&gt;
Here we have a school where the incentive is to hire teachers that can
teach to the algebra regents and that's about it.
&lt;/p&gt;

&lt;p&gt;
That's at a school with a low performing population. In a higher
performing school, the kids will do well on the standardized tests
regardless of teacher quality so there's no incentive to hire the
best. Even if that's what they want to do, there's no way to know if
they're actually doing it.
&lt;/p&gt;

&lt;p&gt;
Back to why teachers need due process. Since principals aren't held
accountable in any reasonable way, teachers can't be. The end result
is that teachers are subject to abuses by principals. I myself was
once brought up on bogus charges raised by a principal (not a Stuy
one) who wanted to make trouble. Without due process, I would be out
of a job. So would many others.
&lt;/p&gt;

&lt;p&gt;
The answer? To me it's figure out how to hold principals
accountable. In Alex's Facebook post he  mentions evaluation by
college and workforce success but that has a slow feedback loop. The
truth is, education does have a slow feedback loop. Schools, however,
exist for along time and principals should have tenure periods of more than
just a couple of years.
&lt;/p&gt;

&lt;p&gt;
My feelings? Why not look at graduates succeeding in college or on the
tax rolls? This wouldn't be perfect but it would be a start. While NY
can't count on private universities sharing accurate information in a
timely manner there should be a way of tracking if a high school
graduate is enrolled in a SUNY or CUNY one, two, three, or four
semesters after graduation. Create a baseline for a school and start
from there. 
&lt;/p&gt;

&lt;p&gt;
If principals were actually accountable in a reasonable
way they'd have incentive to have the best teachers. Then we can get
back to the old system which was indeed the way the "real world"
works.
&lt;/p&gt;</summary>
    <category term="education" label="education"/>
    <category term="policy" label="policy"/>
  </entry>
</feed>
