<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z</title>
  <id>http://cestlaz.github.io/index.atom</id>
  <updated>2016-04-16T20:26:32Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-18.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Testing Nikola</title>
    <id>http://cestlaz.github.io/posts/2016-04-16-testing-nikola/</id>
    <updated>2016-04-16T15:49:34-04:00</updated>
    <published>2016-04-16T15:49:34-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-04-16-testing-nikola/"/>
    <summary type="html">&lt;p&gt;
Just a quick post to test the new Nikola based site.
&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>I hate ruby or why I'm switching blogging platforms</title>
    <id>http://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/</id>
    <updated>2016-04-14T00:00:00</updated>
    <published>2016-04-14T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/"/>
    <summary type="html">&lt;p&gt;
		I think I've got the move worked out but if you're reading this via an
		rss or atom reader, make sure to check back in a couple of days - you
		might have to re-subscribe.
&lt;/p&gt;

&lt;p&gt;
		Why am I switching?
&lt;/p&gt;

&lt;p&gt;
		Because I hate Ruby. 
&lt;/p&gt;

&lt;p&gt;
		Ok, not really - I barely know the language. I was already a  Python
		guy when Ruby came along and I didn't see any real added value to
		switching. 
&lt;/p&gt;

&lt;p&gt;
		This isn't really about Ruby though, it's really about how that which
		we don't know is strange and frightening. In this case, the ruby ecosystem.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LV0wTtiJygY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
		I started using Jekyll because that's what was supported by GitHub
		pages. It's fairly simple and it basically worked. It had a few
		warts, specifically, I've had problems getting org-mode blog posts to
		publish just the way I'd like and it's hard to debug when a post has
		some bad markup in it, but it got the job done. 
&lt;/p&gt;

&lt;p&gt;
		Recently, though, I've had to re-install Jekyll a number of  times and
		for me, that's been a nightmare.
&lt;/p&gt;

&lt;p&gt;
		One is supposed to just be able to &lt;b&gt;&lt;b&gt;sudo gem install jekyll&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
		Ok, so you need some packages installed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
		But I've got ruby 1.9 and I need ruby 2 point something. Ok:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby2.0 ruby2.0-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
		But that fails since we're still running 1.9. Every time I look for a
		solution I go down the ruby ecosystem rabbit hole. 
&lt;/p&gt;

&lt;p&gt;
		All I want is Jekyll!!!!!!
&lt;/p&gt;

&lt;p&gt;
		Why can't I just &lt;b&gt;&lt;b&gt;pip install jekyll&lt;/b&gt;&lt;/b&gt; like I can do with Python
		packages!!!!!
&lt;/p&gt;

&lt;p&gt;
		In truth, there's nothing wrong with the ruby ecosystem, It's just
		something I'm not familiar with. I probably had to go through the same
		battles with Python it's just that I did them incrementally over time.
&lt;/p&gt;

&lt;p&gt;
		The truth is, setting up a development environment should be much
		easier. It used to be that I installed Linux, it had C installed and I
		just had to install &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;make&lt;/a&gt;. Now it's all about tool chains, virtual
		environments, containers, and more.
&lt;/p&gt;

&lt;p&gt;
		I think this is what &lt;a href="https://twitter.com/roybahat"&gt;Roy&lt;/a&gt; was talking about when we traded
		tweets on using development environments in an  &lt;a href="http://cestlaz.github.io/2016/04/12/ide-or-cloud.html#.Vw_nPN9vETt"&gt;Ide or in the cloud&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
		If it's hard for me to get an environment running, imagine some poor
		soul who just went through a "learn to code" web site and now has to
		figure out how to set up his or her own machine!!!!!!
&lt;/p&gt;

&lt;p&gt;
		I don't have a solution but at least it hasn't stopped me and others
		from trying new things.
&lt;/p&gt;

&lt;p&gt;
		Two of my CS blogging friends, &lt;a href="https://gflint.wordpress.com/"&gt;Garth Flint&lt;/a&gt; and &lt;a href="http://blog.acthompson.net/"&gt;Alfred Thompson&lt;/a&gt; have in
		their own ways talked about this same issue. Garth, showing a bias
		towards VB yet still working to get his head around Python. Alfred
		shows the same disdain for Linux and the command line as I show
		towards Windows. All this leads to valuable learning experiences and
		discussions.
&lt;/p&gt;

&lt;p&gt;
		Personally, I'm also going through this battle as I continue to
		explore Clojure.
&lt;/p&gt;

&lt;p&gt;
		So, I'm going to finish the changeover to Nikola in the next day or
		two. Remember to check back in case the feeds aren't working.
&lt;/p&gt;

&lt;p&gt;
		Once I make the change, I'll talk about Jekyll vs Nikola as actual
		blogging platforms.
&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>IDE or the Cloud</title>
    <id>http://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</id>
    <updated>2016-04-12T00:00:00</updated>
    <published>2016-04-12T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
This weekend, I had a conversation on Twitter with my friend &lt;a href="https://twitter.com/roybahat"&gt;Roy Bahat&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/zamansky"&gt;@zamansky&lt;/a&gt; Mike, unrelated, what do you think of &lt;a href="https://t.co/BT1ublbajF"&gt;https://t.co/BT1ublbajF&lt;/a&gt; ?&lt;/p&gt;— Roy Bahat (@roybahat) &lt;a href="https://twitter.com/roybahat/status/718835740738650112"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/roybahat"&gt;@roybahat&lt;/a&gt;Maybe I'll blog about my thoughts about online environments vs local installs&lt;/p&gt;— Mike Zamansky (@zamansky) 
&lt;a href="https://twitter.com/zamansky/status/718837282334240768"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/roybahat"&gt;@roybahat&lt;/a&gt; Agree with this but there are many issues. I'll try to write more later. Now going to see my son in &lt;a href="https://twitter.com/umgass"&gt;@umgass&lt;/a&gt; prod of Pinafore.&lt;/p&gt;— Mike Zamansky (@zamansky) &lt;a href="https://twitter.com/zamansky/status/718838508689993728"&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
Another friend had just asked me about IDEs vs local installs for learning enviromnents the day before.
&lt;/p&gt;

&lt;p&gt;
So, should we use cloud based IDEs when teaching CS or should we use
local installs.
&lt;/p&gt;

&lt;p&gt;
There isn't a single right answer but I thought I'd share some of my thoughts here.
&lt;/p&gt;

&lt;p&gt;
I'm hoping this is helpful to both those of us in the trenches as well
as maybe some platform developers out there.
&lt;/p&gt;

&lt;p&gt;
Some times, you don't have a choice.
&lt;/p&gt;

&lt;p&gt;
On the web based side, does your school have the bandwidth. We're not
only talking about the pipe to the outside world but also &lt;a href="http://www.nytimes.com/2016/01/14/nyregion/bronx-science-bans-cellphones-from-wi-fi-as-students-devour-it.html?_r=0"&gt;wifi within
the school&lt;/a&gt;.  If kids can't reliably get to the web based environment,
it's not a viable option. On the other hand, cloud based software will
always be up to date and properly configured and kids can use them
from home or pretty much anywhere they have a connection.
&lt;/p&gt;

&lt;p&gt;
On the other side we have local installs. This can also present
problems. Is the teacher allowed to install locally? Does he or she
know how to do it? Who's going keep all the machines up to date and configured? 
&lt;/p&gt;

&lt;p&gt;
Assuming we can get past the technical issues we can start looking at
the education side of thing.
&lt;/p&gt;

&lt;p&gt;
On the web based side, you've got a silo. This can be both good and
bad. In an intro class, using a tool like &lt;a href="http://codesters.com"&gt;Codesters&lt;/a&gt; can keep the cost
of entry low, allow students to share work online and allow teachers
to make use of their curricular materials. If you can't tell, I'm a
big fan of Codesters and the Codesters team. The limitation is that
you have to use their simplified interface and toolset.
&lt;/p&gt;

&lt;p&gt;
Some web based IDEs like &lt;a href="http://koding.com"&gt;Koding&lt;/a&gt; offer more flexibility - one tool with
many languages as well as deployment. The cost is complexity. With
Koding, you're basically running a virtual machine in the
cloud. You've got their web based IDE and a terminal shell so it's not
as complex as doign everything from scratch locally but it's not as
structured as Codesters and is more of a general purpose site rather
than one focussed soley on learning.
&lt;/p&gt;

&lt;p&gt;
Then you have &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;. This looks to be a great platform for
experienced programmers to play with and explore new languages but I'd
be concerned about using it with beginners. It looks like they're
rolling out some teacher tools so this might be worth revisiting soon.
&lt;/p&gt;

&lt;p&gt;
In any case and with other web based products, you're living in the
providers silo. 
&lt;/p&gt;

&lt;p&gt;
Personally, I'm a command line wonk and confessed Emacs geek so I'm
generally wary of an online environment without an exit strategy to
real world tools. Eventually, if all development moves into the
browser as platform then this problem goes away, but for now, you're
not going to have the expressive power and flexibility that a local
install gives.
&lt;/p&gt;

&lt;p&gt;
Local installs let you use more powerful and flexible tools either
alone or in combination.
&lt;/p&gt;

&lt;p&gt;
Keeping kids out of silos also makes it easier for them to learn new
tools, languages, and techniques.
&lt;/p&gt;

&lt;p&gt;
Since I like generic tools, I'm not a fan of big professional IDEs
like Eclipse. I'm an Emacs geek but Atom, Sublime Text, and Vim are
all good as well.
&lt;/p&gt;

&lt;p&gt;
There are also an assortment of beginner IDEs like Dr. Racket and I'm
a fan with these for beginners as long as there's an exit strategy.
&lt;/p&gt;

&lt;p&gt;
For completeness, I should mention that if I weren't an old school
Emacs guy, I might check out something like JetBrain's IDEs. They're
much lighter weight than something like Eclipse but still full
featured. Somewhere between a true general purpose, customizable,
programmable editor and an all encompassing IDE.
&lt;/p&gt;


&lt;p&gt;
In general, I use online enviromnents with my classes early on when:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;They're pretty much identical or equivalent to the installed version.&lt;/li&gt;
&lt;li&gt;They provide some value added (&lt;a href="http://codingbat.com"&gt;codingbat&lt;/a&gt; for example) so they're not
being used as a development environment but for some other purpose.&lt;/li&gt;
&lt;li&gt;They help with student collaboration (such as cloud9 or Koding.com
for more advanced kids).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In any case, it's imporant that our kids aren't locked into any IDE be
it web based or local.
&lt;/p&gt;

&lt;p&gt;
Our kids that go on to more advanced CS studies will certainly need to
break out of sheltered world of a learning IDE and we're not doing
them a service if we shelter them too long. 
&lt;/p&gt;

&lt;p&gt;
Our other kids also benefit from seeing beyond these restrictive
environments. A student might learn to code in Python in one of our
classes, but if we do our jobs right, that student might be writing a
little Javascript to automate Google Docs.
&lt;/p&gt;

&lt;p&gt;
I can't tell you how many people I've seen go through online coding
courses in a web based enviromnent only to be unable to do anything
outside of that enviromnent.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, we want our kids to be empowered to grow on
their own. All of the things I've talked about here are merely
tools. Each has it's place. It's up to the teacher to make the roadmap
and to lead the student down the path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Hunter College - Honors CS</title>
    <id>http://cestlaz.github.io/posts/2016-03-29-hunter-cs.html/</id>
    <updated>2016-03-29T00:00:00</updated>
    <published>2016-03-29T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-03-29-hunter-cs.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
It's been a while since my last post and a while since I started at
Hunter.
&lt;/p&gt;

&lt;p&gt;
Time to share a bit about what I've been up to.
&lt;/p&gt;

&lt;p&gt;
One of the better kept secrets in New York City is Hunter College's
computer science program. It's been around for years and it's been
that way for years. In fact, when I was looking to get my masters
degree back in the mid nineties I carefully researched all of the
area's MS in CS programs. It came down to Hunter College and Courant
Institute at NYU. I was going to go with Hunter since the programs
seemed comparable and Hunter was far more affordable but I had to go
with NYU due to class schedules. Too many of the Hunter offerings were
to early in the day and I had my full time teaching job to consider.
&lt;/p&gt;

&lt;p&gt;
Hunter isn't currently offering their Masters program but their
Bachelor of Arts program is alive and well, it's just that people
don't know about it.
&lt;/p&gt;

&lt;p&gt;
Part of my job is to change that.
&lt;/p&gt;

&lt;p&gt;
Well, not really, part of my job is to add my piece to the puzzle. The
rest will take care of itself.
&lt;/p&gt;

&lt;p&gt;
My piece? It's all about creating a tech culture, tying into the NY
Tech ecosystem, and filling in the gaps that are shared by just about
every college computer science program.
&lt;/p&gt;

&lt;p&gt;
How do we do it? 
&lt;/p&gt;

&lt;p&gt;
The long term plan is that we're starting a new CS Honors program. In
the fall, I'll be teaching and mentoring a group of entering
undergrads. We'll have workshops, trips, activities. You name it. I'll
also be teaching them modified versions of our courses with the hope
of bringing some of my modifications back to the rest of the student
body. Things like integrating real tools and professional techniques
into what is already a solid academic program.
&lt;/p&gt;

&lt;p&gt;
In the mean time, I'm getting to know Hunter's current CS students and
working to energize the existing community. 
&lt;/p&gt;

&lt;p&gt;
We already had an amazing event hosted at &lt;a href="http://yext.com"&gt;Yext&lt;/a&gt;. We had a panel and
mixer with representatives from about a dozen companies talking to the
kids about the possibilities ahead of them.
&lt;/p&gt;

&lt;p&gt;
We've also set up a couple of workshops in house.
&lt;/p&gt;

&lt;p&gt;
I'm also starting to talk to friends at companies across the city to
plan out both curriculum and programs to set up our kids to
succeed. 
&lt;/p&gt;

&lt;p&gt;
My goal is that within five years, I want people to realize that
Hunter CS is the place to be for CS Education in NYC. Not everyone can
afford the 40K and up private college tuition and there's no reason to
when you can get a great CS education with ties to the tech community
at CUNY prices.
&lt;/p&gt;

&lt;p&gt;
If you want to help, drop me a note. We're looking to start something
very special and you have a chance to be a part of it.
&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DevOps, or You don't know what the F you're doing!</title>
    <id>http://cestlaz.github.io/posts/2016-01-31-devops.html/</id>
    <updated>2016-01-31T00:00:00</updated>
    <published>2016-01-31T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-01-31-devops.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Having just concluded almost a quarter century at one job in one
place, I've been reflecting on a number of things.
&lt;/p&gt;

&lt;p&gt;
What I accomplished, what I've failed to accomplish, highlights,
low lights and everything in between.
&lt;/p&gt;

&lt;p&gt;
I've also learned a lot over these twenty five years.
&lt;/p&gt;

&lt;p&gt;
One thing I learned is DevOps and System Administration. 
&lt;/p&gt;

&lt;p&gt;
Back around 1993 or 1994 Stuy wasn't really on the internet. Yes, we
were able to scam stuy.edu even though we were a high school and yes
we did have a class B address block but no one really had access.
&lt;/p&gt;

&lt;p&gt;
Somehow, Bruce, a student of mine at the time and I ended up with the
job of getting Stuy onto the internet. Bruce was one of our superstar
kids and people thought I had extensive experience setting up and
running networks. Truth be told I messed around a bit but there's no
way I would have hired myself for the job.
&lt;/p&gt;

&lt;p&gt;
Nonetheless, we were off. 
&lt;/p&gt;

&lt;p&gt;
We were able to take one of the RS/6000 AIX workstations that were
supposed to be used as CAD stations and repurposed it as a server. We
made email accounts for everyone and were off.
&lt;/p&gt;

&lt;p&gt;
Neither Bruce nor I really knew what we were doing but we figured
things out. I learned a lot from him and I'd like to think he also got
some benefit out of working with me. Fortunately, we seemed to have a
knack for &lt;a href="http://www.amazon.com/Linux-System-Administration-Handbook-Edition/dp/0131480057/ref=pd_sim_14_2?ie=UTF8&amp;amp;dpID=61%2B57ajucML&amp;amp;dpSrc=sims&amp;amp;preST=_AC_UL160_SR117%2C160_&amp;amp;refRID=164V89GZMZM2X9M2S8AH"&gt;finding the answers&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
Of course, we had our moments. Once, we got a critical patch
announcement from IBM. It said that if we needed the patch and didn't
apply it were were in big trouble but if our machine didn't need it,
applying the patch would kill our system. It was unclear whether we
needed the patch or not.
&lt;/p&gt;

&lt;p&gt;
After about a half hour research, we determined that we didn't need
the patch.
&lt;/p&gt;

&lt;p&gt;
But applied it anyway :-(.
&lt;/p&gt;

&lt;p&gt;
D'Oh.
&lt;/p&gt;

&lt;p&gt;
After a brief set of panic attacks and a bunch of fumbling around, we
did manage to restore things.
&lt;/p&gt;

&lt;p&gt;
So, Bruce and I ran the system for a year or so and as I said, I
learned a lot. Now, Bruce was close to graduating so I was starting to
worry that I'd have to figure this all out myself soon. That was a
seriously frightening thought. 
&lt;/p&gt;

&lt;p&gt;
I figured it would be good to bring in a couple of new super smart
students. As it turns out, Jon was one of them. 
&lt;/p&gt;

&lt;p&gt;
At one point, there was some problem and Bruce and I were going to
head to the office to try to figure it out. Jon asked if he could come
and watch. I thought that was a great idea so I agreed.
&lt;/p&gt;

&lt;p&gt;
We all went to the office and Bruce and I went to work. After about
fifteen minutes, Jon blurted out:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
"I just figured how you guys do it!!!"
&lt;/p&gt;

&lt;p&gt;
"You guys have no idea what the F you're doing!!!!!"
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
We all cracked up.
&lt;/p&gt;

&lt;p&gt;
He was absolutely right. We had no clue. We didn't know what we were
doing but we had become pretty good at figuring things out.
&lt;/p&gt;

&lt;p&gt;
Truth be told, that really is the norm. If you already knew how to
solve the problem, well, then it really wouldn't have been a problem
to begin with.
&lt;/p&gt;

&lt;p&gt;
So, you learn to figure it out. It's something I learned not to be
afraid of a long time ago. I hope that it's something I've been able
to convey to my students.
&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Debugging deployment</title>
    <id>http://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</id>
    <updated>2016-01-23T00:00:00</updated>
    <published>2016-01-23T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
SoftDev students are hard at work on their final projects. By now,
they all have fairly complex code bases. This limits how much I can
help them with debugging.
&lt;/p&gt;

&lt;p&gt;
There are some problems, though, that they have to contend with that
even with experience, are hard to spot. Notably because the very
tools you use to debug these errors are part of the problem.
&lt;/p&gt;

&lt;p&gt;
Last week, this happened twice. Both cases were brought to me by
really strong students which just goes to underscore how insidious
these problems can be.
&lt;/p&gt;


&lt;p&gt;
Here's a fake code snippet of a &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; application that illustrates
both problems.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;from flask import Flask, render_template
&lt;span class="linenr"&gt; 2: &lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;app = Flask(__name__)
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;@app.route("/")
&lt;span class="linenr"&gt; 6: &lt;/span&gt;def index():
&lt;span class="linenr"&gt; 7: &lt;/span&gt;    return "hello"
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;@app.route('/test/&amp;lt;some_data&amp;gt;')
&lt;span class="linenr"&gt;10: &lt;/span&gt;def test():
&lt;span class="linenr"&gt;11: &lt;/span&gt;    picture_url = build_url(some_data)
&lt;span class="linenr"&gt;12: &lt;/span&gt;    result = api_test(picture_url)
&lt;span class="linenr"&gt;13: &lt;/span&gt;    do_something(result)
&lt;span class="linenr"&gt;14: &lt;/span&gt;
&lt;span class="linenr"&gt;15: &lt;/span&gt;if __name__ == "__main__":
&lt;span class="linenr"&gt;16: &lt;/span&gt;   app.debug = True
&lt;span class="linenr"&gt;17: &lt;/span&gt;   app.secret_key = "some secret key"
&lt;span class="linenr"&gt;18: &lt;/span&gt;   app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
First, the "easy" one. The student was trying to deploy the
application. We use &lt;a href="http://gunicorn.org/"&gt;Green Unicorn&lt;/a&gt; to deploy our applications,
ultimately on &lt;a href="http://digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; servers in the cloud. 
&lt;/p&gt;

&lt;p&gt;
The student was using the correct command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-shell"&gt;gunicorn -W 4 -b 0.0.0.0:8000 app:app
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
but it wasn't working. It ran, but whenever he went to the site, it
came back with an error.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
He had to change:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;if __name__ == "__main__":
   app.debug = True
   app.secret_key = "some secret key"
   app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;app.secret_key = "some secret key"
if __name__ == "__main__":
    app.debug = True
    app.run(host="0.0.0.0", port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Normally, when developing and testing our applications, we use the
test server that's bundled with Flask. The line that reads
"app.run…" takes care of this.
&lt;/p&gt;

&lt;p&gt;
When running the application as a "main program" - "python app.py" the
if statement is true and it runs the indented lines, setting the
secret key which is required for session management.
&lt;/p&gt;

&lt;p&gt;
When running under &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt;, the &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt; server loads the
application as a module and then runs it. In this case name isn't main
so it never sets secret key and so we have a problem.
&lt;/p&gt;

&lt;p&gt;
Pretty subtle and even though we did cover this in class, it comes up
pretty rarely so it's not an easy catch.
&lt;/p&gt;

&lt;p&gt;
Then there was this problem.
&lt;/p&gt;

&lt;p&gt;
The setup for this one's a little more complicated. The group was
using a facial recognition api. You provide the API with the url to an
image, it fetches it and does recognition.
&lt;/p&gt;

&lt;p&gt;
It's also important to note that when Flask is running, it will serve
files from a static directory, so, if I'm running my flask server on
myhost, port 800 and you stored an image named picture.jpg in the
static directory, going to:
&lt;/p&gt;

&lt;verbatim&gt;
 http://myhost:8000/static/picture.jpg
&lt;/verbatim&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
would get that image.
&lt;/p&gt;

&lt;p&gt;
The group did things right. They ran the Flask test server to serve
the static files and then wrote a small python program to test the
api:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;picture_url = build_url(some_data)
result = api_test(picture_url)
do_something(result)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Everything worked fine. 
&lt;/p&gt;

&lt;p&gt;
But, when they put this code in as a route in their web app (as in the
top code fragment), it froze. 
&lt;/p&gt;

&lt;p&gt;
They couldn't figure it out.
&lt;/p&gt;

&lt;p&gt;
The code worked as a "stand alone" but not in the web app.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
Once again, the built in Flask development server.
&lt;/p&gt;

&lt;p&gt;
The development server runs in a single thread / process. This means
it can only do one thing at a time. When they ran their test as a
separate program, the api they used made a request to their app to
serve up the static picture file and it worked.
&lt;/p&gt;

&lt;p&gt;
When they ran from the Flask application itself, their app made a call
to the web api (line 12) and then blocked while waiting for the
response. The web api tried to request the image from the Flask app
but it was blocked – &lt;b&gt;&lt;b&gt;deadlock&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Again, the solution was to run the web app using a server that could
handle multiple requests - gunicorn.
&lt;/p&gt;

&lt;p&gt;
Once again, that solved the problem.
&lt;/p&gt;

&lt;p&gt;
Both of these problems were fairly subtle and very hard to catch -
even with experience. I remember the hours I lost when I was learning
this stuff.
&lt;/p&gt;

&lt;p&gt;
Some times kids get caught up in algorithms or poor code design but
sometimes, it's just the tools.
&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cellular Automata for Pathfinding in NetLogo</title>
    <id>http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/</id>
    <updated>2016-01-17T00:00:00</updated>
    <published>2016-01-17T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/"/>
    <summary type="html">&lt;link href="//cdn.rawgit.com/noelboss/featherlight/1.3.5/release/featherlight.min.css" type="text/css" rel="stylesheet"&gt;
&lt;script src="//cdn.rawgit.com/noelboss/featherlight/1.3.5/release/featherlight.min.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;style&gt;
div.center {text-align:center;}
.smaller {height:200px;width:200px}

.center {text-align:center;}
.frame {width:600px;height:800px;}

&lt;/style&gt;


&lt;div class="center"&gt;
&lt;a class="center" href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-start.png"&gt;
&lt;img src="http://cestlaz.github.io/img/maze-ca/maze-start.png"&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline1"&gt;
&lt;p&gt;
&lt;a href="http://cestlaz.github.io/2016/01/15/shift-image.html#.Vpvy4x8SrmE"&gt;Last time&lt;/a&gt; we took a look at implementing a Cellular Automaton in
NetLogo to do some simple image manipulation. We just scratched the
surface. In class, the kids write pretty nice Photoshop Light
applications. 
&lt;/p&gt;

&lt;p&gt;
Today we'll look at some more ambitious problem solving - using a
Cellular Automaton to find a path through a maze. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline2" class="outline-2"&gt;
&lt;h2 id="orgheadline2"&gt;Part 1 - finding possible paths&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline2"&gt;
&lt;p&gt;
We'll use the image above as an example and a live model with all the
code is at the end of this post.
&lt;/p&gt;

&lt;p&gt;
Each square of the maze is a
NetLogo patch. White square represent possible paths, Red is our
entrance, green our exit. As we explore the maze, we'll color the
cells yellow.
&lt;/p&gt;

&lt;p&gt;
Remember, in  a Cellular Automaton (CA), each cell makes a decision as to
it's next state based on information about its neighbors (up, down,
left, and right only in this case).
&lt;/p&gt;

&lt;p&gt;
So, if every cell is looking around at it's neighbors, most cells
don't have enough information. The only white cell that might be on
the path from entrance to exit is the one next to the entrance - it
might be on the path.
&lt;/p&gt;

&lt;p&gt;
This leads us to the first step of our CA rule set:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-netlogo"&gt;; if I have a green neighbor, I might be on the path, turn yellow
ask patches with [pcolor = white] [
  if any? neighbors with [pcolor = red] [
   set pcolor yellow
  ] 
]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(click images to enlarge)
&lt;/p&gt;

&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-1.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-1.png"&gt;
&lt;/a&gt;

&lt;p&gt;
Next time through, we notice that a cell might be on the path if it's
white and it has either red or yellow neighbors.
&lt;/p&gt;


&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-2.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-2.png"&gt;
&lt;/a&gt;
&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-3.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-3.png"&gt;
&lt;/a&gt;

&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-4.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-4.png"&gt;
&lt;/a&gt;

&lt;p&gt;
Eventually, we end up with a yellow abutting green - the exit.
&lt;/p&gt;

&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-found.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-found.png"&gt;
&lt;/a&gt;

&lt;p&gt;
Notice that each yellow cell is also numbered. The number indicates
how many steps it took to get there from the entrance. The
implementation is trivial:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Start by giving each patch a variable &lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; and starting it at 0.&lt;/li&gt;
&lt;li&gt;When a cell is about to turn yellow, it should look at it's yellow
or red neighbors, ask for their &lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; value (they'll all be the
same - think about why), and set it's &lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; value to one more
than that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We'll use these step numbers to recover the actual shortest path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline3" class="outline-2"&gt;
&lt;h2 id="orgheadline3"&gt;Part 2 - recovering the shortest path.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgheadline3"&gt;
&lt;p&gt;
We can now use the yellow patches with the step numbers to find our
way back. 
&lt;/p&gt;

&lt;p&gt;
We're going to build a solution set.
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;start with an empty solution set.&lt;/li&gt;
&lt;li&gt;take the only green cell not in the solution set (let's call it &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt;).&lt;/li&gt;
&lt;li&gt;Ask &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt;'s yellow neighbor with lowest step number to turn
itself green (that cell will be &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt; next time around).&lt;/li&gt;
&lt;li&gt;Place &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt; into the solution set (leaving the new green cell as
the only green cell not in the solution set).&lt;/li&gt;
&lt;li&gt;Repeat 2 - 5 until we're back at the entrance.&lt;/li&gt;
&lt;/ol&gt;



&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-back-1.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-back-1.png"&gt;
&lt;/a&gt;
&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-back-2.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-back-2.png"&gt;
&lt;/a&gt;
&lt;a href="http://cestlaz.github.io/posts/2016-01-17-maze-ca.html/" data-featherlight="/img/maze-ca/maze-solved.png"&gt;
&lt;img class="smaller" src="http://cestlaz.github.io/img/maze-ca/maze-solved.png"&gt;
&lt;/a&gt;

&lt;p&gt;
This is one of my favorite intro topics. It's using a CA - something
normally just presented as a toy idea, to solve a real problem. It
reinforces parallel processing and foreshadows all sorts of pathfinding
ideas to come.
&lt;/p&gt;

&lt;p&gt;
Below is the complete NetLogo program. You can look at the code by
clicking on the code tab at the bottom.
&lt;/p&gt;

&lt;p&gt;
To run:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;setup&lt;/b&gt;&lt;/b&gt; sets up all the variables and clears the world.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;buildmaze&lt;/b&gt;&lt;/b&gt; builds a random maze.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;solve&lt;/b&gt;&lt;/b&gt; is a toggle to run through an entire solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; single steps through the CA.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;reset&lt;/b&gt;&lt;/b&gt; Resets all the variables and recolors the maze to
unsolved.&lt;/li&gt;
&lt;li&gt;The other buttons are toggles for drawing your own maze.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="center frame"&gt;
&lt;iframe class="center frame" src="http://cestlaz.github.io/img/maze-ca/maze.html"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Cellular Automata, NetLogo and real problems</title>
    <id>http://cestlaz.github.io/posts/2016-01-15-shift-image.html/</id>
    <updated>2016-01-15T00:00:00</updated>
    <published>2016-01-15T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-01-15-shift-image.html/"/>
    <summary type="html">&lt;style&gt;
.center {text-align:center;}
.frame {width:640px;height:800px;}
&lt;/style&gt;


&lt;p&gt;
We've been using &lt;a href="https://ccl.northwestern.edu/netlogo/"&gt;NetLogo&lt;/a&gt; in our intro course for years. It's a
wonderful programming environment. Many of you recall the &lt;a href="https://en.wikipedia.org/wiki/Logo_(programming_language)"&gt;Logo&lt;/a&gt;
programming language. NetLogo is like Logo but instead of programming
a turtle, you write a program that's run by multiple, perhaps hundreds
of turtles and also by the world the turtles live on. 
&lt;/p&gt;

&lt;p&gt;
Some of the reasons we like it are that it's:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;An easy accessible textual programming language&lt;/li&gt;
&lt;li&gt;Makes building a graphical interface trivial&lt;/li&gt;
&lt;li&gt;great for modeling&lt;/li&gt;
&lt;li&gt;Comes with tons of demo models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And now, with the latest version, NetLogo programs/models can be
deployed as web sites. All you have to do is save your program as
"NetLogo Web" and put it up on a observer somewhere.
&lt;/p&gt;

&lt;p&gt;
If you haven't you should download and install NetLogo, run it, then
go to the file menu and look at the built in models.
&lt;/p&gt;

&lt;p&gt;
I also enjoy playing with &lt;a href="https://en.wikipedia.org/wiki/Cellular_automaton"&gt;Cellular Automata&lt;/a&gt; and NetLogo's a wonderful
platform to play with. The turtles live on a grid of patches and just
like the turtles, the patches will all run your program over and over.
&lt;/p&gt;

&lt;p&gt;
The patches make perfect cells for a cellular automaton and you can
implement a rule set in your patches. 
&lt;/p&gt;

&lt;p&gt;
NetLogo even comes with a bunch of built in demo models for Cellular
Automata including &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway's Game of Life&lt;/a&gt;, probably the most famous CA.
&lt;/p&gt;

&lt;p&gt;
On the other hand, Conway's Game of Life is somewhat cliche and while
I find it fascinating, it doesn't really solve a practical problem, at
least on on the surface.
&lt;/p&gt;

&lt;p&gt;
So, I was looking for something more practical to do and something
where we could explore some deeper CS concepts. 
&lt;/p&gt;

&lt;p&gt;
Image manipulation.
&lt;/p&gt;

&lt;p&gt;
In class, we make a Cellular Automaton where each cell or patch is a
pixel in an image. In NetLogo, you can do this with the
"import-pcolors" command. Lower down, I have a demo that just manually
colors patches - the web version of NetLogo doesn't yet support that
command.
&lt;/p&gt;

&lt;p&gt;
Task 1 - what if we want to shift the image over? The kids come up
with a solution pretty quickly: "We can just have each patch ask its
neighbor for its color." Here's the code they try:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-netlogo"&gt;; ask each patch to set its color to the color of the
; patch at relative location -1,0
to shift-naive
  ask patches [ set pcolor [pcolor] of patch-at -1 0]
end
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
To see what happens, scroll down to the NetLogo model below, click on
setup and then hit the &lt;b&gt;&lt;b&gt;shift-naive&lt;/b&gt;&lt;/b&gt; button a few times.
&lt;/p&gt;

&lt;p&gt;
It doesn't work. 
&lt;/p&gt;

&lt;p&gt;
What's going on?
&lt;/p&gt;

&lt;p&gt;
It's a synchronization issue.
&lt;/p&gt;

&lt;p&gt;
Suppose we have the following three cells in a row:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/shift-image/image1.png" alt="image1.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
If cell 3 asks cell 2 it's color before cell 2 asks cell 1's color, we
get the desired result:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/shift-image/image2.png" alt="image2.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
But if cell 2 asks cell 1 for it's color first then cell 3 will
actually get cell 1's color:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/shift-image/image3.png" alt="image3.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
So now we have the students thinking about synchronization and
parallel processing and they don't even know it.
&lt;/p&gt;

&lt;p&gt;
The solution's pretty easy, break the problem up into two steps.
&lt;/p&gt;

&lt;p&gt;
First, have every patch ask its neighbor for its color and then once
everyone knows their neighbor's color, then change:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-html"&gt;patches-own [next-color]

to shift-correct
  ; figure out my next color
  ask patches [ set next-color [pcolor] of patch-at -1 0 ]
  ; then switch to it
  ask patches [ set pcolor next-color]
end
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can run that by clicking &lt;b&gt;&lt;b&gt;setup&lt;/b&gt;&lt;/b&gt; again and then &lt;b&gt;&lt;b&gt;shift-correct&lt;/b&gt;&lt;/b&gt; a
few times.
&lt;/p&gt;

&lt;p&gt;
There's some of the beauty of NetLogo - we can get kids to think about
some deep concepts while playing with an easy to use, fun, interactive
environment with a real textual programming language.
&lt;/p&gt;

&lt;p&gt;
Stay tuned for part 2 when I'll talk about creating a cellular
automaton that can solve a maze.
&lt;/p&gt;

&lt;div class="center frame"&gt;
&lt;iframe class="center frame" src="http://cestlaz.github.io/img/shift-image/shift-image.html"&gt;&lt;/iframe&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>International Blog Delurking Week 2016</title>
    <id>http://cestlaz.github.io/posts/2016-01-06-delurking-week.html/</id>
    <updated>2016-01-06T00:00:00</updated>
    <published>2016-01-06T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-01-06-delurking-week.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;



&lt;p&gt;
It's been pointed out by a couple of bloggers I follow:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://gasstationwithoutpumps.wordpress.com/"&gt;Gas station without pumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.acthompson.net/"&gt;Computer Science Teacher (Alfred Thompson's blog)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That it's International Blog Delurking Week.
&lt;/p&gt;

&lt;p&gt;
So, I know I don't have a large readership, but if you do read this
 blog, why not give a brief hi in the comments.  I'd love to know who you are and what you do.
&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Discussion Silos</title>
    <id>http://cestlaz.github.io/posts/2016-01-03-discussion-silos.html/</id>
    <updated>2016-01-03T00:00:00</updated>
    <published>2016-01-03T00:00:00-05:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/2016-01-03-discussion-silos.html/"/>
    <summary type="html">&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
In response to the past couple of days where my friends and fellow CS
Ed advocates Alfred Thompson, Rob Underwood, and I had a nice little
discussion via our blogs, Alfred wrote &lt;a href="http://blog.acthompson.net/2016/01/when-blogging-works-for-educators.html"&gt;this&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It's great when a number of voices in the community have an open
discussion but one of the things I found myself lamenting was the fact
that a lot of the discussion isn't truly accessible.
&lt;/p&gt;

&lt;p&gt;
Why not? 
&lt;/p&gt;

&lt;p&gt;
The silo known as Facebook.
&lt;/p&gt;

&lt;p&gt;
I have no problem with Facebook - I like it and use it daily - it's a great way to
keep in touch with former students turned friends. The problem is that
much like Las Vegas, discussions that happen on Facebook stay on
Facebook.
&lt;/p&gt;

&lt;p&gt;
Recently I've seen a number of blog posts, some mine, some Alfred's,
some others where the post garnered nary a comment. Head over to
Facebook  and if you're friends with the right people, you might find
a lively, informative discussion. 
&lt;/p&gt;

&lt;p&gt;
In one case in particular, one post had independent, overlapping
discussions in at least three Facebook threads.
&lt;/p&gt;

&lt;p&gt;
How much richer would the discussion have been  in a public forum
plus it would be left open for people to discover in the future.
&lt;/p&gt;

&lt;p&gt;
Personally, I use &lt;a href="http://disqus.com/"&gt;Disqus&lt;/a&gt;. I like it since I can also follow people on
it and I can just embed the code in any page but others like what
Wordpress or Blogger uses for comment threads. In any event, it keeps
the conversation open.
&lt;/p&gt;

&lt;p&gt;
Is this really a problem? Maybe not but I do wish people would look
beyond Facebook for discussions.
&lt;/p&gt;

&lt;p&gt;
It's something I've been trying to get my students to do for
years. I've used a number of tools for class communication:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;mail lists&lt;/li&gt;
&lt;li&gt;Piazza&lt;/li&gt;
&lt;li&gt;custom forum software like vanilla&lt;/li&gt;
&lt;li&gt;slack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and haven't found anything that really does the job quite right. I'm
still looking.
&lt;/p&gt;

&lt;p&gt;
The kids use these but invariably end up also setting up a Facebook
group for my class and their other classes. I encourage this - they
certainly should have a forum that I can't see. How else can they plan
that surprise party for me :-). In all seriousness though, ideally
they should have a forum free of teachers but they should use the one
with the teacher as much as possible.
&lt;/p&gt;

&lt;p&gt;
The real problem with the kids setting up Facebook groups every year
is that there's no institutional memory. I see the kids, year after
year, have to clear the same hurdles. If they started thinking outside
of the silo of their Facebook communities and just had an ongoing
community for each class - one that passed on from year to year, it
would be of tremendous value for them.
&lt;/p&gt;

&lt;p&gt;
So, I'd like to encourage everyone out there to get our discussions
out into public forums. It would be terrific if more of us would blog
or blog more often and also to take the time to add to the dialog in a
public place.
&lt;/p&gt;</summary>
  </entry>
</feed>
