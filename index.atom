<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z</title>
  <id>http://cestlaz.github.io/index.atom</id>
  <updated>2016-06-29T21:01:33Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-21.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>On Teaching,  Mentors, and Role Models</title>
    <id>http://cestlaz.github.io/posts/mentors/</id>
    <updated>2016-06-29T16:03:34-04:00</updated>
    <published>2016-06-29T16:03:34-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/mentors/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Yesterday over at &lt;a href="http://avc.com"&gt;AVC&lt;/a&gt; Fred blogged about the AFSE graduation and
posted a &lt;a href="http://avc.com/2016/06/afse-commencement-speech/"&gt;transcript of the speech he gave&lt;/a&gt;. It's well worth a read.
&lt;/p&gt;

&lt;p&gt;
Some of the comments touched on mentors and role models so I though
I'd talk a little about that here.
&lt;/p&gt;

&lt;p&gt;
I've always believed that as a parent, modeling - that is, how we
behave is one of the largest shapers of our kids. It's one thing to
take your kid to a museum because that's what you should do as a good
parent and another if you think - "I wants to go to that museum and
damn it, I'm taking you along." I'm no psychologist but my gut tells
me the former is good but the latter is better. 
&lt;/p&gt;

&lt;p&gt;
This of course extends to schools. As teachers we deliver instruction
but we also communicate through how we behave. Students are very
perceptive and we can have influences that we don't even know. I
remember a parent who thanked me because their child started
exercising and being more active because of me. It's not something I
ever talked to the kid about but I would run after my classes at Stuy,
ride to school and in class I might give an exercise anecdote or
two. Just by doing something healthy and positive where kids can see
it led to some good.
&lt;/p&gt;

&lt;p&gt;
Now, as teachers, we have limited reach and just as in many cases
where a child won't listen to a parent and needs a friendly teacher to
weigh in, there are plenty of times a student won't really listen to a
teacher, particularly in CS. Most CS teachers don't have extensive CS
backgrounds and self taught kids frequently feel they know more. Even
when a student believes that a CS teacher's got the goods, they're
skeptical - teaching as a profession has been so beaten up many
students will have a ""so why are you teaching and not working at
Google" attitude.
&lt;/p&gt;

&lt;p&gt;
Even with the best intentions from parents and teachers, for many students,
particularly those from poor backgrounds there are limits to our
influence. If a parent has to work multiple jobs at crazy hours, they
have less time to be a positive role model. If they've never been to
college or worked in a white collar profession they won't have the
connections and resources to effectively guide their child through the
education to profession maze.
&lt;/p&gt;

&lt;p&gt;
This is where mentors and role models become so important.
&lt;/p&gt;

&lt;p&gt;
For me, I first saw this when I was a young teacher. My graduates
hadn't gotten to the real world yet and I hadn't developed a
reputation. I'd have friends come in to give tech and industry
talks. What I found was that in addition to being inspirational, it
help authenticate me as being legit. When they would talk about a best
practice that I had already taught them, the classes got the idea that
maybe I did know a thing or two about this CS stuff.
&lt;/p&gt;

&lt;p&gt;
You could see the impact when we held &lt;a href="http://cestlaz.github.io/posts/2012-03-31-checking-in-with-family.html/#.V3Qkkx9vGAk"&gt;"Tech speed dating" events&lt;/a&gt; where
I mixed current high school students with professionals.
&lt;/p&gt;

&lt;p&gt;
So many comments afterwards like "I didn' know I could do that in CS,"
"now I know what I want to doâ€¦." Slam dunk!!
&lt;/p&gt;

&lt;p&gt;
Of course, you have to curate your volunteers. While a guest talk from
a very senior, very established adult can be inspiring some times,
they can be so far removed from the kids next steps, it can actually
be intimidating and a turn off. As a side note, I don't think that
this would be the case at all with respect to Fred's graduation
speech. His overall sincerity and the fact that he's so connected to
the school and known to the kids made sure of that.
&lt;/p&gt;

&lt;p&gt;
When I made my first Hunter college event, I wanted to kick start and
excite the current students and also give myself some CS street cred so
I carefully selected the participants for our first panel / mixer. I
had:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A young VC
&lt;/li&gt;
&lt;li&gt;A mid 30s CTO of a mid size company
&lt;/li&gt;
&lt;li&gt;A mid 30s Facebook engineer who also spent time at Google
&lt;/li&gt;
&lt;li&gt;Assorted recent college grad tech people from big companies, start ups,
and everything in between.
&lt;/li&gt;
&lt;li&gt;I tried to have a diverse crowd.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I wanted a couple of more senior people to show the end of the road
but I wanted most of the people there to be at "the next rung in the
ladder." All indications were that the event was also a slam dunk.
&lt;/p&gt;

&lt;p&gt;
Through all of this it's become pretty apparent to me that bringing in
adult mentors and role models can be even more important than covering
every little bit of whatever curriculum you're teaching.  Some people
say that we need more female High School CS teachers and while I agree
with that sentiment, I'd rather have the best CS teacher I can get
regardless of background as long as I have amazing women in tech to
provide for my students as role models. 
&lt;/p&gt;

&lt;p&gt;
This led me to think about a couple of the CS Ed programs that I
support. TEALS and ScriptEd. I like both, but they're different
models. In TEALS the volunteer works with the teacher. In ScriptEd,
the volunteer is the teacher. I have many former students that have
volunteered through TEALS but I don't know any who've done SciptEd so
I don't have the same "inside" info. 
&lt;/p&gt;

&lt;p&gt;
For TEALS, those volunteers are also role models. Every day that Etsy
engineer is in the classroom those students see and hear from a tech
professional. What's more, they see and hear from one who's taking the
time to be with them.
&lt;/p&gt;

&lt;p&gt;
Of course the same is true for ScriptEd but I wonder if after some
time the students view the ScriptEd volunteer as the teacher rather
than the tech professional.
&lt;/p&gt;

&lt;p&gt;
There's probably some interesting research in there.
&lt;/p&gt;

&lt;p&gt;
Finally nothing is better than really being able to hook kids up with
long term mentors. This is something that I think AFSE's been able to
do but it's an expensive proposition. It's something I'd love to see
more of at schools and as part of the basic budget but with all the
money wasted on things like standardized testing and flawed teacher
evaluation systems, I don't see it coming any time soon.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Using Emacs - 9 - Themes</title>
    <id>http://cestlaz.github.io/posts/using-emacs-9-themes/</id>
    <updated>2016-06-28T00:00:00</updated>
    <published>2016-06-28T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-9-themes/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Now that we have a nice basic configuration, let's make Emacs look a
little nicer.
&lt;/p&gt;

&lt;p&gt;
Like most editors, Emacs can be extensively themed. 
&lt;/p&gt;

&lt;p&gt;
As shown in the video, you can quickly see the built in themes using
the &lt;b&gt;&lt;b&gt;customize-themes&lt;/b&gt;&lt;/b&gt; command.
&lt;/p&gt;

&lt;p&gt;
You can load one of these themes by using the &lt;b&gt;&lt;b&gt;load-theme&lt;/b&gt;&lt;/b&gt; command
interactively or, more likely by putting:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'leuven&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
in your init.el. The above code loads the built in &lt;b&gt;&lt;b&gt;leuven&lt;/b&gt;&lt;/b&gt; theme.
&lt;/p&gt;

&lt;p&gt;
I prefer the &lt;b&gt;&lt;b&gt;zenburn&lt;/b&gt;&lt;/b&gt; theme. For that, you have to load the zenburn
package. Here's the code in our init.el:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;zenburn-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'zenburn&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the video, I also mention the color theme package.
&lt;/p&gt;

&lt;p&gt;
So, customize away.
&lt;/p&gt;

&lt;p&gt;
In the links, you'll find some links to some Emacs theme gallery sites
to help find something you like.
&lt;/p&gt;

&lt;p&gt;
Thanks for reading and watching and as always, please leave comments,
suggestions and favorite themes.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/cod2ABxlrV8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Zenburn theme home page: &lt;a href="https://github.com/bbatsov/zenburn-emacs"&gt;https://github.com/bbatsov/zenburn-emacs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Emacs theme gallery: &lt;a href="https://pawelbx.github.io/emacs-theme-gallery/"&gt;https://pawelbx.github.io/emacs-theme-gallery/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Another one: &lt;a href="https://emacsthemes.com/"&gt;https://emacsthemes.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-9-themes"&gt;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 8 - Autocomplete</title>
    <id>http://cestlaz.github.io/posts/using-emacs-8-autocomplete/</id>
    <updated>2016-06-26T00:00:00</updated>
    <published>2016-06-26T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-8-autocomplete/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Out of the box, Emacs supports various types of completion.
&lt;/p&gt;

&lt;p&gt;
Tab completion for filenames and commands basically work right out of
the box and Emacs has built in modes like &lt;a href="https://www.emacswiki.org/emacs/AbbrevMode"&gt;Abbrev&lt;/a&gt;, &lt;a href="https://www.emacswiki.org/emacs/HippieExpand"&gt;Hippie Expand&lt;/a&gt;, and
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html"&gt;Dabbrev&lt;/a&gt; provide a manner of completion for in buffer text.
&lt;/p&gt;

&lt;p&gt;
I briefly show Dabbrev (Dynamic Abbrevs) in the video and if you're
interested in the others, follow the links.
&lt;/p&gt;

&lt;p&gt;
We saw ow the built in Ido mode and third party packages like Ivy,
which I prefer, and Helm make for better completions on functions,
filenames, and the like and Emacs also has third party packages for in
buffer completion. 
&lt;/p&gt;

&lt;p&gt;
The two main contenders are &lt;a href="https://github.com/auto-complete/auto-complete"&gt;auto-complete Mode&lt;/a&gt; and &lt;a href="http://company-mode.github.io/%0A"&gt;company Mode&lt;/a&gt;. I use
auto-complete, others swear by company. The video shows the basics of
auto-complete mode but check both out and decide for yourself.
&lt;/p&gt;

&lt;p&gt;
If you feel strongly about one or the other, please share in the
comments.
&lt;/p&gt;


&lt;p&gt;
Here's a basic configuration:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We'll modify this as move along in the series.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/5FBVhdyU4dA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Autocomplete home page: &lt;a href="https://github.com/auto-complete/auto-complete"&gt;https://github.com/auto-complete/auto-complete&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Autocomplete manual: &lt;a href="http://auto-complete.org/doc/manual.html"&gt;http://auto-complete.org/doc/manual.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete"&gt;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 7- Navigation with Avy</title>
    <id>http://cestlaz.github.io/posts/using-emacs-7-avy/</id>
    <updated>2016-06-24T00:00:00</updated>
    <published>2016-06-24T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-7-avy/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here's a really cool navigation method that I've been meaning to use
more. Avy is a replacement for ace-jump mode which is an
implementation of easymotion, a vim plugin.
&lt;/p&gt;

&lt;p&gt;
It's pretty cool and lets you quickly navigate to any spot on the
screen.
&lt;/p&gt;

&lt;p&gt;
After triggering avy, or more specifically the &lt;b&gt;&lt;b&gt;avy-goto-char&lt;/b&gt;&lt;/b&gt;
function, emacs prompts you for a single character. When you type it,
all instances of the character that start out words change to a
highlighted letter. Type the highlighted letter and you jump to that
location.
&lt;/p&gt;

&lt;p&gt;
The avy package comes with a bunch of options including a 2 character
search variant, a timed variant which drops into search, and more.
&lt;/p&gt;

&lt;p&gt;
The Avy home page has all the details.
&lt;/p&gt;


&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/ziytRbASKeU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Here's the configuration I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;avy&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-s"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;avy-goto-char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can check the &lt;a href="https://github.com/abo-abo/avy"&gt;avy home page&lt;/a&gt; for their recommended configuration
which you get by configuring this way instead:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;avy&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;avy-setup-default&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Avy: &lt;a href="https://github.com/abo-abo/avy"&gt;https://github.com/abo-abo/avy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-7-avy"&gt;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Lesson plans - scripts to springboards</title>
    <id>http://cestlaz.github.io/posts/lesson-plans/</id>
    <updated>2016-06-23T19:31:11-04:00</updated>
    <published>2016-06-23T19:31:11-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/lesson-plans/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I spent last Saturday up at the Microsoft offices in Times Square
observing a &lt;a href="https://www.tealsk12.org/"&gt;TEALS&lt;/a&gt; training session. My fried &lt;a href="https://twitter.com/nathanielgranor"&gt;Nathaniel Granor&lt;/a&gt;, Teals
Regional Manager in the east has invited me a number of times and this
time I was able to make it.
&lt;/p&gt;

&lt;p&gt;
If you don't know, TEALS is a program that takes volunteers in the
tech industry and places them in classrooms. Unlike other programs,
the TEALS volunteers work with the teachers while the kids learn some
CS. The idea is that the teacher will learn about CS from the
volunteer and the volunteer will learn something about teaching.
&lt;/p&gt;

&lt;p&gt;
It's not the same as having a strong, knowledgeable CS teacher in the
classroom but until we get there, TEALS is doing great work giving
kids something that they need and otherwise wouldn't get.
&lt;/p&gt;

&lt;p&gt;
At one point, Nathaniel started to talk to the volunteers about lesson
plans emphasizing the fact that TEALS would provide all the lesson materials and
the plans so these new to teaching tech volunteers wouldn't have to
make curricular decisions. 
&lt;/p&gt;

&lt;p&gt;
The lesson plan form was pretty traditional and pretty formulaic:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;warm up
&lt;/li&gt;
&lt;li&gt;hook
&lt;/li&gt;
&lt;li&gt;instruction 
&lt;/li&gt;
&lt;li&gt;practice
&lt;/li&gt;
&lt;li&gt;Assessment
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Very similar to what I was shown back in the day during my two day
"teaching boot camp" that kicked off my career &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/lesson-plans/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; and very
appropriate as an effective and efficient way to prepare these
volunteers for their first days. 
&lt;/p&gt;

&lt;p&gt;
This got me thinking about my lesson planning over the years.
&lt;/p&gt;

&lt;p&gt;
When I started, I was teaching math but I wasn't really a math
guy - I was CS all the way. I had to remember the math from high
school, learn the new topics, and figure out how to teach it.
&lt;/p&gt;

&lt;p&gt;
I had a very supportive department but they were busy with their own
classes and this was pre internet. Fortunately, the NYC DOE published
lesson plan books. They were basically bound volumes of xerox copies
of hand written and typed lesson plans provided by experienced
teachers.
&lt;/p&gt;

&lt;p&gt;
I spent many hours copying them, studying  them, and then later
tweaking them.
&lt;/p&gt;

&lt;p&gt;
They were a life saver back then. How was the teaching? OK. Not
great. I got the material to the kids but I was nothing special. This
is where I started to form my bias against the scripted teaching
that's being pushed down today.
&lt;/p&gt;

&lt;p&gt;
As I developed my chops, I started to design my own experiences for my
classes and things improved. By the time I was done teaching math -
maybe 4 years in, I was just scratching the surface of being a math
teacher.
&lt;/p&gt;

&lt;p&gt;
One year in, I started teaching CS along with math at Seward
Park. When I was bumped to Stuy, I went back to math for  a year and a
half and then it was all CS all the time.
&lt;/p&gt;

&lt;p&gt;
For CS, we didn't have lesson plan books so I had to craft everything
from scratch. It was a lot of work but the results were much better.
&lt;/p&gt;

&lt;p&gt;
At first, I would actually write out lesson plans a la math lesson
plans. A "do now," "instructional objectives," "applications,"
"Homework," etc. The only thing I never formally wrote out was a
"medial summary."
&lt;/p&gt;

&lt;p&gt;
Over time, my lessons got better but my lesson plans looked worse and
worse. 
&lt;/p&gt;

&lt;p&gt;
There were times a lesson plan might look something like this:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/lesson-plans/plan.jpg" alt="plan.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
OK, not exactly but as I developed at my craft, I didn't need a laid
out script to follow line for line  rather, just a set of little
reminders and maybe some printed out code. If we were going to develop
a complicated algorithm or derivation, though, I would still write out
all the steps.
&lt;/p&gt;

&lt;p&gt;
This doesn't mean that as my career progressed I planned any less. It
might appear that I'm winging it but even if little to nothing is
written down, there is a plan and there's always a lot of pre work
before class begins.
&lt;/p&gt;

&lt;p&gt;
Now, to bring this back to TEALS.
&lt;/p&gt;

&lt;p&gt;
It's interesting how what's good in one context is not so much in
another.
&lt;/p&gt;

&lt;p&gt;
What TEALS is doing is great - they've got to get a lot of
technologists in to classrooms quickly but once there, they'll be with
real, hopefully experienced teachers. What they're doing gets them
ready to go. It's a starting point, not an end.
&lt;/p&gt;

&lt;p&gt;
On the other hand, when I see scripted curriculum being sold as the
special sauce, be it in CS teacher "training," Teach for America
summer prep or in the name of charter school uniformity, I run the
other way.
&lt;/p&gt;

&lt;p&gt;
Let's prepare curricular  materials for important programs like TEALS
and for beginning teachers just starting out but let's not confuse a
scripted lesson that can be delivered by one and all to be anything
close to the work of a master educator and craftsman.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/lesson-plans/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;full disclosure: I
came in to teaching with zero education credentials and took the
minimum number of ed classes for my license after I started.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="curriculum" label="curriculum"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="teals" label="teals"/>
  </entry>
  <entry>
    <title>Better Comments or tooling as a time sink</title>
    <id>http://cestlaz.github.io/posts/better-comments/</id>
    <updated>2016-06-22T18:09:17-04:00</updated>
    <published>2016-06-22T18:09:17-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/better-comments/"/>
    <summary type="html">&lt;p&gt;
The other day my friend and fellow CS Ed Blogger &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt; wrote
about &lt;a href="http://blog.acthompson.net/2016/06/better-comments-in-visual-studio.html"&gt;Better Comments&lt;/a&gt;, an extension for visual studio that displays
comments that are marked up  with special characters in order to
highlight them. Here's a screenshot:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/omsharp/BetterComments/master/screenshots/ClassificationC.png" alt="ClassificationC.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
So, the first thing I though was "I bet emacs could do that pretty
easily" and down the rabbit hole I went.
&lt;/p&gt;

&lt;p&gt;
I had to figure out something about how emacs themes and font-locking
(emacs for syntax highlighting) works and of course spent far too much
time learning about Emacs, my favored tool, rather than getting actual
work done, but I came up with this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-foreground&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="s"&gt;"#00ff00"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-foreground&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-face&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-attribute&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt;
		    &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;:strike-through&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"adds a few special keywords"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-lock-add-keywords&lt;/span&gt; 
   &lt;span class="nv"&gt;nil&lt;/span&gt;
   &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"cx \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ct \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ci \\(.+\\)"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'python-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'js2-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'js-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's a hack but it does indeed work. In action, it looks something
like this:
&lt;/p&gt;

&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/3TLw1yOMKMc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Truth be told, it really colors anything following cx, ct, or ci, not
just in comments â€“ I have to look a bit more into how emacs handles
comments to figure that one out.
&lt;/p&gt;

&lt;p&gt;
In any event, even though I spent too much time doing this, it's nice
to know I'm working in a tool in which I can.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;UPDATE:&lt;/b&gt;&lt;/b&gt; Thanks to user ncsuwolf on /r/emacs on reddit, here's a
fully working, more properly done solution:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-strike&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:strike-through&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="s"&gt;"For strike-through comments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-important&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"#00ff00"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="s"&gt;"For important"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defface&lt;/span&gt; &lt;span class="nv"&gt;font-lock-comment-todo&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="s"&gt;"For todo comments"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
		&lt;span class="s"&gt;"adds a few special keywords"&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-lock-add-keywords&lt;/span&gt;
		 &lt;span class="nv"&gt;nil&lt;/span&gt;
		 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+x[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-strike&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+t[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-todo&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\s&amp;lt;+i[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'font-lock-comment-important&lt;/span&gt; &lt;span class="nv"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'add-custom-keyw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 6 - Searching a Swiper</title>
    <id>http://cestlaz.github.io/posts/using-emacs-6-swiper/</id>
    <updated>2016-06-20T00:00:00</updated>
    <published>2016-06-20T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-6-swiper/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video is all about using incremental search to navigate through your emacs buffers.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/0mwwN0S1dnQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
You can use the default incremental searchb, bound to &lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt; for
isearch-forward &lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt; to search backwards (reverse).
&lt;/p&gt;

&lt;p&gt;
They work really well as is but I prefer using &lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt;. The video demos
both and the &lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt; home page has loads of details.
&lt;/p&gt;

&lt;p&gt;
Part of the Swiper package includes ivy and counsel which I use instead of ido.
&lt;/p&gt;

&lt;p&gt;
The video also mentions lorem-ipsum mode for generating text quickly and &lt;b&gt;&lt;b&gt;describe-mode&lt;/b&gt;&lt;/b&gt; in the help system.
&lt;/p&gt;

&lt;p&gt;
Here's the code we added for swiper:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; it looks like counsel is a requirement for swiper&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;swiper&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ivy-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ivy-use-virtual-buffers&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="s"&gt;"\C-s"&lt;/span&gt; &lt;span class="ss"&gt;'swiper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c C-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ivy-resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f6&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ivy-resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"M-x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-M-x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-find-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-describe-function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; v"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-describe-variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f1&amp;gt; l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-load-library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f2&amp;gt; i"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-info-lookup-symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f2&amp;gt; u"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-unicode-char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c g"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-git&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c j"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-git-grep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-ag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-locate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-S-o"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-rhythmbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;read-expression-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'counsel-expression-history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and we commented out the ido stuff:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; using swiper so ido no longer needed&lt;/span&gt;
&lt;span class="c1"&gt;;;(setq ido-enable-flex-matching t)&lt;/span&gt;
&lt;span class="c1"&gt;;;(setq ido-everywhere t)&lt;/span&gt;
&lt;span class="c1"&gt;;;(ido-mode 1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you want to see a nice video specifically on swiper by the author, here it is:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VvnJQpTFVDc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;



&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Swiper: &lt;a href="https://github.com/abo-abo/swiper"&gt;&lt;/a&gt;&lt;a href="https://github.com/abo-abo/swiper"&gt;https://github.com/abo-abo/swiper&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The Swiper Manual: &lt;a href="http://oremacs.com/swiper/"&gt;http://oremacs.com/swiper/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-6-swiper"&gt;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Robots platforms and practicalities</title>
    <id>http://cestlaz.github.io/posts/robot-survey/</id>
    <updated>2016-06-15T09:08:28-04:00</updated>
    <published>2016-06-15T09:08:28-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/robot-survey/"/>
    <summary type="html">&lt;p&gt;
I received an email from a friend the other day asking me about a
particular robotics platform she recently saw.
&lt;/p&gt;

&lt;p&gt;
I've played with robotics on and off over the years ranging from
building them from (not using) scratch using Atmel chips and programming them in
assembly to using Arduino based platforms to using pre-built robot
platforms. They're really cool and since they interact with the real
world you can do all sorts of interesting and motivational things with students.
&lt;/p&gt;

&lt;p&gt;
I've done these on my own as a hobbyist and also with students either
individually or in small groups, but never as part of a class I had
been teaching.
&lt;/p&gt;

&lt;p&gt;
Why not?
&lt;/p&gt;

&lt;p&gt;
The biggest reason is that the classes I've taught are already so
packed full of CS goodness that we can't even get everything done
that's theoretically on the syllabi.
&lt;/p&gt;

&lt;p&gt;
The other has to do with practical concerns.
&lt;/p&gt;

&lt;p&gt;
Equipment costs - Let's say we can get our platform at $100 a pop. I
just can't see a public school with 34 kids in a class getting one per
student or one for every two.
&lt;/p&gt;

&lt;p&gt;
So, what's the robot to student ratio and how much actual access do
the kids get? If they're designing  building, do they all get to
design and build? Same question with coding and operating.
&lt;/p&gt;

&lt;p&gt;
Then there's space â€“ if we're talking about a mobile platform as
opposed to something that sits on the desk and is near stationary, we
have a problem. The classrooms I've taught in can barely hold the
students.
&lt;/p&gt;

&lt;p&gt;
There are also issues with breakage, loss, theft and long term
maintainability - will we be able to or even want to fill in with
compatible units in a few years as needed or will we have to reboot
the program from scratch.
&lt;/p&gt;

&lt;p&gt;
All that to deal with before we even get to the fun of teaching and learning.
&lt;/p&gt;

&lt;p&gt;
I'm really curious about the experiences of those of you who do teach
using robots and similar platforms. 
&lt;/p&gt;

&lt;p&gt;
If you are such a teacher, could you please fill out this form or
leave a comment for anything that the form doesn't cover?
&lt;/p&gt;


&lt;iframe src="https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true" width="760" height="500" frameborder="0" marginheight="0" marginwidth="0"&gt;Loading...&lt;/iframe&gt;</summary>
    <category term="hardware" label="hardware"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="robotics" label="robotics"/>
    <category term="robots" label="robots"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs - 5 - Windows</title>
    <id>http://cestlaz.github.io/posts/using-emacs-5-windows/</id>
    <updated>2016-06-14T00:00:00</updated>
    <published>2016-06-14T00:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-5-windows/"/>
    <summary type="html">&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Sorry for the delay in getting this next video / post up. I spent the
last part of last week at &lt;a href="http://go.personaldemocracy.com/"&gt;The Personal Democracy Forum 2016&lt;/a&gt; which is really an exceptional conference.
&lt;/p&gt;

&lt;p&gt;
I posted a bit about it in my &lt;a href="http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/#.V2B9th9vGAk"&gt;last post&lt;/a&gt; and plan to write some more on it, but for now, more Emacs.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D6OUMVbPKSA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;
This video concerns using windows. By using buffers and windows and
the basics you got from the tutorial, you shouldn't have to ever leave emacs.
&lt;/p&gt;

&lt;p&gt;
From here, we'll be able to start going over effective Emacs and then
using it for things like development or document creation.
&lt;/p&gt;


&lt;p&gt;
Some of the key window bindings:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="left"&gt;what it does&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-x 2&lt;/td&gt;
&lt;td class="left"&gt;split-window-below (vertically)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 3&lt;/td&gt;
&lt;td class="left"&gt;split-window-right (horizontally)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 0&lt;/td&gt;
&lt;td class="left"&gt;delete-window (this one)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x 1&lt;/td&gt;
&lt;td class="left"&gt;delete-other-windows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-x o&lt;/td&gt;
&lt;td class="left"&gt;other-window (moves foxus to the next window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
You also have frames which use &lt;b&gt;&lt;b&gt;C-x 5&lt;/b&gt;&lt;/b&gt; as the prefix, so &lt;b&gt;&lt;b&gt;C-x 5 2&lt;/b&gt;&lt;/b&gt;
creats a new frame and &lt;b&gt;&lt;b&gt;C-x 5 1&lt;/b&gt;&lt;/b&gt; closes the other frames.
&lt;/p&gt;

&lt;p&gt;
Remember, you can always use the help system, in particular &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
to describe a key and &lt;b&gt;&lt;b&gt;C-x f&lt;/b&gt;&lt;/b&gt; to describe a function.
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; can be a little clunky so some people like to use
&lt;b&gt;&lt;b&gt;windmove&lt;/b&gt;&lt;/b&gt; which lets you move between windows by holding the shift
key and with the arrows. To set that up, you can add this to your
&lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;windmove-default-keybindings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I prefer using &lt;b&gt;&lt;b&gt;ace-window&lt;/b&gt;&lt;/b&gt; mode which still uses &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; add this to init.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ace-window&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;remap&lt;/span&gt; &lt;span class="nv"&gt;other-window&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;'ace-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;custom-set-faces&lt;/span&gt;
     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;aw-leading-char-face&lt;/span&gt;
       &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;ace-jump-face-foreground&lt;/span&gt; &lt;span class="nv"&gt;:height&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; 
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The other mode I mention in the video is winner mode:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;winner-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which will allow you to use &lt;b&gt;&lt;b&gt;C-c left or right&lt;/b&gt;&lt;/b&gt; to move through past
window configurations.
&lt;/p&gt;


&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Ace window mode: &lt;a href="https://github.com/abo-abo/ace-window"&gt;https://github.com/abo-abo/ace-window&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code for this video:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/lesson-5-windows"&gt;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complete code built up over all videos:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>PDF 2016 - How we lost the open web</title>
    <id>http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/</id>
    <updated>2016-06-11T14:41:32-04:00</updated>
    <published>2016-06-11T14:41:32-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/"/>
    <summary type="html">&lt;p&gt;
I spent the last couple of days attending &lt;a href="http://go.personaldemocracy.com/"&gt;Personal Democracy Forum
2016&lt;/a&gt;, described on their landing site as:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The worldâ€™s leading conference exploring and analyzing technology's
impact on politics, government, and society.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
That's the reason why I haven't posted my latest Emacs video.
&lt;/p&gt;

&lt;p&gt;
PDF is a great conference and raised a huge number of important
issues. I'll probably blog about a few over the next few weeks. 
&lt;/p&gt;

&lt;p&gt;
One topic that I've already lamented about has been the way we as a
society are allowing so much information to be silo-ed in platforms
like Facebook.
&lt;/p&gt;

&lt;p&gt;
I use Facebook as much as the next guy but it always irks me when I
see a CS Education post followed by rich discussion hidden within
Facebook's walls and not available for discovery to the outside world
and the future.
&lt;/p&gt;

&lt;p&gt;
I generally don't get a lot of comments on my posts, but when I do,
more appear in the Facebook link to my post rather than publicly on
the post itself.
&lt;/p&gt;

&lt;p&gt;
At the conference, we watched a video by &lt;a href="https://en.wikipedia.org/wiki/Hossein_Derakhshan"&gt;Hossein Derakhshan&lt;/a&gt; which
talked about the direction the web is moving in and the red flags it
should raise with all of us. He echoed my concerns and beyond but in a much more
eloquent way.
&lt;/p&gt;

&lt;p&gt;
I'm urging you to take the less than ten minutes to watch this
video. I know school's winding down for all of us but for those of you
who are teachers out there - share this with your students. I'm sure a
rich discussion will follow.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/oBLAZZd_Xqc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary>
    <category term="civic-tech" label="civic tech"/>
    <category term="policy" label="policy"/>
  </entry>
</feed>
