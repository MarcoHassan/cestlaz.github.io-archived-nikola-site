<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://cestlaz.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>C'est la Z</title>
  <id>http://cestlaz.github.io/index.atom</id>
  <updated>2018-03-03T14:11:19Z</updated>
  <author>
    <name>Mike Zamansky</name>
  </author>
  <link rel="self" type="application/atom+xml" href="http://cestlaz.github.io/index.atom"/>
  <link rel="next" type="application/atom+xml" href="http://cestlaz.github.io/index-36.atom"/>
  <link rel="alternate" type="text/html" href="http://cestlaz.github.io/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Using Emacs 44 - An org-mode workflow for application processing</title>
    <id>http://cestlaz.github.io/posts/using-emacs-44-pdf/</id>
    <updated>2018-03-03T08:05:45-04:00</updated>
    <published>2018-03-03T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-44-pdf/"/>
    <summary type="html">&lt;div id="outline-container-org2c02223" class="outline-2"&gt;
&lt;h2 id="org2c02223"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2c02223"&gt;
&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It's something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program. 
&lt;/p&gt;

&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you're a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited the &lt;a href="http://samsungnext.com/"&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href="http://www.catskillsconf.com/"&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year. 
&lt;/p&gt;

&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there's information, I've been known to reach out to recommenders for
more information but first I go through the applications. For each
student, I'm provided with a pdf file with a bunch of data and also an
entry in an internal Hunter online form with even more.
&lt;/p&gt;

&lt;p&gt;
For the first cohort, this wasn't a big deal. I hadn't even started at
Hunter when the applications closed so there was o
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;

&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;

&lt;p&gt;
This year, there are well over 100 applicants (and we're looking to
grow the program by a large number of students). All of a sudden, it
wasn't so easy to navigate all the pdf files.
&lt;/p&gt;

&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href="https://github.com/politza/pdf-tools"&gt;pdf-tools&lt;/a&gt;, and
&lt;a href="https://melpa.org/#/org-pdfview"&gt;org-pdfview&lt;/a&gt; I've come up with a workflow that I very much like.
&lt;/p&gt;

&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LFO2UbzbZhA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="pdf" label="pdf"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title>
    <id>http://cestlaz.github.io/posts/sigcse2018-bootstrap/</id>
    <updated>2018-03-02T09:27:33-04:00</updated>
    <published>2018-03-02T09:27:33-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse2018-bootstrap/"/>
    <summary type="html">&lt;div id="outline-container-orgc43063e" class="outline-2"&gt;
&lt;h2 id="orgc43063e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc43063e"&gt;
&lt;p&gt;
I really didn't know what to expect at the &lt;a href="https://dl.acm.org/citation.cfm?id=3159471"&gt;Creativity, Customization,
and Ownership: Game Design in Bootstrap: Algebra&lt;/a&gt; session. I've been a
big fan of &lt;a href="http://www.bootstrapworld.org/"&gt;Bootstrep&lt;/a&gt; for years and looking at the authors, &lt;a href="http://blog.acthompson.net/2017/10/cs-teacher-interview-emmanuel.html"&gt;Emmanuel
Schanzer&lt;/a&gt;'s been a freind forever. I've never met &lt;a href="https://twitter.com/ShriramKMurthi"&gt;Shriram Krishnamurthi&lt;/a&gt;
in person but am looking forward to it. We've traded emails and blog
comments. I'd like to consider him a friend and I certainly respect
him and his work even though we frequently disagree around the
edges. The third author and presenter, Kathi Fisler was new to me.
&lt;/p&gt;

&lt;p&gt;
The Bootstrap program is embedded in algebra classes. In it, students
use Racket (nee scheme) to reinforce math skills while building
computer science skills. The big student project is a graphical game.
&lt;/p&gt;

&lt;p&gt;
When designing the project, students are asked to decide on and find
four resources:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;The background image&lt;/li&gt;
&lt;li&gt;The player image&lt;/li&gt;
&lt;li&gt;The target image&lt;/li&gt;
&lt;li&gt;The enemy image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Students are given a short amount of time to decide on and find these
four images. I think it was about ten minutes and that's it. That's
all the "creativity" in the assignment. After that, all the students
are essentially creating the same game with different skins.
&lt;/p&gt;

&lt;p&gt;
This design makes sense. You can't have students going all over the
place. Constraining the assignment in this way allows teachers who
might now be strong in computer science to guide the kids through the
program to completion.
&lt;/p&gt;

&lt;p&gt;
At the time I was thinking: I really like all of this but is it really
open ended creativity and discovery with respect to math or computer
science? As it turned out, Fisler addressed this point at the end of
the talk in a way that made me vary happy.
&lt;/p&gt;

&lt;p&gt;
Fisler went on to describe the rest of the student experience and then
went on to talk about the statistics they gathered. 
&lt;/p&gt;

&lt;p&gt;
One big takeaway was that while all the students were essentially
writing the same game varying only the graphical elements, this
encouraged students to create very different themes. They also created
rich stories around their games. The project might not have been
"creative" with respect to the CS or Math directions but it was certainly
creative in other important areas. The other takeaway was that
survey's indicated all sorts of positives from the program as a whole
so the project didn't seem to have suffered by having the students
essentially write the same program. Participants were proud of their
work, they felt their games were different from their peers and in
general the experience was good.
&lt;/p&gt;

&lt;p&gt;
During questions, someone asked about adding a fifth element - a
projectile or missile. It turns out that at one point the program had a
projectile component but that led to the vast majority of projects to
be themed in very similar ways. Even though not the same, it reminded me to something Randy
Pausch said in his &lt;a href="https://www.youtube.com/watch?v=ji5_MqicxSo"&gt;Last Lecture&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
You make whatever you want. Two rules: no shooting violence and no
pornography. Not because I’m opposed to those in particular, but you know, that’s been done with
VR, right? [laughter] And you’d be amazed how many 19-year-old boys are completely out of ideas
when you take those off the table.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
At the very end, Fisler addressed my questions about creativity and
discovery. She posed these questions of her own: "Do we overstate the
case for creativity?" and "Is pure constructivism a win?"
&lt;/p&gt;

&lt;p&gt;
I've ranted on contructivism before. It can be great but a
constructivist lesson takes a knowledgeable educator and a lot of time,
preparation, and effort. It's a big ask for, say, a high school
teacher who's already taking home hours of work every evening. Too
often I've seen the following "contructivist" model instead:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Take an isntructor that doesn't know their craft, the content, or
niether.&lt;/li&gt;
&lt;li&gt;Let the kids play with stuff.&lt;/li&gt;
&lt;li&gt;Show off the couple of autodidacts that figure it out as success
stories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'll rant more about this "model" with respect to the new buzz word
"lead learner" at some point in the future.
&lt;/p&gt;

&lt;p&gt;
On the creativity side, it's important but there are also times for
the instructor to lead and for guidelines to be followed.
We want to foster creativity but that doesn't mean that it's 100%
creativity 100% of the time. Education is like life, a balance. The
Bootstrap program had to constrain the CS and math learning but
allowed for creativity in other areas. It's smart and it's a win.
&lt;/p&gt;

&lt;p&gt;
I still want to meet Shriram in person one day and now also Kathi
Fisler. I didn't know what to expect walking in but I left the talk
reminded of why I'm such a fan of Emmanuel, his team, and their work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>Sigcse2018 - Malloc Lab</title>
    <id>http://cestlaz.github.io/posts/sigcse2018-Malloc-Lab/</id>
    <updated>2018-03-01T16:59:31-04:00</updated>
    <published>2018-03-01T16:59:31-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse2018-Malloc-Lab/"/>
    <summary type="html">&lt;div id="outline-container-org3d0026d" class="outline-2"&gt;
&lt;h2 id="org3d0026d"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d0026d"&gt;
&lt;p&gt;
I wasn't going to go to this session. I started out in a panel on
integrating social good into CS Ed. With the panel not meeting my
expectations I moved over to my second choice - the system programming
sessions where I saw &lt;a href="https://dl.acm.org/citation.cfm?id=3159597"&gt;Implementing Malloc: Students and Systems
Programming&lt;/a&gt;, a paper presented by &lt;a href="http://www.cs.cmu.edu/~bpr/"&gt;Brian Railing&lt;/a&gt; of CMU.
&lt;/p&gt;

&lt;p&gt;
I really liked both the paper and the talk.
&lt;/p&gt;

&lt;p&gt;
CMU computer science students all take a systems course that uses
&lt;a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-3/dp/9332573905/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=Y5ZKG2V8ZYZZPZHQP8SQ"&gt;Computer Systems: A Programmer's Perspective&lt;/a&gt;. It's a great book. I
read through the first edition years ago and felt it was great
resource not only in a systems course but also for self study. One of
the labs has the students implement their own memory allocation calls,
or &lt;b&gt;malloc&lt;/b&gt; for us old time C wonks. 
&lt;/p&gt;

&lt;p&gt;
There were a number of self perceived  deficiencies with the
assignment such as encouraging bad programming style by modeling
less than ideal practices but the biggest deficiency as that students
could game the assignment. Students could do very well on the
assignment by exploiting knowledge of the assignment rather than by
writing a full and correct malloc implementation. One example is that
students were able to figure out that no allocation would be more than
100MB so they really didn't have to deal with 64 bit pointers. They
could use smaller offsets thus simplifying the assignment. The
assignment became more about figuring out how to get it through the
grader and less about learning memory management. I'm sure I'm
overstating it but that's the idea.
&lt;/p&gt;

&lt;p&gt;
Railing explained all of the deficiencies and then how they changed
the assignment to address them.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, the assignment had fewer loopholes to game so
students had to really write the malloc library and presumably learn
about memory management.
&lt;/p&gt;

&lt;p&gt;
They also added an intermediate deliverable so students couldn't leave
everything for the last minute.
&lt;/p&gt;

&lt;p&gt;
Near the end of the talk, Railing discussed results where he pointed
out that students final exam scores didn't change but they did better
on the malloc questions. It wasn't clear if the overall scores didn't
change, meaning that the students did better on the malloc questions
but worse somewhere else or if they did similarly to past students on
the other sections and in addition they scored better on the malloc
questions. I'm not sold on the final exam questions being the best way
to evaluate learning but it is an easy data point. 
&lt;/p&gt;

&lt;p&gt;
I loved the presentation and paper and I love what Railing is doing
but my big takeaway was…
&lt;/p&gt;

&lt;p&gt;
Well, Duh…
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;students aren't doing as they should&lt;/li&gt;
&lt;li&gt;teacher realizes students are gaming assignment&lt;/li&gt;
&lt;li&gt;teacher reworks assignment&lt;/li&gt;
&lt;li&gt;students do better&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Teachers do this all the time. Of course when we do it, it's not
"research." This was a recurring theme for me at SIGCSE2018 and I
tweeted it. While it's true that K12 teachers can learn a lot about CS
content from higher ed, people in higher ed can learn a lot about
teaching from teachers. 
&lt;/p&gt;

&lt;p&gt;
What Railing presented was terrific and important as changing
assignments like this will now be considered by people who haven't
thought about this before but this is second nature to a teacher. Of
course I'm talking about a good teacher, not one who blindly follows
scripted lessons.
&lt;/p&gt;

&lt;p&gt;
I don't mean this as a slight to professors. They're hired and
promoted based on research so much of their job involves another skill
set. I know many professors who care very much about teaching but they
might only teach one or two classes a semester that meets once or
twice a week while a typical high school teacher meets 150 students a
day five days a week over five different classes a day.  Much more of
an opportunity for deliberate practice.
&lt;/p&gt;

&lt;p&gt;
This presents a huge challenge. How can professors who are hired and
promoted as researchers be given the time and ability to develop as
teachers? What about adjuncts or Teaching Assistants? I'd imagine it's
even harder for them. I know that colleges have lines for teaching
faculty but from what I can see, those instructors are usually super
overloaded with classes and students so that doesn't solve the
problem. Even if you do have teaching faculty that have the time to
develop their craft, how do you get those teaching chops over to the
research faculty?
&lt;/p&gt;

&lt;p&gt;
After the session, I was talking about this with &lt;a href="http://www.cs.cmu.edu/~mjs/"&gt;Mark Stehlik&lt;/a&gt;,
Assistant Dean at CMU's School of Computer Science. Mark was telling
me about CMU's efforts to develop teaching faculty across the
disciplines. I was happy to hear about the efforts CMU was taking but
it sounds like they have the same challenges with respect to pedagogy
as everyone else. If it's a challenge for CMU with all their
resources, what does that mean for the rest of us?
&lt;/p&gt;

&lt;p&gt;
Still, it was encouraging to go to a number of sessions where it was
clear that professors - both teaching and research faculty are serious
about the craft of teaching and conferences like SIGCSE can bring them
together with those of us who don't have the chops as researchers but
do so as teachers.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="pedagogy" label="pedagogy"/>
    <category term="systems" label="systems"/>
  </entry>
  <entry>
    <title>SIGCSE 2018</title>
    <id>http://cestlaz.github.io/posts/sigcse2018/</id>
    <updated>2018-02-25T14:41:41-04:00</updated>
    <published>2018-02-25T14:41:41-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/sigcse2018/"/>
    <summary type="html">&lt;div id="outline-container-org80569fc" class="outline-2"&gt;
&lt;h2 id="org80569fc"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org80569fc"&gt;
&lt;p&gt;
I just got back from SIGCSE2018 - the big annual conference on
computer science education. Although I've been in this racket for
decades, this was only my second SIGCSE and once again I had a blast.
&lt;/p&gt;

&lt;p&gt;
As with most conferences, a highlight was the "hallway track" where I
got to spend time with friends and colleagues from all over the
country. I also got to check off a few names from the "people I've
been following online and want to meet in person" list. There are a
few more on the list but it's getting smaller.
&lt;/p&gt;

&lt;p&gt;
The theme was &lt;b&gt;CS For All&lt;/b&gt; but the range of topics covered was both
wide and deep.
&lt;/p&gt;

&lt;p&gt;
For me, I left thinking about a few themes:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;College faculty can learn a lot from K12 teachers in terms of
pedagogy and teaching.&lt;/li&gt;
&lt;li&gt;So can "thought leaders," policy makers, and big companies.&lt;/li&gt;
&lt;li&gt;Colleges face a huge challenge in both developing pedagogues and
transfering pedagogical knowledge over to researchers.&lt;/li&gt;
&lt;li&gt;Can you do both CS4All and have quality CS teachers in the short
term (I doubt it)?&lt;/li&gt;
&lt;li&gt;Researchers vs Practitioners and the value of listening to one or
the other.&lt;/li&gt;
&lt;li&gt;Nifty assignments are frequently regular assignments reskinned with
graphics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There were a few sessions that dissapointed me but most of the ones I
attende were terrific. I thought I'd blog about some of them in detail over
the next few weeks. 
&lt;/p&gt;

&lt;p&gt;
Here are the sessions I'm planning on writing about:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3159597"&gt;Implementing Malloc: Students and SYstems Programming&lt;/a&gt; presented by Brian
Railing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3159471"&gt;Creativity, Customization, and Onwership: Game Design in Bootstrap:
Algebra&lt;/a&gt;, presented by Kathi Fisher&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3159527"&gt;An Explicit Strategy to Scaffold Novice Program Tracing&lt;/a&gt;, presented
by Benjamin Xie&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3159557"&gt;Strategies for Basing the CS Theory Course on Non-decision Problems&lt;/a&gt;,
presented by John MacCormick&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3159609"&gt;Connect the Dots to Prove It: A Novel Way to Learn Proof
Construction&lt;/a&gt;, by McCartin-Lim, Woolf, and Mcregor&lt;/li&gt;
&lt;li&gt;Google Supporter Session on Incorporating Machine Learning into
University Courses.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3170601"&gt;Nifty Assignments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I might talk about a few other sessions as well.
&lt;/p&gt;

&lt;p&gt;
Overall it was a great conference. I look forward to sharing my
experiences with all of you in the coming posts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Using Emacs 43 - Music with MPD</title>
    <id>http://cestlaz.github.io/posts/using-emacs-43-music/</id>
    <updated>2018-02-20T08:05:45-04:00</updated>
    <published>2018-02-20T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-43-music/"/>
    <summary type="html">&lt;div id="outline-container-orgdda820b" class="outline-2"&gt;
&lt;h2 id="orgdda820b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdda820b"&gt;
&lt;p&gt;
I like to listen to music at work. Sometimes I just stream from
YouTube, Soundcloud, Spotify or some other online source but if you're
a person of a certain age, like me, you probably have quite an mp3
collection. All those CDs that have been ripped not to mention some
converted vinyl.
&lt;/p&gt;

&lt;p&gt;
I used to use the &lt;a href="https://www.musicpd.org/"&gt;Music Player Daemon&lt;/a&gt; or MPD back in the day. It would
run in the background and you could connect to it using lots of
&lt;a href="https://www.musicpd.org/clients/"&gt;clients&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
When I was running Ubuntu and Mint Linux, I had some trouble setting
up MPD but the process is much smoother using Manjaro which is Arch
based and I'm currently enjoying.
&lt;/p&gt;

&lt;p&gt;
Here's a video on how I set up MPD and also use Emacs to control it.
&lt;/p&gt;

&lt;p&gt;
Coincidentally, on the same day I recorded this, &lt;a href="https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/feed"&gt;Uncle Dave&lt;/a&gt; put up a
similar &lt;a href="https://www.youtube.com/watch?v=xTVN8UDScqk"&gt;video&lt;/a&gt;. Dave also sets up MPD on an Arch based linux but he
uses EMMS for his player. I ultimately end up with Simple-MPC with
briefs stops at the built in MPC mode and Mingus along the way.
&lt;/p&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LWd60rc_rQ0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="mpd" label="mpd"/>
    <category term="music" label="music"/>
  </entry>
  <entry>
    <title>Testing, Testing</title>
    <id>http://cestlaz.github.io/posts/testing-testing/</id>
    <updated>2018-02-19T08:26:16-04:00</updated>
    <published>2018-02-19T08:26:16-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/testing-testing/"/>
    <summary type="html">&lt;div id="outline-container-orgf25da60" class="outline-2"&gt;
&lt;h2 id="orgf25da60"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf25da60"&gt;
&lt;p&gt;
With CS4All being the buzzword of the day we're paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won't end up studying CS or going directly
into a tech heavy field. 
&lt;/p&gt;

&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it's important that they're prepared in terms of
software development, design, and all those goodies not covered in CS
classes. 
&lt;/p&gt;

&lt;p&gt;
I'm not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I've reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students "comment your code," - a refrain
many undergrads have heard frequently with little guidance.
&lt;/p&gt;

&lt;p&gt;
I'm advocating to begin by bringing in tools and practices that either
don't detract from current CS classes or in fact can add to or
streamline them.
&lt;/p&gt;

&lt;p&gt;
Last year I wrote about &lt;a href="https://cestlaz.github.io/posts/sigcse-2017-github-4/"&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student's
and instructor's class experiences better while introducing them to an
industry best practice.
&lt;/p&gt;

&lt;p&gt;
Today I want to talk about testing. 
&lt;/p&gt;

&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;projects that don't compile&lt;/li&gt;
&lt;li&gt;projects that compile and run but not the way they're supposed to.&lt;/li&gt;
&lt;li&gt;wonky input or interfaces&lt;/li&gt;
&lt;li&gt;projects that don't work for all cases&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
On the instructor side, we have to evaluate the student's
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it's important for me as the teacher
to actually dive into the student's code. In any case, using an auto grader
is actually somewhat similar to running a test suite.
&lt;/p&gt;

&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission. 
&lt;/p&gt;

&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.
&lt;/p&gt;

&lt;p&gt;
I ended up finding &lt;a href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; for C++. It's really simple and just a
single include file. This means that students don't have to actually
install anything on their machines. Here's the example from the
project page:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif" alt="using_doctest_888px_wide.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Basically, the students can just start writing tests.
&lt;/p&gt;

&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Return the factorial of n, an exact integer &amp;gt;= 0.&lt;/span&gt;

&lt;span class="sd"&gt;    If the result is small enough to fit in an int, return an int.&lt;/span&gt;
&lt;span class="sd"&gt;    Else return a long.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; [factorial(n) for n in range(6)]&lt;/span&gt;
&lt;span class="sd"&gt;    [1, 1, 2, 6, 24, 120]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; factorial(30)&lt;/span&gt;
&lt;span class="sd"&gt;    265252859812191058636308480000000&lt;/span&gt;
&lt;span class="sd"&gt;     """&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n must be &amp;gt;= 0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n must be exact integer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# catch a value like 1e300&lt;/span&gt;
	&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;OverflowError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n too large"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;
	&lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring. 
&lt;/p&gt;

&lt;p&gt;
The other easy Python option is the built in &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; module. 
&lt;/p&gt;

&lt;p&gt;
Here's an example of testing strings from the link above:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestStringMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'FOO'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_isupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FOO'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Foo'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
	&lt;span class="c1"&gt;# check that s.split fails when the separator is not a string&lt;/span&gt;
	&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
I havn't played with Java testing in years but I'd guess there's
something similarly light weight.
&lt;/p&gt;

&lt;p&gt;
Tomorrow I'm hoping to finish the groundwork on using C++ doctest with
my class and I'll write another post afterwards. Probably after SIGCSE
since I'll be attending that from Wednesday on.
&lt;/p&gt;

&lt;p&gt;
We'll see how this goes but I'm guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they'll need wherever
they end up.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="cs" label="cs"/>
    <category term="software-engineering" label="software engineering"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>Using Emacs 42 - Git Gutter and Time Machine</title>
    <id>http://cestlaz.github.io/posts/using-emacs-42-git-gutter/</id>
    <updated>2018-02-18T08:05:45-04:00</updated>
    <published>2018-02-18T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-42-git-gutter/"/>
    <summary type="html">&lt;div id="outline-container-org53478fd" class="outline-2"&gt;
&lt;h2 id="org53478fd"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org53478fd"&gt;
&lt;p&gt;
One day I'll do a Magit video but since there are already some good
ones out there I thought I'd share a couple of other great git related
packages.
&lt;/p&gt;

&lt;p&gt;
The first is &lt;a href="https://github.com/syohex/emacs-git-gutter/tree/00c05264af046b5ce248e5b0bc42f117d9c27a09"&gt;Git Gutter&lt;/a&gt; which adds markers on the side gutter of your
buffer so you know what's changed since you're last commit. I pretty
much use it exclusively for that visual but it can also be used to
cmmit and revert individual chunks of your changes. 
&lt;/p&gt;

&lt;p&gt;
The second is &lt;a href="https://github.com/pidu/git-timemachine"&gt;Git Timemachine&lt;/a&gt; which lets you move forward and back
between commits. 
&lt;/p&gt;

&lt;p&gt;
The video demos both. 
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/P-mLxkb-EE8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="git" label="git"/>
  </entry>
  <entry>
    <title>Using Emacs 41 Pandoc</title>
    <id>http://cestlaz.github.io/posts/using-emacs-41-pandoc/</id>
    <updated>2018-02-13T08:05:45-04:00</updated>
    <published>2018-02-13T08:05:45-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-41-pandoc/"/>
    <summary type="html">&lt;div id="outline-container-org57c0c68" class="outline-2"&gt;
&lt;h2 id="org57c0c68"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org57c0c68"&gt;
&lt;p&gt;
Another Emacs quick hit today. Actually, not really Emacs. Today's
video is a quick, really quick, look at &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;. Pandoc is a document
converter. 
&lt;/p&gt;

&lt;p&gt;
Here are the formats that Pandoc can covert read from:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored Markdown,
MultiMarkdown, and (subsets of) Textile, reStructuredText, HTML,
LaTeX, MediaWiki markup, TWiki markup, TikiWiki markup, Creole 1.0,
Haddock markup, OPML, Emacs Org mode, DocBook, JATS, Muse, txt2tags,
Vimwiki, EPUB, ODT, and Word docx.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
And here are the ones it can write to:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
plain text, Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored
Markdown, MultiMarkdown, reStructuredText, XHTML, HTML5, LaTeX
(including beamer slide shows), ConTeXt, RTF, OPML, DocBook, JATS,
OpenDocument, ODT, Word docx, GNU Texinfo, MediaWiki markup, DokuWiki
markup, ZimWiki markup, Haddock markup, EPUB (v2 or v3), FictionBook2,
Textile, groff man, groff ms, Emacs Org mode, AsciiDoc, InDesign ICML,
TEI Simple, Muse, PowerPoint slide shows and Slidy, Slideous,
DZSlides, reveal.js, PDF
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
That's pretty impressive
&lt;/p&gt;

&lt;p&gt;
I was faced with an html file describing a lab for all the CSCI13500
students at Hunter. I wanted to modify it for my class and that was
going to be a bear. I also wanted an easy way to have it render up on
GitHub. With pandoc, it was trivial. I just typed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pandoc -f html -t org -o lab3.org lab3.html
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which converted the file to org-mode. This was trivial to edit and
then I uploaded it to GitHub as the lab's Readme.org file which GitHub
automatically renders on the project page.
&lt;/p&gt;

&lt;p&gt;
Pandoc for the win.
&lt;/p&gt;

&lt;p&gt;
I've also used pandoc to move between org-mode and word files. 
&lt;/p&gt;

&lt;p&gt;
If you haven't checked out pandoc, you should.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/qVUZsH-MDRM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
  </entry>
  <entry>
    <title>Google Sheets</title>
    <id>http://cestlaz.github.io/posts/google-sheets/</id>
    <updated>2018-02-12T14:28:28-04:00</updated>
    <published>2018-02-12T14:28:28-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/google-sheets/"/>
    <summary type="html">&lt;div id="outline-container-org3278464" class="outline-2"&gt;
&lt;h2 id="org3278464"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3278464"&gt;
&lt;p&gt;
I make regular use of Google's office suite. I use Google forms all
the time to collect data, Google docs when I have to leave Emacs for
document preparation - usually when I have to collaborate with others
online and I use Google Sheets as my greadebook.
&lt;/p&gt;

&lt;p&gt;
I don't do a lot of data processing using Google sheets. For that I
download the data and write small scripts. On the other hand it turns
out that you can do some pretty nifty things by scripting right in
Google sheets. 
&lt;/p&gt;

&lt;p&gt;
Google sheets can be scripted using Javascript and Google's APIs. For
example, adding "hello" and "world" to the two bottom leftmost cells
in your active spreadsheet can be done by running a function like
this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function addHello() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  ss.appendRow(['hello','world']);
  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In general, it's pretty easy to grab, modify, or otherwise manipulate
cells from a spreadsheet with simple javascript.
&lt;/p&gt;

&lt;p&gt;
You can also send email from a Google app script. For me this was a
big win. I use it for emailing grades to students and also as a poor
man's mailmerge. The key call is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GmailApp.sendEmail(email , subject,msg);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here's a video walking through sending emails to a list of people from
a spreadsheet. The code is underneath.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EvQC1N9JMs0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function sendEmail(to,subject,msg){

  GmailApp.sendEmail(to,subject,msg)
}


function getSheetByName(name){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ss.getSheets();
  for( var n in sheets){
    if (name==sheets[n].getName()){
     return sheets[n]; 
    }
  }
    return sheets[0];
}

function prepareMessage(name){
  var sheet = getSheetByName("Msg");
  var oldSheet = SpreadsheetApp.getActiveSheet()
  SpreadsheetApp.setActiveSheet(sheet)

  var dataRange = sheet.getRange(1,1,1,1)
  data = dataRange.getValues()
  var msg = data[0][0]
  msg = msg.replace("%FIRST%",name)
  SpreadsheetApp.setActiveSheet(oldSheet)
  return msg
}

function sendGrades(){
  var sheet = getSheetByName("grades")
  var rows = sheet.getLastRow()
  var cols = sheet.getLastColumn()
  var dataRange = sheet.getRange(2,1,rows-1,cols)
  var data = dataRange.getValues();
  for (i in data){
    var name = data[i][0]
    var to = data[i][1]
    var msg = prepareMessage(name)
    sendEmail(to,"Important Grade Info",msg)
  }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="admin" label="admin"/>
  </entry>
  <entry>
    <title>Using Emacs 40 - Atomic Chrome</title>
    <id>http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</id>
    <updated>2018-01-31T07:00:00-04:00</updated>
    <published>2018-01-31T07:00:00-04:00</published>
    <author>
      <name>Mike Zamansky</name>
    </author>
    <link rel="alternate" type="text/html" href="http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/"/>
    <summary type="html">&lt;div id="outline-container-org50706fc" class="outline-2"&gt;
&lt;h2 id="org50706fc"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org50706fc"&gt;
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I'll try to get to them in the coming months.
&lt;/p&gt;

&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3eef295" class="outline-2"&gt;
&lt;h2 id="org3eef295"&gt;UPDATE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3eef295"&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;

&lt;p&gt;
All you have to do is:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Go to &lt;b&gt;&lt;b&gt;chrome://extensions&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;On the bottom of the page you'll see a button to set &lt;b&gt;&lt;b&gt;keyboard shortcuts&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Set the shortcut for Atomic Chrome&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Enjoy:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wyPZws66Sic" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="learning" label="learning"/>
    <category term="tools" label="tools"/>
  </entry>
</feed>
