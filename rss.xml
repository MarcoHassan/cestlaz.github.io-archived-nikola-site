<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z</title><link>http://cestlaz.github.io/</link><description>C'est la Z</description><atom:link href="http://cestlaz.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 07 Apr 2018 18:09:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs Episode 47 - Magit</title><link>http://cestlaz.github.io/posts/using-emacs-47-magit/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org89fbcbe" class="outline-2"&gt;
&lt;h2 id="org89fbcbe"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89fbcbe"&gt;
&lt;p&gt;
I've been holding off on doing a &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt; video for a while. Mostly
because I wasn't using it exclusively and also because there are
already a number of good Magit videos and resources out there.
&lt;/p&gt;

&lt;p&gt;
What changed? Along with the new version of Magin, Jonas Bernoulli
wrote up &lt;a href="https://emacsair.me/2017/09/01/magit-walk-through/"&gt;a walkthrough of the Magit interface&lt;/a&gt;. For whatever reason,
it all finally clicked. 
&lt;/p&gt;

&lt;p&gt;
In site of what the documentation says, Magit &lt;b&gt;is not&lt;/b&gt; an interface
for git. Magit is a &lt;b&gt;command and control&lt;/b&gt; center for git. You can
launch it just to execute some git commands but you can also leave it
up and running in an Emacs window or frame as a constant project
overview.
&lt;/p&gt;

&lt;p&gt;
Wow. Mind blown!!!
&lt;/p&gt;

&lt;p&gt;
If you use Emacs for Deveopment, you &lt;b&gt;have to&lt;/b&gt; use Magit. If you don't
use Emacs, you can load it on the side for Magit. If you're not a
developer, learn to code so you can use Magit!!!!!
&lt;/p&gt;

&lt;p&gt;
I tried to do justice to the package in the video. Magit along with &lt;a href="https://orgmode.org/"&gt;Org
Mode&lt;/a&gt; are arguably Emacs killer apps - enough in and of themselves to
justify using Emacs.
&lt;/p&gt;

&lt;p&gt;
Check out the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1IYsiHXR620" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>editing</category><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-47-magit/</guid><pubDate>Sat, 07 Apr 2018 13:05:36 GMT</pubDate></item><item><title>Competitions and Hackathons</title><link>http://cestlaz.github.io/posts/hs-competitions/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgf39025f" class="outline-2"&gt;
&lt;h2 id="orgf39025f"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf39025f"&gt;
&lt;p&gt;
Today's the last day of spring break. After the weekend it's back to
the grind. It really hasn't been much of a spring break. The rain and
the snow made for very little spring and between working on the Hunter
/ CUNY2X Internship program and reviewing applications for my Hunter
Daedalus CS Honors program there has been very little break.
&lt;/p&gt;

&lt;p&gt;
Today was no exception - I spent much of the day working but I did
take a few hours to head over to Cornell Tech on Roosevelt
Island. Why? To check out the &lt;a href="https://www.cs.cornell.edu/events/cornell-high-school-programming-contest"&gt;Cornell High School Progrmaming
Contest&lt;/a&gt; - first time in NYC.
&lt;/p&gt;

&lt;p&gt;
I was invited by my friend and organizer &lt;a href="https://twitter.com/diane_levitt"&gt;Diane Levitt&lt;/a&gt;. I only stayed
for an hour or so but it was shaping up to be a great event. It looked
like around a hundred kids from maybe a dozen or so schools and it was
run simultaneously with high schoolers on the Ithaca campus where the
competition has been running for a few years. 
&lt;/p&gt;

&lt;p&gt;
The format was similar to other high school programming competitions
I've been to. Teams of two or three sharing a single computer to solve
a number of programming problems that varied in difficulty. You can
check out a few "warm up" problems on the competition &lt;a href="https://www.cs.cornell.edu/events/cornell-high-school-programming-contest"&gt;site&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
The competition reminded me of the &lt;a href="https://www.sjcny.edu/long-island/academics/programs-departments/mathematics-and-computer-science/programming-competition"&gt;St. Joseph's High School
Programming Competition&lt;/a&gt; held every spring but in NYC so more
convenient for city dwellers. I went to the St. Joseph's competition a
few times and I'm a big fan. I particularly like the awards luncheon
after the competition. If I were to make one suggestion to the
organizers there it would be to mix the seating at the luncheon so
that kids get to sit with and spend time with kids from different
schools.
&lt;/p&gt;

&lt;p&gt;
These competitions contrast nicely with hackathons like &lt;a href="http://stuyhacks.com/%0A"&gt;StuyHacks&lt;/a&gt;
for which I acted as a judge a couple of months ago. Competitions are, well,
competitive. Hackathons can be but don't have to be. Competitions are
about solving problems, hackathons, building things. Each can speak to
a different kind of student. 
&lt;/p&gt;

&lt;p&gt;
Both competitions and hackathons have problems as well. On the competition
side we have:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Schools with more developed CS programs dominate&lt;/li&gt;
&lt;li&gt;A single strong student can carry a team&lt;/li&gt;
&lt;li&gt;Some kids don't like or do well in the competitive environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And on the hackathon side:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;24 hours of straight work is just a bad idea and a bad thing to
encourage.&lt;/li&gt;
&lt;li&gt;Big advantage to teams that bring prefab code.&lt;/li&gt;
&lt;li&gt;Big advantage to kids with experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Both types of events are great opportunities for young
programmers. They're celebrate academic work, bring tech kids together
as a community and when done right are
something of a CS party. Neither type of event speaks to all kids so
it's great to have both competitions and hackathons to go along with
other types of events available for our kids. 
&lt;/p&gt;

&lt;p&gt;
Another thing I love abut the Cornell and St, Joseph's competitions
along with StuyHacks is that they're open to all schools and hence all
students. There's room for the novice and also the expert and you
don't have to be in a particular school or program to participate.
&lt;/p&gt;

&lt;p&gt;
There are other events beyond these three. There are online
competitions like &lt;a href="http://www.usaco.org/"&gt;the USACO&lt;/a&gt;, competitions on HackerRank and Topcoder,
&lt;a href="http://halite.io"&gt;Halite&lt;/a&gt; along with it's hackathon which is great but specialized and in
person ones that are farther away like the &lt;a href="http://pclassic.org/%0A"&gt;PClassic&lt;/a&gt; in Philidelphia
and Rowan's &lt;a href="http://elvis.rowan.edu/rupc/%0A"&gt;HS programming competition&lt;/a&gt; in New Jersey but it's great to
see great local opportunities like these emerging and hopefully
running for years to come.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>competitions</category><category>cs</category><category>events</category><guid>http://cestlaz.github.io/posts/hs-competitions/</guid><pubDate>Fri, 06 Apr 2018 21:22:15 GMT</pubDate></item><item><title>Tools and Complexity</title><link>http://cestlaz.github.io/posts/tools-and-complexity/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org32ed0d7" class="outline-2"&gt;
&lt;h2 id="org32ed0d7"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org32ed0d7"&gt;
&lt;p&gt;
&lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt; wrote about &lt;a href="http://blog.acthompson.net/2018/04/thoughts-on-where-cs-education-tools.html"&gt;CS education tools&lt;/a&gt; earlier today. I've
also been meaning to write on the topic but from a different point of
view.
&lt;/p&gt;

&lt;p&gt;
I do my best to keep up with the latest and greatest in the CS world
both on the academic side as well as the professional one. That's not
really possible, but I do my best. When I have a small project to work
on I'll some times use it as an excuse to play with some recent
technology. Over December, I wanted to write an application viewer to
use for company / student internship matching. I started by looking at
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; but ended up using &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; which I liked much more for a variety
of reasons.
&lt;/p&gt;

&lt;p&gt;
The viewer served it's purpose but I think it can be turned into a
much more comprehensive student / employer internship platform. I
tried to steal a few minutes over this past week's spring break to
start a rewrite using another toolset, Clojure, Clojurescript and
Reagent. I'm really liking the Clojure stack and using
Emacs and Cider for the IDE is really blowing me away. 
&lt;/p&gt;

&lt;p&gt;
What I've noticed is that for every new language of framework you also
have to learn a whole set of ancillary tools.
&lt;/p&gt;

&lt;p&gt;
It didn't used to be that way. Back in the day, things were much
simpler. I remembering doing work at Goldman Sachs, it was as simple
as typing something on the command line like &lt;code&gt;cc file1.c file2.c
file3.c&lt;/code&gt;. I of course had to be cutting edge and use fancy modern
tools like &lt;a href="https://www.gnu.org/software/make/"&gt;Make&lt;/a&gt;. What's more, the tools I used in industry were very
similar to what I used in college. 
&lt;/p&gt;

&lt;p&gt;
We now live in very different times.
&lt;/p&gt;

&lt;p&gt;
If you go to the getting started guides for React or Vue it's pretty easy to
get hello world up and running but beyond that you start to fall in to
the Javascript tooling hole. To start you need either &lt;b&gt;npm&lt;/b&gt; or &lt;b&gt;yarn&lt;/b&gt;
just to manage packages and dependencies. Then you need a build system
or bundler like &lt;b&gt;webpack&lt;/b&gt;, &lt;b&gt;browserify&lt;/b&gt;, or &lt;b&gt;parcel&lt;/b&gt; and that's not even
considering older options like &lt;b&gt;gulp&lt;/b&gt; and &lt;b&gt;grunt&lt;/b&gt; and ancillary tools
like &lt;b&gt;babel&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
A typical React or Vue project is going to need a &lt;a href="https://github.com/krasimir/react-webpack-starter/blob/master/package.json"&gt;project.json&lt;/a&gt; and
&lt;a href="https://github.com/krasimir/react-webpack-starter/blob/master/webpack.config.js"&gt;webpack.config.js&lt;/a&gt; file and sometimes some other files as well. Check
out the links. They're from a simple project template I found
online. Far from simple.
&lt;/p&gt;

&lt;p&gt;
When I was playing with Vue.js a couple of months ago, I ended up
using Webpack to convert the source code into the final JS, take care
of live-reloading, and in general manage the project. I still have no
idea how most of it works. I don't know if it's just me but I'm very
uncomfortable relying on tools that I really don't fully understand to
build my systems. 
&lt;/p&gt;

&lt;p&gt;
The Clojure world is little better with Leiningen and Boot. If you
don't believe me, try to make heads or tails of &lt;a href="https://github.com/bhauman/figwheel-template/blob/master/src/leiningen/new/figwheel/project.clj"&gt;this&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
While it's true that as a professional you'll likely use one set of
tools on a day to day basis and you'll eventually get to know them
that doesn't mean it's not a good idea to prepare kids for what's to
come.
&lt;/p&gt;


&lt;p&gt;
On the K12 side we have drag and drop languages, specialized learning
IDEs like BlueJ, simple cut down IDEs like Dr Racket and completely
online environments like repl.it. All great starter tools that
insulate beginners from the complexities to come. College's
might get closer to the "real world" but just a tad. 
&lt;/p&gt;

&lt;p&gt;
Don't get me wrong, I like many of the tools used in K12
classes and there's far too much complexity in the professional world to
throw at beginners. If we look at a student's entire school
career, classes are already so packed with material it would be hard to
really prepare kids for the real world within their classes. You could
take that tried and true teacher / professor technique of just
requiring it and having the kids figure it out on their own but that's
really just downright abusive.
&lt;/p&gt;

&lt;p&gt;
I don't have an answer for this one. 
&lt;/p&gt;

&lt;p&gt;
I have my kids use tools like Git and GitHub early along with using
testing frameworks and external libraries. I also try to move my
students to a general purpose programmable platform like Emacs or
Vim. I think these are sound practices but students will still have a
big learning curve when they finally get to industry. 
&lt;/p&gt;

&lt;p&gt;
What I really would love it to see the tooling become simpler and
documentation better. &lt;a href="https://github.com/parcel-bundler/parcel"&gt;Parcel&lt;/a&gt;, a Javascript bundler is one of the newer
kids on the block and is much simpler and cleaner than alternatives
like Webpack. The new version of Clojure has it's own command line
tool which is also simpler than the alternatives. Maybe we are already
moving in the right direction and this entire rant will become moot in a couple of years.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>csed</category><category>education</category><category>tools</category><guid>http://cestlaz.github.io/posts/tools-and-complexity/</guid><pubDate>Thu, 05 Apr 2018 22:55:21 GMT</pubDate></item><item><title>Passover April 1 And Indiana Jones</title><link>http://cestlaz.github.io/posts/passover-april-1-and-indiana-jones/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org6fc24cc" class="outline-2"&gt;
&lt;h2 id="org6fc24cc"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6fc24cc"&gt;
&lt;p&gt;
I've never done much in terms of the April Fools thing but frequently
enjoy other peoples shenanigans.
&lt;/p&gt;

&lt;p&gt;
For those of you similarly inclined I share my son Natan's take on
that Passover staple, Echad Mi Yodea.
&lt;/p&gt;

&lt;p&gt;
Enjoy: &lt;a href="http://seccorecit.blogspot.com/2018/04/a-historically-informed-echad-mi-yodea.html"&gt;A Historically Informed Echad Mi Yodea&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/passover-april-1-and-indiana-jones/</guid><pubDate>Sun, 01 Apr 2018 13:17:21 GMT</pubDate></item><item><title>Do It The Dumb Way</title><link>http://cestlaz.github.io/posts/do-it-the-dumb-way/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgbdd5f6c" class="outline-2"&gt;
&lt;h2 id="orgbdd5f6c"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbdd5f6c"&gt;
&lt;p&gt;
There's so much to like in the shape drawing lessons I talked about
in my &lt;a href="http://cestlaz.github.io/posts/refactoring/"&gt;refactoring&lt;/a&gt; post that I thought I'd share a little more here.
&lt;/p&gt;

&lt;p&gt;
It can be argued that the most important things for a program to do is work. The
most clever, elegant, creative program is worthless if it doesn't
produce the desired result. All too often, beginners and hot shot beginners in particular try to
be too clever too early and get themselves into trouble. 
&lt;/p&gt;

&lt;p&gt;
When doing the shape drawing lessons the first couple of shape are
pretty easy
&lt;/p&gt;

&lt;pre class="example"&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
&lt;/pre&gt;

&lt;p&gt;
but things get more interesting with the right justified triangle:
&lt;/p&gt;


&lt;pre class="example"&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****

&lt;/pre&gt;

&lt;p&gt;
For this triangle, students want to come up with the formula for the
number of spaces. They usually figure out something like this with
&lt;code&gt;h-i-1&lt;/code&gt; spaces and &lt;code&gt;i+1&lt;/code&gt; stars:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The formulas become harder to figure out as the shapes become more
complex and sometimes students get stymied.
&lt;/p&gt;

&lt;p&gt;
The truth is that while they're struggling to find the perfect
solution, it's sometimes better to do it the dumb way.
&lt;/p&gt;

&lt;p&gt;
Consider drawing a trapezoid like this example of height 5 and
starting width 12:
&lt;/p&gt;

&lt;pre class="example"&gt;
************
 **********
  ********
   ******
    ****
&lt;/pre&gt;

&lt;p&gt;
A student could come up with the "formulas" for spaces and stars but
sometimes there's a more straightforward way.
&lt;/p&gt;

&lt;p&gt;
Consider the number of spaces on each line on the left hand side of
the shape. First line is 0 then 1, 2 etc. Why not start a variable
&lt;code&gt;spaces&lt;/code&gt; at 0 and increment it on each loop iteration.
&lt;/p&gt;

&lt;p&gt;
For the number of stars, it's starting at the width and being reduced
by 2 each time.
&lt;/p&gt;

&lt;p&gt;
This leads to a solution similar to this (using the line routine from
the earlier refactoring post):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;trap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;spaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This solution is simple to construct, simple to understand, and quite
frankly, hard to get wrong.
&lt;/p&gt;

&lt;p&gt;
It can also lead a student to discovering a pattern or "formula" such
as what was used to solve the earlier problems. 
&lt;/p&gt;

&lt;p&gt;
This might seem to some as a cheap way out, the dumb approach -
creating extra variables and have them count along the way but I
don't. There's nothing wrong with simple and straightforward. Yes, you
could come up with an elegant formula but the bottom line is you need
something to count 0,1,2,3… so create a variable to do it. You need
something to count 12,10,8,… create one for that as well.
&lt;/p&gt;

&lt;p&gt;
 Now, I'm not advocating writing 100 if statements rather than a loop
but I think you get the idea.
&lt;/p&gt;

&lt;p&gt;
The best solution is one that works and Sometimes the "dumb" approach is the best approach.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>pedagogy</category><category>software engineering</category><guid>http://cestlaz.github.io/posts/do-it-the-dumb-way/</guid><pubDate>Fri, 30 Mar 2018 12:24:09 GMT</pubDate></item><item><title>Ethics In CS Education</title><link>http://cestlaz.github.io/posts/ethics-in-cs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org33777a9" class="outline-2"&gt;
&lt;h2 id="org33777a9"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org33777a9"&gt;
&lt;p&gt;
I've been meaning to write about ethics in CS education for a
while. Probably since I saw &lt;a href="https://www.nytimes.com/2018/02/12/business/computer-science-ethics-courses.html?smid=fb-share"&gt;this article&lt;/a&gt; in the NY Times but got sidetracked.
&lt;/p&gt;

&lt;p&gt;
I was reminded when I saw this tweet by Hadi the other day:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;This message is bigger than Facebook. Computer science faces an ethics crisis. That’s why &lt;a href="https://twitter.com/codeorg?ref_src=twsrc%5Etfw"&gt;@codeorg&lt;/a&gt; covers ethics and digital citizenship in our computer science courses. (And we’re thankful that most of the largest tech companies support us) &lt;a href="https://t.co/roSkAzANQM"&gt;https://t.co/roSkAzANQM&lt;/a&gt;&lt;/p&gt;— Hadi Partovi (@hadip) &lt;a href="https://twitter.com/hadip/status/977673429485731840?ref_src=twsrc%5Etfw"&gt;March 24, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
I think we can all agree that bringing ethics and digital citizenship
and, frankly, citizenship in general to our students is important. What I wonder is
what approaches will lead to meaningful results and what methods will
lead us to checking off the "covered that" box.
&lt;/p&gt;

&lt;p&gt;
I'm skeptical of throwing an ethics course into the curriculum as some
places seem to be doing. A class might be required, might fulfill an
elective requirement or it might just be an extra course. If it's
required, what does it replace or are you just going to add more to
the student load. If it fulfills an elective credit, will it be
perceived as "the easy course" as opposed to say, theory and if it's
just an extra course, who's going to take it? Will it just become
preaching to the choir. 
&lt;/p&gt;

&lt;p&gt;
Better is what Hadi mentioned in his tweet - embed ethics throughout
all of your courses and while I think this type of embedding is
important and I'd argue necessary, I'm still betting it won't be
enough to make a difference.
&lt;/p&gt;

&lt;p&gt;
When teaching a course, teachers cover the curriculum but when you
drill down to where they focus their time, it comes down to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;what they think is important for the kids to know.&lt;/li&gt;
&lt;li&gt;what they think the kids will need for that high stakes exam.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If a teacher feels embedding ethical concerns is important they'll
spend time on it, if not, it will be lip service. Even if it's on the
high stakes exam, unless the teacher really believes that this is
important it will just be teaching to the test.
&lt;/p&gt;

&lt;p&gt;
I'd argue that it has to go even further since teachers can only do so
much. How many schools have honor codes and how many of us know
graduates from those schools who exhibit less than ethical behaviour.
&lt;/p&gt;

&lt;p&gt;
So what do we do?
&lt;/p&gt;

&lt;p&gt;
Well, of course we do have to embed ethical concerns across the
curriculum. Teachers should be armed with both the materials and time
needed to address ethical concerns but beyond that, we need teachers
for which ethical CS is important.
&lt;/p&gt;

&lt;p&gt;
My friend &lt;a href="https://twitter.com/ed_saber"&gt;Saber Khan&lt;/a&gt; has been facilitating a monthly #ethicalCS
twitter chat for close to a year now. I don't take part in too many
twitter chats but do recognize that they're important in raising both
awareness and community. I've also seen ethical CS issues more
frequently appear as conference sessions and professional development.
&lt;/p&gt;

&lt;p&gt;
The next big step is to start at the beginning - pre service teacher
training and in my opinion, not with a course but rather embedding
ethical issues throughout teacher preparation. 
&lt;/p&gt;

&lt;p&gt;
If we want to crack this nut it can't just be from curriculum and from
the choir. Pre service CS teacher training is in it's infancy and has
not yet really found its form.
&lt;/p&gt;

&lt;p&gt;
Much to my chagrin, a lot of CS Ed has gone the way of other Ed: Math
Ed, Science Ed, etc. and not in a good way. Let's see if we can make
sure that pre service CS teacher preparation develops to attract and
create great teachers for which ethical CS is part of their core. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>education</category><category>ethicalCS</category><category>preservicexs</category><category>teachers</category><guid>http://cestlaz.github.io/posts/ethics-in-cs/</guid><pubDate>Sun, 25 Mar 2018 20:59:36 GMT</pubDate></item><item><title>Sigcse2018 Proof</title><link>http://cestlaz.github.io/posts/sigcse2018-proof/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org0bf6c52" class="outline-2"&gt;
&lt;h2 id="org0bf6c52"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0bf6c52"&gt;
&lt;p&gt;
Next up from SIGCSE2018 is &lt;a href="https://dl.acm.org/citation.cfm?id=3159609"&gt;Connect the Dots to Prove It&lt;/a&gt; presented by
Mark McCartin-Lim. This paper was presented during the same papers
session as &lt;a href="http://cestlaz.github.io/posts/sigcse2018-theory"&gt;MacCormick&lt;/a&gt; paper I wrote up previously and my reaction to
this one was similar to my reaction to MacCormick's.
&lt;/p&gt;

&lt;p&gt;
My reaction to MacCormick was - "This is awesome but while he's talking
about redesigning existing theory courses, I think we can get a lot of
mileage out of bringing these ideas into lower level CS courses."
&lt;/p&gt;

&lt;p&gt;
I felt similarly about this paper.
&lt;/p&gt;

&lt;p&gt;
The premise is simple - proof is hard and teaching proof is
hard. Students don't know how to begin, what's allowed, what's not
allowed, what's sufficient etc. McCartin-Lim and his team developed a
software tool to present proof as a puzzle and to provide students
with necessary support. 
&lt;/p&gt;

&lt;p&gt;
The tool allows students to interactively construct a graph of their
proof. The graph helps students visualize the proof and the
relationships between the assumptions and assertions.
&lt;/p&gt;

&lt;p&gt;
Here's an example:
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse2018-proof1.png" alt="sigcse2018-proof1.png" width="500px" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
And a more complex one:
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse2018-proof2.png" alt="sigcse2018-proof2.png" width="500px" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
My immediate thought was that this should be reskinned as a high
school product and rolled out in Geometry classes. I've written before
about the fact that proof is &lt;a href="https://cestlaz.github.io/posts/standards-who-for/"&gt;rarely taught&lt;/a&gt; and rarely taught well even
though it's supposed to be the star topic between Algebra and Trigonometry. A tool like this could
probably help. This made me think further of the disconnect between
K12 and higher education. McCartin-Lim talked about students having
difficulty learning proof but lost in the conversation is that
students should start building there proof related foundations in high
school and supporting them in those early years can go a long way to
alleviate problems that only surface at the college level.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/sigcse2018-proof/</guid><pubDate>Fri, 23 Mar 2018 20:24:21 GMT</pubDate></item><item><title>Refactoring</title><link>http://cestlaz.github.io/posts/refactoring/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org955b391" class="outline-2"&gt;
&lt;h2 id="org955b391"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org955b391"&gt;
&lt;p&gt;
One of my laments on teaching computer science is that students are
rarely taught and given the chance to develop  good programming
practices. There's usually not enough time. Beginners work on small
"toys" which don't lend themselves to good software development
practices and later on, there's so much other material like
algorithms, data structures etc. to teach and
learn that programming practices usually amount to lines like:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
"Make sure to comment your code.."
&lt;/p&gt;

&lt;p&gt;
"Indent properly…"
&lt;/p&gt;

&lt;p&gt;
"Use functions…"
&lt;/p&gt;

&lt;p&gt;
"It's important to test your code…"
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
so when I see an opportunity to use a simple example to drive home a
good practice,  I try to jump on it.
&lt;/p&gt;

&lt;p&gt;
Drawing shapes with text is a typical early project. I've seen it in
text books and online and have been doing it for years. I recall doing
it back in the 80s in Fortran IV when the programs we wrote were on &lt;a href="https://en.wikipedia.org/wiki/Punched_card"&gt;punch cards&lt;/a&gt;, run
overnight on an &lt;a href="https://en.wikipedia.org/wiki/IBM_1130"&gt;IBM 1130&lt;/a&gt;, and printouts picked up the next day.
&lt;/p&gt;

&lt;p&gt;
It's a nice use of nested loops. The students will write functions to
create assorted shapes out of asterisks  like rectangles and
triangles. Typical solutions look like this:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which results in shapes like these:
&lt;/p&gt;

&lt;pre class="example"&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
|                 |    |                 |
| *************** |    | *               |
| *************** |    | **              |
| *************** |    | ***             |
| *************** |    | ****            |
| *************** |    | *****           |
| *************** |    | ******          |
| *************** |    | *******         |

&lt;/pre&gt;

&lt;p&gt;
Then there will be more interesting shapes including things like:
&lt;/p&gt;

&lt;pre class="example"&gt;

   *       *            *****
  **      ***           *   *            and more
 ***     *****          *   *
****      ***           *****
           *   

&lt;/pre&gt;

&lt;p&gt;
This is a great time to talk about refactoring.  All of the shape
drawing functions follow the same pattern - there's an outer loop for
the height and then one or more inner loops to draw each line. We can
factor out the inner loops in to a separate &lt;code&gt;line()&lt;/code&gt; function.
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     &lt;span class="c1"&gt;//&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// &amp;lt;----- This can be factored out&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;                                 &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;//&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;// &amp;lt;---------------- along with this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;                               &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's just like factoring in algebra:
&lt;/p&gt;

&lt;div class="LATEX"&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
(RectangleOuterLoop × Line) + (TriangleOuterLoop × Line) ⇒ Line  (Rectangleouterloop × TriangleOuterloop)
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
We end up with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
It's simpler, cleaner, and also can lead us to thinking about the
"harder" shapes in an interesting way. Instead of looking at the right
justified triangle as a triangle, we can think of each level as two
lines - one of spaces (shown here as dashes) followed by a line of
stars:
&lt;/p&gt;


&lt;pre class="example"&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****

&lt;/pre&gt;

&lt;p&gt;
Noticing that  for a height of 5, the dashed lines count down in
length 4,3,2,1,0 and the star lines count up 1,2,3,4,5, we get:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tri2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tri2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here we have typical early CS assignment that really lends itself to
talking about structuring programs and refactoring. Where else can we
inject good programming practices in ways that make sense early on?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>pedagogy</category><category>teaching</category><guid>http://cestlaz.github.io/posts/refactoring/</guid><pubDate>Wed, 21 Mar 2018 12:11:38 GMT</pubDate></item><item><title>Testing Part 2</title><link>http://cestlaz.github.io/posts/testing-part2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org362281f" class="outline-2"&gt;
&lt;h2 id="org362281f"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org362281f"&gt;
&lt;p&gt;
A few weeks ago I wrote about &lt;a href="https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE"&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.
&lt;/p&gt;

&lt;p&gt;
My class interleaves with Hunter's CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing. 
&lt;/p&gt;

&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;
C++ testing framework.
&lt;/p&gt;

&lt;p&gt;
I think this proved to be a valuable exercise. 
&lt;/p&gt;

&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn't even build the tests.
&lt;/p&gt;

&lt;p&gt;
The code looked right. Something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEST_CASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Lab 4 Tests"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3/12/2016"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;54.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It looked like at textbook example of a test case but it wouldn't even
compile.
&lt;/p&gt;

&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Testing getValue for 3/12/2016: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3/12/2016"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This stumped everyone for a while - why wouldn't the test even
compile.
&lt;/p&gt;

&lt;p&gt;
The answer was "data types." The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.
&lt;/p&gt;

&lt;p&gt;
As it turns out, I was pretty excited about this – even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing. 
&lt;/p&gt;

&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.
&lt;/p&gt;

&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn't seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make tests
./tests -s
... watch the tests run
make
./main
--- watch the program run
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Easy peasy.
&lt;/p&gt;

&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.
&lt;/p&gt;

&lt;p&gt;
Is it a win? 
&lt;/p&gt;

&lt;p&gt;
At the very worst, they're learning an
industry practice and at best, it's going to help them improve as
software engineers. Add on the fact that it's making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>software engineering</category><category>tools</category><guid>http://cestlaz.github.io/posts/testing-part2/</guid><pubDate>Sun, 18 Mar 2018 21:04:04 GMT</pubDate></item><item><title>On Prestigious Competitons And High Schools</title><link>http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-orgcc60af9" class="outline-2"&gt;
&lt;h2 id="orgcc60af9"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcc60af9"&gt;
&lt;p&gt;
The ACM recently announced this year's winners of the Cutler-Bell
Prize in High School Computing. Over on his blog, &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;
noted that the winners were either from independent or magnet public
schools. Alfred also noted that most of the winners of prestigious
science competitions like the Regeneron Science Talent Search (nee
Intel, nee Westinghouse) were from public magnet schools. In &lt;a href="http://blog.acthompson.net/2018/03/impressive-high-school-computer-science.html%0A"&gt;his post&lt;/a&gt;,
Alfred ruminates on this and wonders "how to we add the flexibility
and support to more students at more schools?"
&lt;/p&gt;

&lt;p&gt;
As someone who spent over 25 years at Stuyvesant, arguably the
granddaddy of these public magnet schools, I wanted to share some
thoughts. I can only share my experiences from Stuy along with what I
know from a few other schools but I still hope this is worth a read.
&lt;/p&gt;

&lt;p&gt;
The Regeneron competitions under it's various names is the oldest and
most established of these competition so it's pretty easy to get some
data. Stuy is at or near the top of the list in terms of Regeneron
finalists and semi finalists. The &lt;a href="https://en.wikipedia.org/wiki/Regeneron_Science_Talent_Search"&gt;Wikipediapage&lt;/a&gt; lists Stuy as second
to Montgomery Blair with 22 finalists to 40 but the data only goes
back to 1999. I personally know of at least 7 more finalists from my
early years at Stuy, 4 more from the early 90s, 8 more listed under
the page's "notable" entries and who kows how many from the 80s and
earlier. 
&lt;/p&gt;

&lt;p&gt;
Stuy had a strong run of finalists in the early 90's and the early
2000's but there has been a fall off in recent years.
&lt;/p&gt;

&lt;p&gt;
Let's look at what makes Stuy "special" and then at the fall off.
&lt;/p&gt;


&lt;p&gt;
In terms of money, Stuy gets a basic budget similar to other NYC
public schools plus some extra due to the extra graduation
requirements (other schools get extra money for an assortment of
reasons). I seem to recall that the Parents Association raises
somewhere in the low to mid six figures and the Alumni Association has
been historically dysfunctional as a fundraising body.
&lt;/p&gt;

&lt;p&gt;
So, it's not money.
&lt;/p&gt;

&lt;p&gt;
Flexible scheduling? That's something that Alfred mentioned. Stuy kids
have super packed programs. Some kids take 10 classes a day with no
lunch so that's not it either.
&lt;/p&gt;

&lt;p&gt;
Teachers? Stuy gets its teachers the same way as other public
schools and just like other public schools they have some terrific
teachers and some absolute disasters. Stuy also gets a slice of a
particular class of teacher that starts their career at Stuy, never
learns to teach because the kids figure it out but thinks they're gods
gift to teaching.
&lt;/p&gt;

&lt;p&gt;
So, no, it's not the teachers, at least not on the whole.
&lt;/p&gt;

&lt;p&gt;
So, what does Stuy do?
&lt;/p&gt;

&lt;p&gt;
It collects talent and this is the same thing that the other magnet
schools and the elite private schools do as well. Get a bunch of
bright, hard working, motivated kids together and good things
happen. It gets high achieving students from a combination of entrance
exam, reputation, and location &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
I'm not arguing against this – I think there is a need for public
magnet schools like Stuy but I think it's important to recognize that
this is a major contributor to competition results and doesn't
necessarily say anything about the school in terms of leadership or
instruction.
&lt;/p&gt;

&lt;p&gt;
It's similar to a college coach who gets the best recruits. Are they
really a great coach? Can they develop talent or are they just getting
the best talent and getting out of the way. Who's the better coach?
The one who gets all the 5 star recruits every years and frequently
wins it all or the coach who gets 3 star recruits, doesn't win as much
but develops those 3 stars to a point where they can compete against the 5 star
programs.
&lt;/p&gt;

&lt;p&gt;
That's the starting point but then there's the targeting of the top
prospects. Stuy had a run of finalists during the early 2000s. At the
time, a friend of mine ran the math research program. His strategy? He
would scour the school for the kids most likely to win the
competition, get those kids into his class, and hook them  up with
professors with the most promising project potential. It worked
more often than not. Contrast that to what I did when I ran our CS
research program. I didn't take the program seriously for a variety of
reasons but my job was to give EVERY kid in my class the opportunity
to explore some aspect of CS. I had a few semi-finalists which is
neither here nor there but never the stream of winners that my friend
had.
&lt;/p&gt;

&lt;p&gt;
Looking back to Stuy's earlier success, we had a Bio Chair who ran a
similar program. I knew people in that program from when I was a
student. The top talent was recruited and nurtured, the rest, pretty
much ignored. Makes a school look good but not really the hallmark of
a great school
&lt;/p&gt;

&lt;p&gt;
Other schools had a similar strategy. Back in the '80s Cardozo - a
neighborhood high school in Bayside Queens had a great run of
Westinghouse results but that's because the science chair at the time
had a similar program - rope in the top talent early (sophomore year)
and nurture them. After a while the school got a reputation and would
then attract more "science talent."
&lt;/p&gt;

&lt;p&gt;
Stuy's had a falloff in finalists in recent years and I believe that's
due to not having anyone focusing on recruiting kids specifically for
results. Personally, I think this is a good thing but others
disagree. A school with one finalist is perceived to be better than a
school that gives a great research experience to every student but
produces no finalists. In recent years, there's been talk of "what
can we do to get more winners again." I think that's a shame, the
conversation should always be "what can we do to improve the
educational experience we offer all of our students."
&lt;/p&gt;

&lt;p&gt;
None of this is to take away from any of the winners of  any of these
competitions. All the finalists and winners I've known have been
exceptional intellects and top people in their fields. This is just a
commentary on what role a school does, should, and shouldn't play.
&lt;/p&gt;

&lt;p&gt;
In my early years at Stuy, I worked with our top kids on CS
competitions, The kids would place very well in the USACO competitions
throughout the year. One year we entered the ACSL and I realized that
I had a choice - focus on the top handful of kids to make a winning
team that could compete for the title or focus on all the kids but not
expect that great single result. I realized that the top kids
would probably be alright without that extra attention. 
&lt;/p&gt;

&lt;p&gt;
I still think I did right by those kids but that realization also led
me to design my intro class, hack required CS into Stuy and probably
end up positively affecting far more students than if I just focused
on the top percent of a percent.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;That said, students have also been
drawn to Stuy for the CS program which is fairly unique and also for a
couple of specific math teachers.&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>competitions</category><category>education</category><guid>http://cestlaz.github.io/posts/on-prestigious-competitons-and-high-schools/</guid><pubDate>Sat, 17 Mar 2018 19:49:59 GMT</pubDate></item></channel></rss>