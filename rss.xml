<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C'est la Z</title><link>http://cestlaz.github.io/</link><description>C'est la Z</description><atom:link href="http://cestlaz.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 17 Mar 2017 11:07:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>SIGCSE 2017 - a path to github part 1</title><link>http://cestlaz.github.io/posts/sigcse-2017-github-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes. 
&lt;/p&gt;

&lt;p&gt;
This series is not meant to be a git or &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I've linked to below).  This is
about the process I use with my students to get them up to speed. 
&lt;/p&gt;

&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool. 
&lt;/p&gt;

&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I'll talk about that at the end of the
series.
&lt;/p&gt;


&lt;p&gt;
Here's part one. 
&lt;/p&gt;

&lt;p&gt;
I'm doing this with git and GitHub but there's no reason why other
systems and hosts can't be used. I'd also recommend that any educator
or student sign up for the assorted &lt;a href="https://education.github.com/"&gt;discounts&lt;/a&gt; offered by GitHub.
&lt;/p&gt;

&lt;p&gt;
I've followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Step 1 - code distribution&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
To start, I don't even talk about version control. We start with code
distribution. For years, I've looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments. 
&lt;/p&gt;

&lt;p&gt;
I've tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.
&lt;/p&gt;

&lt;p&gt;
At Stuy, we've always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.
&lt;/p&gt;

&lt;p&gt;
Uploading to a CMS system was also problematic - I'm a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.
&lt;/p&gt;

&lt;p&gt;
Enter git. Now, of course, if you're going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://try.github.io/"&gt;https://try.github.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0fKg7e37bQE"&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href="https://classroom.github.com/"&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don't use it because, as I said,
I'm an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I'd take some time to look at their
current offerings before jumping in.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Set up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;This&lt;/a&gt; help page
has more information. You'll want to register an ssh key from every
machine you use - home, work, laptop. 
&lt;/p&gt;


&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;b&gt;&lt;b&gt;classcode&lt;/b&gt;&lt;/b&gt;. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; when creating the repo, make sure to
check the "initialize this repository with a README" box. If you don't
you'll be given a set of instructions on how to set things up once you
click &lt;b&gt;&lt;b&gt;Create repository&lt;/b&gt;&lt;/b&gt; but it's easier and easier to follow if
you start with an initialized repo with a README.
&lt;/p&gt;

&lt;p&gt;
I make the repo public – it's code I'm distributing – nothing to
hide here. If you aren't comfortable with that, just make the repo
private. If you've registered as a teacher with GitHub, you can set up
an organization and you'll be able to set up free private repos within
it. The other downside here is that you'll have to individually give
each student access to the repo. That's a mild annoyance but it only
has to be done once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Teacher use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Next, clone out the repo. &lt;b&gt;&lt;b&gt;BEGINNER NOTE:&lt;/b&gt;&lt;/b&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;b&gt;&lt;b&gt;clone&lt;/b&gt;&lt;/b&gt; button, it says "Clone with SSH." If not, just
click the "Use SSH" link in the same box. Students will clone the
using https.
&lt;/p&gt;

&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git pull&lt;/b&gt;&lt;/b&gt; at the start of class
&lt;/li&gt;
&lt;li&gt;write code throughout class
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;git add&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;git commit&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git push&lt;/b&gt;&lt;/b&gt; at the end of class
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I use a similar flow when I want to add files in my office or at home.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Student use&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;b&gt;&lt;b&gt;git
pull&lt;/b&gt;&lt;/b&gt;. That's all there is to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Thoughts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
That's it. The kids are now using GitHub – they're probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;b&gt;&lt;b&gt;git status&lt;/b&gt;&lt;/b&gt;,
&lt;b&gt;&lt;b&gt;git log&lt;/b&gt;&lt;/b&gt;, and &lt;b&gt;&lt;b&gt;git diff&lt;/b&gt;&lt;/b&gt; to set the stage for step 2 of this
process and beyond.
&lt;/p&gt;

&lt;p&gt;
Since the students aren't adding, committing or pushing, you probably won't
get any errors. 
&lt;/p&gt;

&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven't pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.
&lt;/p&gt;


&lt;p&gt;
I'm happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.
&lt;/p&gt;

&lt;p&gt;
The next step  is having the students add files to a repo. That's the
next post in this series.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>tools</category><guid>http://cestlaz.github.io/posts/sigcse-2017-github-1/</guid><pubDate>Thu, 16 Mar 2017 13:11:00 GMT</pubDate></item><item><title>SIGCSE 2017 - Recap</title><link>http://cestlaz.github.io/posts/sigcse-2017-recap/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
As a high school teacher, I was never able to attend SIGCSE, the
conference of the ACM's Special Interest Group on Computer Science
Education. Between the number of instructional days I would lose and
the cost, I could never justify going. Instead I looked over the
proceedings and read many of the papers.
&lt;/p&gt;

&lt;p&gt;
Now that I'm at Hunter, I was finally able to attend. This year in
Seattle, the conference ran from Wednesday through Saturday. I was
part of a panel on "Tools we can't live without." Over the next few
weeks, I hope to blog about a number of things I thought and talked
with people about over the conference including:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The path I use to teach git and why GitHub a good teaching tool
(my talk).
&lt;/li&gt;
&lt;li&gt;The relationship of different CS Ed stakeholders - teachers,
researchers, organizations, etc.
&lt;/li&gt;
&lt;li&gt;Teaching at the high school level vs college - perceptions and
reality.
&lt;/li&gt;
&lt;li&gt;The challenges of tech tool adoption in schools.
&lt;/li&gt;
&lt;li&gt;What's going on in K12 CS Certification.
&lt;/li&gt;
&lt;li&gt;Maybe some other stuff.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Today, some overall thoughts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;The good&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
As with many conferences, the "hallway track" along with receptions
sponsored by &lt;a href="https://csnyc.org/our-work/cs4all"&gt;the CS4All consurtium&lt;/a&gt;, &lt;a href="http://tealsk12.org"&gt;TEALS&lt;/a&gt;, &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; were terrific. I
was able to finally meet in person many people who I've only known
virtually and got to know many more as well. I left the conference
with a much larger address book and a long list of follow up
items. Being in Seattle, I also enjoyed being able to spend time with
people from &lt;a href="http://tealsk12.org"&gt;TEALS&lt;/a&gt; and &lt;a href="http://code.org"&gt;Code.org&lt;/a&gt;, two of the CS Ed groups working hard
to do some real good (yes - I do like and support these guys even
though I call them out on things I disagree with, but that's the
subject of another post). 
&lt;/p&gt;

&lt;p&gt;
I attended sessions on CS certification, teacher preparation,
assessments, POGIL based instruction to name a few. They ranged from
valuable to interesting and to be honest, a couple of "what were they
thinking" but the overall experience was very much worth the trip. I
also got to speak to a number of wonderful students at the
poster sessions.
&lt;/p&gt;

&lt;p&gt;
The keynotes are also well worth a read (sorry if you don't have ACM
digital library access). &lt;a href="http://dl.acm.org/citation.cfm?id=3025045&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Jeannette Wing&lt;/a&gt; talked about the importance of
probability and statistics in CS Ed, and aspects of  &lt;a href="http://dl.acm.org/citation.cfm?id=3025047&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Gail Chapman&lt;/a&gt;'s talk
"Inspire, Innovate, and Improve…" keynote and &lt;a href="http://dl.acm.org/citation.cfm?id=3025046&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Mitch Resnick&lt;/a&gt;'s
"Fulfilling Papert's Dream" both spoke to the educator inside me. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;The bad&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
The biggest downside to me was that I found very little value added in
a number of the paper sessions over just reading the papers. Part of
this is probably because of my own over-inflated expectations given the
number of years I've waited to attend. Part of it though, was the fact
that sessions were so tightly packed that I didn't have time to follow
up with presenters before having to run to the next
thing. Unfortunately, in some
cases, it was because the presenter merely
"read" the paper much as a professor sometimes just reads the slides
or the book to his class.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Other thoughts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
One paper presentation I very much liked was &lt;a href="http://dl.acm.org/citation.cfm?id=3017701&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692"&gt;Exam Wrappers: Not a
Silver Bullet&lt;/a&gt; presented by &lt;a href="https://michellecraig.github.io/"&gt;Michelle Craig&lt;/a&gt; and &lt;a href="http://pages.cpsc.ucalgary.ca/~bdstephe/"&gt;Ben Stephenson&lt;/a&gt;. I
actually came in late since I was hustling over from the Code.org
lunch. The result was that I didn't actually know what "Exam Wrappers"
were until well after the talk when I ran into &lt;a href="https://twitter.com/jkhuggins"&gt;Jim Huggins&lt;/a&gt;. Exam
wrappers, in short, are merely when you require the students fill out something
for some credit when picking up their exams. The funny thing is that
it's a strategy that high school teachers have used for years without
a special name and we already knew the good and bad of it without the
research but that's not what I want to get at here. What I loved about
the talk, besides the fact that Ben and Michelle are clearly strong
presenters is that this was a negative result that was being
presented. I also loved the fact that they didn't present their
research as gospel but rather pointed out the strengths and weaknesses
of their approach - they made a case to what and why we should pay
attention to and what should be taken with a grain of salt.
&lt;/p&gt;

&lt;p&gt;
This was a major breath of fresh air after being exposed to so much
education 'research' over the course of my life that the author or
presenter felt was just as strong as a mathematical proof rather than
an indication based on a specific experience or small set of
experiences.
&lt;/p&gt;

&lt;p&gt;
I also felt a little weird at times during the week when west coast people seemed
to know me. I know I'm a loud mouthed curmudgeon and I go on my
periodic ed rants but given the dearth of comments on this blog I was
really surprised to get as many as "great to meet you in person after
reading your blog" or "we know you and your work" all week. It was
weird and somewhat humbling.
&lt;/p&gt;

&lt;p&gt;
Finally, another highlight f`or me was that I got to catch up with
some of family.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/sigcse-seattle.jpg" alt="sigcse-seattle.jpg" align="center"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Already planning to submit something to present at SIGCSE 2018 in Baltimore.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>csed</category><category>cseducation</category><category>teaching cs</category><guid>http://cestlaz.github.io/posts/sigcse-2017-recap/</guid><pubDate>Tue, 14 Mar 2017 12:19:18 GMT</pubDate></item><item><title>SIGCSE 2017</title><link>http://cestlaz.github.io/posts/sigcse-2017/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Tomorrow morning I fly out to Seattle for SIGCSE 2017. For those of
you not in the CS Education space, SIGCSE is the ACM (Association for
Computing Machinery) special interest group for computer science education.
&lt;/p&gt;

&lt;p&gt;
I've wanted to go for years but have never been able. It's hard for a
high school teacher to miss a week in mid March, particularly in
places with a school calendar similar to New York. NY city schools are
already closed for a week in February and then Spring Break is right
around the corner. If you're teaching an AP course with the exam in
early May, losing a week in March is really not an option. Even if you
can take the time, you'll probably have to foot the bill out of
pocket. 
&lt;/p&gt;

&lt;p&gt;
Now that I'm at Hunter, I've got more flexibility in terms of schedule
and attending is probably even more important given my current roles.
&lt;/p&gt;

&lt;p&gt;
I'm looking forward to the talks and events but probably even more
looking forward to seeing old friends, meeting new ones and seeing
face to face friends that til now I've only known through the web.
&lt;/p&gt;

&lt;p&gt;
On Saturday I'll be part of a panel (thanks &lt;a href="https://twitter.com/cscheerleader"&gt;Ria&lt;/a&gt;) titled "Tools we
can't live without." I'll probably talk about the way I use git and
GitHub and how I get my students up to speed but there are lots of
tools I can talk about.
&lt;/p&gt;

&lt;p&gt;
I plan to write up a series of posts on how I use GitHub (and how it
evolved from other versioning systems) as well as thoughts about other
tools I've used and some I've struggled with.
&lt;/p&gt;

&lt;p&gt;
If you're going to be at SIGCSE drop me a line, I'd love to connect.
&lt;/p&gt;</description><category>cseducation</category><category>education</category><guid>http://cestlaz.github.io/posts/sigcse-2017/</guid><pubDate>Tue, 07 Mar 2017 21:18:41 GMT</pubDate></item><item><title>Whiteboard interviews</title><link>http://cestlaz.github.io/posts/whiteboard-interviews/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
A few days ago, I saw a &lt;a href="https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process%0A"&gt;piece&lt;/a&gt; on &lt;a href="https://twitter.com/dhh"&gt;David Heinemeier Hansson's&lt;/a&gt; tweet on
whiteboard interviews:
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don't do riddles.&lt;/p&gt;— DHH (@dhh) &lt;a href="https://twitter.com/dhh/status/834146806594433025"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
I'm not a huge fan of the whiteboard interview but I think many of the
tweets missed the point. Most of the whiteboard interviews I'm
aware of involve algorithmic problem solving while the tweets, at
least the ones I've seen all refer to things that indeed one would
look up. Things like API calls - not things that whiteboard interviewers
typically care about.
&lt;/p&gt;

&lt;p&gt;
Tim Bray takes that point of view and shared his thoughts in a
&lt;a href="https://www.tbray.org/ongoing/When/201x/2017/03/04/Whiteboard-Interviews"&gt;recent blog post&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The idea behind the whiteboard interview isn't all bad. The
interviewer has an opportunity to see how the candidate thinks and
works through a problem and in an ideal situation the interviewer is,
at least to a point, coaching the candidate to help them through the
process. It seems to me that the problem lies more in the types of
questions asked and the skill of the interviewer rather than the idea
that candidates work through a problem live.
&lt;/p&gt;

&lt;p&gt;
I'd imagine that whiteboard interview success skew towards candidates
who work well in isolation in a short period of time, have a good
amount of exposure to these types of algorithmic problems. Also those
who have practiced and trained specifically for the interview will
have a huge edge. For people new to the process, it can be very
stressful. 
&lt;/p&gt;

&lt;p&gt;
Once a candidate has accepted a position, they'll likely be working
with a team, with additional resources, and with time to solve
problems. This is a very different environment.  The whiteboard
interview, much like the SAT is thus something of an arbitrary
gatekeeper that a candidate must prepare for and conquer rather than a
skill that they must develop that will make them a more productive
team member.
&lt;/p&gt;

&lt;p&gt;
This whole process tends to advantage those with the time and
background to prepare - this is one of the places where the argument
that whiteboard interview hurt diversity come from.
&lt;/p&gt;

&lt;p&gt;
I could be totally wrong but I seem to recall that the whiteboard
interview, at least in terms of external visibility grew out of the
legendary Google puzzle interview questions. 
&lt;/p&gt;

&lt;p&gt;
A tech giant like Google can interview however they like and they'll
still get the talent. They go to the most selective institutions where
candidates have already been culled for success. If they then interview 100
candidates and 10 of them would be good fits, as long as a couple
thrive through the whiteboard interview process, they'll get their
engineer. They'll miss out on a lot of great talent but they can cast
such a large net they'll fill there seats with productive employees. 
&lt;/p&gt;

&lt;p&gt;
On the other hand, smaller companies will certainly miss out on great
talent if they follow the same approach.
&lt;/p&gt;

&lt;p&gt;
Is there a better way?
&lt;/p&gt;

&lt;p&gt;
Some companies pre-assign mini projects and then discuss that at the
interview. Pairing could also be a lower stress alternative to the
technical interview. Another option would be to look at a candidates
existing projects. 
&lt;/p&gt;

&lt;p&gt;
An interesting question is "why do so many companies use the
whiteboard interview?" I can't say for certain but I wouldn't be
surprised if it was a simple as "because Google does it."
&lt;/p&gt;

&lt;p&gt;
For over 100 years, Stuyvesant high school required students study
mechanical drawing (drafting). The relevance of the subject lessened over the
decades and what was taught in many ways has become a joke. A typical
class during the CAD parts of the class might be going over the
&lt;b&gt;&lt;b&gt;cylinder&lt;/b&gt;&lt;/b&gt; command in CadKey. That's like spending a day studying
the &lt;b&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/b&gt; menu in Microsoft Word in an English class. If you can't
tell, I'm not a fan. Drafting at Stuyvesant is the vestigial organ of
the course of study. 
&lt;/p&gt;

&lt;p&gt;
My point isn't to bash drafting at Stuy but rather that there have
been any number of schools that require their students take drafting
even though it doesn't prepare students for, nor lead them to anything
else in the schools curriculum (which now can be said for Stuy's
drafting requirement). I've spoken to teachers and principals at these
schools and we go back and forth as I press them for the reason for
the requirement and ultimately, they tell me that their school
requires drafting "because Stuyvesant does." 
&lt;/p&gt;

&lt;p&gt;
Why do so many small companies employ the whiteboard interview?
Because the big kids do. The trouble is that the big kids can get away
with it, the smaller players on the other hand, are hurting
themselves. Even the bigger players would be well served to 
try to come up with an interview process that better assesses fit
rather than a course filter that while it does pull in talent misses
talent as well.
&lt;/p&gt;</description><category>cs</category><category>interviews</category><category>jobs</category><guid>http://cestlaz.github.io/posts/whiteboard-interviews/</guid><pubDate>Sun, 05 Mar 2017 13:54:10 GMT</pubDate></item><item><title>Using Emacs - 32 - C++</title><link>http://cestlaz.github.io/posts/using-emacs-32-cpp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;

&lt;p&gt;
The big difference is instead of building on my &lt;a href="https://github.com/zamansky/using-emacs"&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It's all
pulled from the main config with one additional package.
&lt;/p&gt;

&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;b&gt;&lt;b&gt;init.el&lt;/b&gt;&lt;/b&gt; in a
directory off of your home directory named &lt;b&gt;&lt;b&gt;.emacs.d&lt;/b&gt;&lt;/b&gt; and run emacs,
it will install everything and you'll be good to go.
&lt;/p&gt;

&lt;p&gt;
If you've been following this series, the only new package is &lt;a href="https://github.com/leoliu/ggtags"&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Package&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;which-key&lt;/td&gt;
&lt;td class="left"&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;auto-complete&lt;/td&gt;
&lt;td class="left"&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;flycheck&lt;/td&gt;
&lt;td class="left"&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;yasnippet&lt;/td&gt;
&lt;td class="left"&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;ggtags&lt;/td&gt;
&lt;td class="left"&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;color-theme&lt;/td&gt;
&lt;td class="left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;moe-theme&lt;/td&gt;
&lt;td class="left"&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The video also show me using &lt;b&gt;&lt;b&gt;counsel-ag&lt;/b&gt;&lt;/b&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href="http://cestlaz.github.io/posts/using-emacs-6-swiper"&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;b&gt;&lt;b&gt;smartparens&lt;/b&gt;&lt;/b&gt;, &lt;b&gt;&lt;b&gt;hungry-delete&lt;/b&gt;&lt;/b&gt; and
probably a few more.
&lt;/p&gt;

&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;

&lt;p&gt;
If you're an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven't done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;

&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;


&lt;p&gt;
Here's the configuration code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; set up package sources&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt;
	     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Bootstrap `use-package'&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; small interface tweaks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inhibit-startup-message&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;'y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f5&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'revert-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; bring up help for key bindings&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;which-key&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; 
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;which-key-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; Auto completion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;auto-complete&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ac-config-default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-auto-complete-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; on the fly syntax checking&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;flycheck&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-flycheck-mode&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; snippets and snippet expansion&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:init&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; tags for code navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ggtags&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'c-mode-common-hook&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;derived-mode-p&lt;/span&gt; &lt;span class="ss"&gt;'c-mode&lt;/span&gt; &lt;span class="ss"&gt;'c++-mode&lt;/span&gt; &lt;span class="ss"&gt;'java-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ggtags-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;;; Theme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;color-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;moe-theme&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;moe-light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7SQmleA4EMo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-32-cpp/</guid><pubDate>Sat, 04 Mar 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 31 - elfeed part 3 - macros</title><link>http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In &lt;i&gt;part 2&lt;/i&gt; I talked about how I used &lt;a href="https://github.com/abo-abo/hydra"&gt;Hyrdas&lt;/a&gt; to quickly navigate through
elfeed tags. It was a nice step up but the fact that I still had to
manually edit my configuration code for every new tag to update the
hydra was a problem.
&lt;/p&gt;

&lt;p&gt;
Basically, I had to somehow or other, take a list of all the active
tags and with it build a &lt;b&gt;&lt;b&gt;defhydra&lt;/b&gt;&lt;/b&gt; command that will then make my
Hydra.
&lt;/p&gt;

&lt;p&gt;
Fortunately, emacs, being a lisp, has macros. I'm not talking about
keyboard macros which I talked about in &lt;a href="http://cestlaz.github.io/posts/using-emacs-15-macros/#.WLbj5t9idKQ"&gt;episode 15&lt;/a&gt; but rather &lt;a href="http://wiki.c2.com/?LispMacro"&gt;Lisp
style macros&lt;/a&gt;. Macros let you transform code and then execute the
transformed code. 
&lt;/p&gt;

&lt;p&gt;
The example I give in the video:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;infix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;infix&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; evaluates to 11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This transforms the &lt;b&gt;&lt;b&gt;3+8&lt;/b&gt;&lt;/b&gt; into &lt;b&gt;&lt;b&gt;(+ 3 8)&lt;/b&gt;&lt;/b&gt; and then evaluates it to
be 11.
&lt;/p&gt;

&lt;p&gt;
We can use this idea with our Hydra.
&lt;/p&gt;

&lt;p&gt;
We can use the call &lt;b&gt;&lt;b&gt;elfeed-db-get-all-tags&lt;/b&gt;&lt;/b&gt; to get a list of all
the tags in our database. I decided that if I had an uppercase letter
in the tag, I'd use the lowercase version of that letter as my "hotkey"
and if it didn't, I'd just use the first letter.
&lt;/p&gt;

&lt;p&gt;
So, given a tag list of:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;active&lt;/span&gt; &lt;span class="nv"&gt;blogs&lt;/span&gt; &lt;span class="nv"&gt;cs&lt;/span&gt; &lt;span class="nv"&gt;eDucation&lt;/span&gt; &lt;span class="nv"&gt;emacs&lt;/span&gt; &lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;misc&lt;/span&gt; &lt;span class="nv"&gt;sports&lt;/span&gt; &lt;span class="nv"&gt;star&lt;/span&gt; &lt;span class="nv"&gt;tech&lt;/span&gt; &lt;span class="nv"&gt;unread&lt;/span&gt; &lt;span class="nv"&gt;webcomics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'd want a "hotkey" of &lt;b&gt;&lt;b&gt;b&lt;/b&gt;&lt;/b&gt; for logs and &lt;b&gt;&lt;b&gt;d&lt;/b&gt;&lt;/b&gt; for eDucation.
&lt;/p&gt;

&lt;p&gt;
The routine &lt;b&gt;&lt;b&gt;z/hasCap&lt;/b&gt;&lt;/b&gt; tests to see if a tag has a capital letter in
it and &lt;b&gt;&lt;b&gt;z/get-hydra-option-key&lt;/b&gt;&lt;/b&gt; returns the final "hotkey:"
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(defun z/hasCap (s) ""
       (let ((case-fold-search nil))
       (string-match-p "[[:upper:]]" s)
       ))


(defun z/get-hydra-option-key (s)
  "returns single upper case letter (converted to lower) or first"
  (interactive)
  (let ( (loc (z/hasCap s)))
    (if loc
	(downcase (substring s loc (+ loc 1)))
      (substring s 0 1)
    )))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;b&gt;&lt;b&gt;mz/make-elfeed-cats&lt;/b&gt;&lt;/b&gt; takes a list of tags and returns a list of
items where each item is in the form expected by the hydra definition:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +tagname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"tagname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mz/make-elfeed-cats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Returns a list of lists. Each one is line for the hydra configuratio in the form&lt;/span&gt;
&lt;span class="s"&gt;     (c function hint)"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapcar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tagstring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;symbol-name&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;z/get-hydra-option-key&lt;/span&gt; &lt;span class="nv"&gt;tagstring&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		   &lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-search-set-filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +%s"&lt;/span&gt; &lt;span class="nv"&gt;tagstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;tagstring&lt;/span&gt;  &lt;span class="p"&gt;)))&lt;/span&gt;
	  &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Finally, here's our macro:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defmacro&lt;/span&gt; &lt;span class="nv"&gt;mz/make-elfeed-hydra&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="s"&gt;"filter"&lt;/span&gt;
     &lt;span class="o"&gt;,@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mz/make-elfeed-cats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-get-all-tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +star"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Starred"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt; &lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"All"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@1-day-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Today"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="s"&gt;"Quit Elfeed"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The line that starts with &lt;b&gt;*,@*&lt;/b&gt; calls the routine that builds lines
of code for all the tags in the database and the macro leaves me with
the defhydra I need.
&lt;/p&gt;


&lt;p&gt;
I then redefine the hydra every time I need it, just in case tags
changed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(defun mz/make-and-run-elfeed-hydra ()
  ""
  (interactive)
  (mz/make-elfeed-hydra)
  (mz/hydra-elfeed/body))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
and bind &lt;b&gt;&lt;b&gt;mz/make-and-run-elfeed-hydra&lt;/b&gt;&lt;/b&gt; to j and J in my elfeed
keymap (this code goes in the bind section of my use-package elfeed
section):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/make-and-run-elfeed-hydra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As long as I remember to name my tags in a way that they don't
conflict with one another I can quickly navigate all around elfeed.
&lt;/p&gt;

&lt;p&gt;
Macros FTW!!!!
&lt;/p&gt;


&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5zuSUbAHH8c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</guid><pubDate>Wed, 01 Mar 2017 13:00:26 GMT</pubDate></item><item><title>Will we lose CS teachers to industry?</title><link>http://cestlaz.github.io/posts/will-we-lose-cs-teachers-to-industry/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;blockquote&gt;
&lt;p&gt;
If we properly prepare CS teachers, won't they just jump ship and take
tech industry jobs?
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I hear that a lot.
&lt;/p&gt;

&lt;p&gt;
Tech pays big. Teaching? Not so much. Tech workers are respected and
have flexible jobs. Teaching? Again, not so much.
&lt;/p&gt;

&lt;p&gt;
Those chanting these refrains advocate the current simple teacher
"training" - scripted lessons, minimal pedagogical content knowledge,
even less real content knowledge. That  will keep them in the classroom.
&lt;/p&gt;

&lt;p&gt;
They're wrong.
&lt;/p&gt;

&lt;p&gt;
People fearing an exodus of prepared CS teachers don't get
education. True, many young CS teachers will leave the profession but
that's because &lt;b&gt;&lt;b&gt;many young teachers leave the profession&lt;/b&gt;&lt;/b&gt;. Why do young
teachers leave? Regardless of subject area some of the reasons are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;It's much harder than everyone thinks it is
&lt;/li&gt;
&lt;li&gt;Low pay
&lt;/li&gt;
&lt;li&gt;Lack of respect
&lt;/li&gt;
&lt;li&gt;Overworked
&lt;/li&gt;
&lt;li&gt;Lack of autonomy
&lt;/li&gt;
&lt;li&gt;Being scapegoated for poverty
&lt;/li&gt;
&lt;li&gt;It's become about testing, not teaching
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
None of these are unique to computer science teachers so the argument
that CS teachers who know too much will leave is really saying, "we
have to keep our teachers dumb enough to stay - make sure they don't
have outside options" rather than "let's make teaching a desirable
profession to be in."  
&lt;/p&gt;

&lt;p&gt;
Of course, this is bred from a lack of understanding about what drives
teachers. It's typical of politicians and business leaders and short
term temps like TFAers who came in for a cup of coffee and now know
how to solve the education problem.
&lt;/p&gt;

&lt;p&gt;
Teacher don't become teachers to
get rich or to do better than the other guy – I know I didn't. We
enter it to do good - to uplift the have nots. This is why business
models like stack ranking and bonus or merit pay just don't work. A
school is a team and we're all in it together. Our job is to take care
of our kids, not to be better than that other guy. We wish we had more
time to work together and to improve things for our entire population.
&lt;/p&gt;

&lt;p&gt;
Back to computer science.
&lt;/p&gt;

&lt;p&gt;
My contention is that you might lose some teachers to industry but
they either weren't meant to be teachers anyway or they couldn't
afford to be teachers or the system beat them down. None of these are
reasons not to properly prepare them. Besides, all teachers in all
subject areas could work their way into an entry level tech job via a
summer coding boot camp.
&lt;/p&gt;

&lt;p&gt;
We can also look to the past to allay concerns. While it's true that
for hiring purposes, English teachers are a dime a dozen and
candidates typically
have fewer outside options (although great English teachers are harder
to find), Math and Science teachers generally have options. I know
many top Math and Science teachers who could easily get non teaching
jobs - the Math teachers in finance the science, certainly in
pharmaceutical companies over in NJ. These options exist yet we manage
to populate our classes with teachers. True, it's difficult at times,
particularly in Physics, but these are due to the lack of respect
teaching gets as a profession.
&lt;/p&gt;

&lt;p&gt;
If we prepare CS teachers properly, yes, we'll lose some, but we'll
keep the ones we're supposed to or if we lose them it will be due to
other factors. Additionally, by having proper CS teacher
preparation programs, we'll also provide an entry path to those people
meant to be teachers but prior had no way of getting in.
&lt;/p&gt;

&lt;p&gt;
As a nation, we're moving away from prepared, knowledgeable teachers
and towards drill-masters. Let's not let CS Education go the way of
all ed.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>education</category><category>policy</category><guid>http://cestlaz.github.io/posts/will-we-lose-cs-teachers-to-industry/</guid><pubDate>Mon, 27 Feb 2017 11:41:27 GMT</pubDate></item><item><title>Using Emacs - 30 - elfeed part 2 - Hydras</title><link>http://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In &lt;a href="http://cestlaz.github.io/posts/using-emacs-29%2520elfeed/"&gt;part 1&lt;/a&gt;, I talked about &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;, a really awesome feed reader for
emacs. Generally, I'm really liking it but there's been one problem -
not being able to navigate quickly between groups of feeds with a
keystroke or two.
&lt;/p&gt;

&lt;p&gt;
It's emacs so there has to be a solution.
&lt;/p&gt;

&lt;p&gt;
Enter &lt;a href="https://github.com/abo-abo/hydra"&gt;hydra&lt;/a&gt; - a terrific emacs package from the same guy who brought
us &lt;a href="https://github.com/abo-abo/hydra"&gt;swiper&lt;/a&gt;, another one of my favorite emacs packages.
&lt;/p&gt;

&lt;p&gt;
Basically, Hydra allows us to create Hydras - a collection of emacs
commands tied o a single prefix along with a nice interface and help
system.
&lt;/p&gt;

&lt;p&gt;
Truth be told, I don't use hydra as much anymore since &lt;a href="https://github.com/justbur/emacs-which-key"&gt;which-key&lt;/a&gt;
does such a great job most of the time. Which-key, however, is no help
here.
&lt;/p&gt;

&lt;p&gt;
Here's the code to install hydra along with a some of sample Hydra's
I use:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;hydra&lt;/span&gt; 
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for modes that toggle on and off&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"toggle"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="nv"&gt;abbrev-mode&lt;/span&gt; &lt;span class="s"&gt;"abbrev"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="nv"&gt;flyspell-mode&lt;/span&gt; &lt;span class="s"&gt;"flyspell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="nv"&gt;toggle-debug-on-error&lt;/span&gt; &lt;span class="s"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;fci-mode&lt;/span&gt; &lt;span class="s"&gt;"fCi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt; &lt;span class="nv"&gt;auto-fill-mode&lt;/span&gt; &lt;span class="s"&gt;"fill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="nv"&gt;toggle-truncate-lines&lt;/span&gt; &lt;span class="s"&gt;"truncate"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt; &lt;span class="nv"&gt;whitespace-mode&lt;/span&gt; &lt;span class="s"&gt;"whitespace"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"cancel"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for navigation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x j"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;gotoline&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;:pre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;linum-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="nv"&gt;:post&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;linum-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="s"&gt;"goto"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"top"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"bottom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;move-to-window-line-top-bottom&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"middle"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;end-of-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;recenter-top-bottom&lt;/span&gt; &lt;span class="s"&gt;"recenter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="nv"&gt;next-line&lt;/span&gt; &lt;span class="s"&gt;"down"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forward-line&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="s"&gt;"up"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt; &lt;span class="nv"&gt;goto-line&lt;/span&gt; &lt;span class="s"&gt;"goto-line"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Hydra for some org-mode stuff&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;hydra-global-org&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"Org"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-start&lt;/span&gt; &lt;span class="s"&gt;"Start Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-stop&lt;/span&gt; &lt;span class="s"&gt;"Stop Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt; &lt;span class="nv"&gt;org-timer-set-timer&lt;/span&gt; &lt;span class="s"&gt;"Set Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; This one requires you be in an orgmode doc, as it sets the timer for the header&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt; &lt;span class="nv"&gt;org-timer&lt;/span&gt; &lt;span class="s"&gt;"Print Timer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; output timer value to buffer&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-clock-in&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"Clock-In"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt; &lt;span class="nv"&gt;org-clock-out&lt;/span&gt; &lt;span class="s"&gt;"Clock-Out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; you might also want (setq org-log-note-clock-out t)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="nv"&gt;org-clock-goto&lt;/span&gt; &lt;span class="s"&gt;"Clock Goto"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; global visit the clocked task&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="nv"&gt;org-capture&lt;/span&gt; &lt;span class="s"&gt;"Capture"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;rg-capture-goto-last-stored&lt;/span&gt; &lt;span class="s"&gt;"Last Capture"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Take a look at the &lt;a href="https://github.com/abo-abo/hydra"&gt;Hydra&lt;/a&gt; home page for detailed information.
&lt;/p&gt;

&lt;p&gt;
With Hydra installed, I can creat one for navigating in elfeed:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defhydra&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="s"&gt;"filter"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +cs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"cs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +emacs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"emacs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +education"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"education"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago +star"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Starred"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt; &lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@6-months-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"All"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-set-filter&lt;/span&gt; &lt;span class="s"&gt;"@1-day-ago"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Today"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="s"&gt;"Quit Elfeed"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt; &lt;span class="nv"&gt;:color&lt;/span&gt; &lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and add a binding to the elfeed key map:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;elfeed-search-mode-map&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;mz/hydra-elfeed/body&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This isn't the actual Hydra I use – we'll get to that in the next
installment where I'll show how to make a Hydra on the fly that
contains keys for all your elfeed tags but this is a reasonable example.
&lt;/p&gt;

&lt;p&gt;
Here's the video:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tjnK1rkO7RU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</guid><pubDate>Sat, 25 Feb 2017 13:00:26 GMT</pubDate></item><item><title>Using Emacs - 29 -elfeed part 1</title><link>http://cestlaz.github.io/posts/using-emacs-29%20elfeed/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Since the demise of Google Reader, I've been using &lt;a href="http://feedly.com"&gt;Feedly&lt;/a&gt; to read my
streams. Feedly's a nice product and it's been working well for me for
quite some time. 
&lt;/p&gt;

&lt;p&gt;
A few days ago, I decided to see what emacs had to offer on the feed
reader front. One solution was Gnus but then I've never been able to
get my head around Gnus. Another was &lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I thought I'd give elfeed a go. 
&lt;/p&gt;

&lt;p&gt;
Combined with elfeed-goodies and elfeed-org it's a pretty nice
solution. You can easily search by either keywords or tags and tags
are particularly easy to set up with elfeed-org. 
&lt;/p&gt;

&lt;p&gt;
If I want to display all the items from the last month, I hit &lt;b&gt;&lt;b&gt;s&lt;/b&gt;&lt;/b&gt; (for
search) and enter the query:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@6-months-ago
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For only unread posts:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@6-months-ago +unread
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For unread posts tagged emacs:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@6-months-ago +unread +emacs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And for everything in the past 24 hours, read or not:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@1-day-ago
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's pretty easy and pretty slick. The only thing missing is easy
single key navigation. There's one solution to that problem over at
&lt;a href="http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/"&gt;Pragmatic Emacs&lt;/a&gt; and I'll present another one in the next two posts.
&lt;/p&gt;

&lt;p&gt;
I'm using some of the code from pragmatic emacs (the functions that start
with &lt;b&gt;&lt;b&gt;bjm&lt;/b&gt;&lt;/b&gt;) which makes things easier when sharing the elfeed
database on Dropbox (see the Pragmatic Emacs post above for details) and also a couple of routines I found via web
search). 
&lt;/p&gt;

&lt;p&gt;
Here's my basic configuration:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;elfeed-db-directory&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/shared/elfeeddb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;elfeed-mark-all-as-read&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mark-whole-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-untag-all-unread&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
&lt;span class="c1"&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-load-db-and-open&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Wrapper to load the elfeed db from disk before opening"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-search-update--force&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;;write to disk when quiting&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Wrapper to save the elfeed db to disk before burying buffer"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-db-save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;quit-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;



&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;'elfeed-toggle-star&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-expose&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'elfeed-search-toggle-all&lt;/span&gt; &lt;span class="ss"&gt;'star&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:map&lt;/span&gt; &lt;span class="nv"&gt;elfeed-search-mode-map&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Q"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;bjm/elfeed-save-db-and-bury&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;elfeed-toggle-star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed-goodies&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-goodies/setup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;elfeed-org&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elfeed-org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;rmh-elfeed-org-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/shared/elfeed.org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check out elfeed and make sure to go to the links provided on the main
&lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt; page.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pOFqzK1Ymr4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-29%20elfeed/</guid><pubDate>Wed, 22 Feb 2017 13:00:26 GMT</pubDate></item><item><title>Quality Devs and Coding Contests</title><link>http://cestlaz.github.io/posts/quality-devs-and-coding-contests/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I've been planning to put together a response to &lt;a href="https://twitter.com/alfredtwo"&gt;Alfred Thompson&lt;/a&gt;'s
recent post - &lt;a href="http://blog.acthompson.net/2017/02/software-developersquantity-vs-quality.html"&gt;Software Developers - Quantity vs Quality&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
TL;DR, although it isn't really long and I do encourage you to read
Alfred's post: a couple of articles talk about how the U.S. has the most
people entering CS competitions like HackerRank but Americans are not
at the top of the leaderboard. does this mean that there's less talent
in America? Does it even matter?
&lt;/p&gt;

&lt;p&gt;
Before getting to "does it matter," I looked over at the Kaggle
leaderboards. Looking at their top 10, 2 were from the US - no other
country had more than 1. The 11th placing competitor was also from the
US and then 12 was from China, giving them 2 in the top 12.  I also
looked at recent &lt;a href="http://stats.ioinformatics.org/delegations/2016?sort=total_desc"&gt;IOI results&lt;/a&gt; and a quick glance seems to indicate that
the USA seems to do reasonably well. In short, if you buy into ranking
a country by these types of individual results on specific
competitions then we're doing fine.
&lt;/p&gt;

&lt;p&gt;
But, does filling the leaderboard mean a country's producing the best
tech talent? Probably not.
&lt;/p&gt;

&lt;p&gt;
Coding competitions focus on a specific skill set. There are problem
solving aspects but they also require speed, knowledge of data
structures and algorithms, and, yes, even accurate, fast typing
skills. They also require you work alone. They don't encourage well
designed, architected, or written code, working on existing code bases
or working with a team. 
&lt;/p&gt;

&lt;p&gt;
Over the years, I've known some very smart and talented individuals
who've excelled at these types of competitions. If you extend the pool
to math and science competitions, I've known quite a few. These
individuals have by and large done well for themselves but as a group,
you couldn't call them more successful than any other subset of my
former students. A number of them have gone on and are doing well as
professors or programmers but, by and large, they're not the ones
who've gone on to found companies and provide jobs for scores or even
hundreds of other people and they're not necessarily the ones who've
led teams that have developed major platforms and projects&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/quality-devs-and-coding-contests/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
I don't argue that people who populate competition leaderboards are
talented and a necessary part of our tech ecosystem but they're only a
part. I probably want one of these programmers on my team, but not as
the entire team (see Fake Grimlock's laws of startups - &lt;a href="http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team"&gt;law 9&lt;/a&gt;).
&lt;/p&gt;


&lt;div align="center"&gt;
&lt;a href="http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team"&gt;
&lt;img width="30%" src="http://media3.cdn.builtinchicago.org/sites/default/files/imagecache/Original/images/BATMAN-THEN-ROBIN.jpg"&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;
Competitive programming is a piece of the puzzle as competitive
programmers are a part of the population. So are project based events
like &lt;a href="https://dreamitcodeitwinit.wordpress.com/"&gt;Dream it. Code it. Win it.&lt;/a&gt;, science fairs, and hackathons, which
can be either cooperative, competitive, or a combination.
&lt;/p&gt;

&lt;p&gt;
What do we want? Balance. I think the Stuy program does it pretty
well. StuyCS graduates who wish to take part in coding competitions
can do so but if they want to excel at it, they have to work at it on
their own time. At the same time, the students learn how to work in
teams and take a project from idea to delivery all the while learning
some good academic CS and software engineering practices. They'll
learn more in college on the academic side and the rest on the
job. I'd love to see better balance in the colleges between CS
programs preparing kids for graduate programs and CS programs that
prepare kids for industry. I'd also love to see CS minors that were
more targeted towards CS+X rather than half of a CS major targeting
students going to grad schools. 
&lt;/p&gt;

&lt;p&gt;
I also think there's a tremendous opportunity for community colleges
to fill the role currently occupied by code schools. They could more
easily strike a balance between academic depth and practical
preparation.
&lt;/p&gt;

&lt;p&gt;
I'm working on building Hunter College's honors CS program and while I
can't move the Hunter curriculum, I'm seeking that balance in my own
way.
&lt;/p&gt;

&lt;p&gt;
Will we get there? I don't know. Given the way education works, I
figure at some point people will decide that we have to have more of a
presence on the CS leaderboards and we'll see programs pop up with
that in mind. I have no doubt that when that happens, we'll see many
more Americans near the top. We have a large enough population that
talent shouldn't be in question. This will be great for students to
whom these competitions attract. It won't do much, however for the
rest of the students. I'm not really concerned one way or
another. Unlike math, where there's a natural progression through K12
math classes with math team and math competitions being a natural add
on, the driving forces in CS - be they from industry, government, or
academia don't seem to have partaken in any code competition Kool-Aid
so code competitions won't become a driving force in CS ed any time
soon. 
&lt;/p&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/quality-devs-and-coding-contests/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;Some
are but probably a smaller percent from that group than from the
general pool.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>education</category><guid>http://cestlaz.github.io/posts/quality-devs-and-coding-contests/</guid><pubDate>Sun, 19 Feb 2017 21:53:56 GMT</pubDate></item></channel></rss>