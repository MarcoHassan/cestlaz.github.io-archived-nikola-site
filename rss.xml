<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z</title><link>http://cestlaz.github.io/</link><description>C'est la Z</description><atom:link rel="self" href="http://cestlaz.github.io/rss.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 15 Jun 2017 20:26:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs - 34 - ibuffer and emmet</title><link>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;

&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you'll start
to accumulate buffers. Last time, I talked about using &lt;a href="http://cestlaz.github.io/posts/using-emacs-33-projectile-jump"&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;

&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;b&gt;&lt;b&gt;list-buffers&lt;/b&gt;&lt;/b&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the list-buffers buffer brings up
more details. 
&lt;/p&gt;

&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;b&gt;&lt;b&gt;h&lt;/b&gt;&lt;/b&gt; in the buffer
brings up help). 
&lt;/p&gt;

&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href="http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html"&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration (mostly stolen from Owen):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x C-b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-saved-filter-groups&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dired"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dired-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^.*org$"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;web-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;js2-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"shell"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;eshell-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;shell-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mu4e"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"\*mu4e\*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"programming"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;python-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;c++-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emacs"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*scratch\\*$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"^\\*Messages\\*$"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'ibuffer-mode-hook&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-auto-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ibuffer-switch-to-saved-filter-groups&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; don't show these&lt;/span&gt;
					&lt;span class="c1"&gt;;(add-to-list 'ibuffer-never-show-predicates "zowie")&lt;/span&gt;
&lt;span class="c1"&gt;;; Don't show filter groups if there are no buffers in that group&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-show-empty-filter-groups&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Don't ask for confirmation to delete marked buffers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ibuffer-expert&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The video also shows &lt;a href="https://github.com/smihica/emmet-mode%0A"&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href="https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s"&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It's a real winner.
&lt;/p&gt;


&lt;p&gt;
Here's the config I'm using:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;emmet-mode&lt;/span&gt;
&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
&lt;span class="nv"&gt;:config&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'sgml-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'web-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'css-mode-hook&lt;/span&gt;  &lt;span class="ss"&gt;'emmet-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; enable Emmet's css abbreviation.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Check them both out:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yUfA-7wWNKA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid><pubDate>Thu, 15 Jun 2017 19:00:26 GMT</pubDate></item><item><title>CS Educators StackExchange</title><link>http://cestlaz.github.io/posts/cs-educators-stackexchange/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The &lt;a href="https://cseducators.stackexchange.com/"&gt;CS Educators StackExchange&lt;/a&gt; is now in public beta. For those of you
who are not in tech, &lt;a href="https://en.wikipedia.org/wiki/Stack_Exchange"&gt;StackExchange&lt;/a&gt; is a network of question answering
sites. &lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; is probably the most famous - many peoples go to
site for computer science and programming questions and answers. 
&lt;/p&gt;

&lt;p&gt;
During this period of public beta the site will be working on defining
itself and also on developing a critical mass of users. I hope the
site succeeds and I encourage everyone to &lt;a href="https://cseducators.stackexchange.com/"&gt;check it out&lt;/a&gt;, ask questions,
answer some and let's all see where this goes.
&lt;/p&gt;

&lt;p&gt;
An interesting difference between StackExchanges and most other
communities is that it's a question answering site not a discussion
board or shared resource collection. This works well for programming
questions where you can share a code snippet, algorithm, or derivation
which can be shown to be correct. We'll see how it works for something
more nebulous like education. The voting system should help but the CS
education community is already awash with anointed thought leaders
with little or no teaching or CS experience. It will also be
interesting to see how things develop given that, by and large, K12
educators know a whole lot more about teaching than those in higher ed
while the on the flip side, the professors are generally much
more knowledgeable about the subject matter and then you have the
education researcher which is another beast altogether. 
&lt;/p&gt;

&lt;p&gt;
Part of me thinks that discussion could be more valuable than answers
and in fact, I'm finding the comments which are more discussion like
to be more interesting, but that's just me. 
&lt;/p&gt;

&lt;p&gt;
A side thing I noticed was that the moderators have taken to asking
contributors not to link to other sites but to either write self
contained answers. I understand this desire to have everything under
your roof but it strikes me as wanting to use their silo instead of
someone else's silo. This happened to me on an answer because I had
already written a series of blog posts on the subject. Admittedly, I
just put up four links and could have (and will) provide more context
but I also had no desire to rewrite my content just to share info that
was already out there. Likewise there was a question that was posed on
A* which led to &lt;a href="http://cestlaz.github.io/posts/a-star-is-born/"&gt;this post&lt;/a&gt;. I wanted to share my thoughts with "my"
community as well as on the stackexchange and didn't want to have to
do the same thing twice.
&lt;/p&gt;

&lt;p&gt;
One of the moderators claims is that a link might not be
permanent. This is true. My blog might not be around in 5 years but
then the CS Educators StackExchange might not as well. I hope both are
around and thriving but time will tell.
&lt;/p&gt;

&lt;p&gt;
This also got me thinking about the  mish mash of
CS Educator communities floating around. I'm familiar with and a
member of:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A few Facebook groups (CS Education, CS Education Discussion, AP
Comp Sci, APCSP)
&lt;/li&gt;
&lt;li&gt;The CS Education subreddit
&lt;/li&gt;
&lt;li&gt;A couple of mailing lists (the College Board AP Community, SIGCSE)
&lt;/li&gt;
&lt;li&gt;A few blogs are kind of communities in that there's a core group of
readers but discussion is pretty sparse.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Are there others I'm not aware of?
&lt;/p&gt;

&lt;p&gt;
This has led to a lot of duplication and some fragmentation and there
is a concern about silos. The Facebook groups are very much a silo and
to a certain extent so are the mailing lists. I guess the SIGCSE list
is more community run than the College Board one, but still. Blogs are
our own personal islands so while I wish more people would both blog
and comment about CS Ed they're not necessarily open and permanent
either. At least with some blogs and with the subreddit and
stackexchange we can, if we want, download all of the data if we want
and preserve it for posterity.
&lt;/p&gt;

&lt;p&gt;
I don't know if there's a solution - maybe we should set up a &lt;a href="https://github.com/discourse/discourse"&gt;discourse&lt;/a&gt;
instance - something really open and accessible.
&lt;/p&gt;

&lt;p&gt;
In any event, please do check out the &lt;a href="https://cseducators.stackexchange.com/"&gt;CS Educators StackExchange&lt;/a&gt; and
let's all help it become the best question answering resource it can
be for our community.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>community</category><category>CS Education</category><guid>http://cestlaz.github.io/posts/cs-educators-stackexchange/</guid><pubDate>Thu, 15 Jun 2017 11:57:02 GMT</pubDate></item><item><title>Disclosing Bugs - requiring a project roadmap</title><link>http://cestlaz.github.io/posts/disclosing-bugs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over on Facebook, a fellow CS educator &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://cestlaz.github.io/posts/disclosing-bugs/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; made a comment on something he
wanted to try with his students this summer: having the students
pre-disclose bugs when they submit their projects.
&lt;/p&gt;

&lt;p&gt;
The post was asking for any links to "the literature." I can't speak
to that but I I've done something similar to what the post was asking
about so, as per usual, I thought I'd write about it here. It may not
be "research" but I'm more interested in teacher practices than ivory
towers anyway so here goes…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
At a very basic level, I ask my students to provide a roadmap to any
project they submit - usually in a readme file. I basically ask:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;How to use the project
&lt;/li&gt;
&lt;li&gt;What's cool and I should make sure to check out
&lt;/li&gt;
&lt;li&gt;What doesn't work, where were the sticking points and what's the
status.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I tell my students that when I test the project, I'm not "out to get
them" and by their telling me how to navigate the project, it makes
sure I see things in the best possible light. I also tell them that I
will be more harsh on bugs that they don't tell me about -
particularly bugs that only occur some of the time.
&lt;/p&gt;


&lt;p&gt;
I also encourage (and sometimes require) that students maintain a
changelog in their repo and also sometimes encourage them to have a
todo list and list of bugs and for longer projects, I expect to see
these and the readme updated over the course of the project (which
should always be up to date on &lt;a href="https://cestlaz.github.io/posts/sigcse-2017-github-4"&gt;GitHub&lt;/a&gt;, Dropbox or wherever the project
is living). 
&lt;/p&gt;

&lt;p&gt;
When the students provide a good write up it makes evaluating the
project much easier.
&lt;/p&gt;


&lt;p&gt;
When students buy in, they're hopefully thinking more deeply about
their projects in terms of design and implementation and also from the
point of view of someone else using their product. When they maintain
the readme and other files over time, it also enables me to better
support them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
So, does this work? Yes but with some caveats. It works better once
the class and teacher know each other. If the students trust the
teacher they're more likely to be open and honest when they write up
the project. On the other hand, there will always be some students to
"phone it in" and do the bare minimum in terms of writing up their
projects.
&lt;/p&gt;

&lt;p&gt;
The bottom line is that having the students do this is has a low cost
and is beneficial to both the students and the teacher. When it works,
it's great and when it doesn't, it's still pretty good.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://cestlaz.github.io/posts/disclosing-bugs/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I'm not sharing names from the Facebook post because it was
made in a semi-private forum and I haven't asked permission.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>teaching</category><guid>http://cestlaz.github.io/posts/disclosing-bugs/</guid><pubDate>Tue, 13 Jun 2017 20:30:27 GMT</pubDate></item><item><title>A* is born</title><link>http://cestlaz.github.io/posts/a-star-is-born/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Over on the &lt;a href="https://cseducators.stackexchange.com/"&gt;CS Educator StachExchange&lt;/a&gt;, which is in private beta for a
few more days, I saw a post asking about how to introduce the &lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A*
search algorithm&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I taught A* as part of the APCS class at Stuy so I thought I'd talk
about what I did here.
&lt;/p&gt;

&lt;p&gt;
Some time around mid year, we get to intermediate recursion. This is
about the time, give or take, when we talk about the nlogn sorts.
&lt;/p&gt;

&lt;p&gt;
We also build a recursive maze solver. It's a nice algorithm and a
nice little program. It's around 15 lines of code to perform a
recursive depth first search:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/astar/dfs.gif" alt="dfs.gif" align="center" height="200px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The basic algorithm is:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* solve the maze from an x,ylocation */&lt;/span&gt;
&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Yay&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;wall&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;
     &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's a nice lesson because in addition to all the recursion stuff, we
also get to talk about state space, state space search, backtracking,
efficiency concerns and much more. After we finish the maze solver, we also talk about
other problems that can be similarly examined using state-space search
like the knights tour and N-queens problems. 
&lt;/p&gt;

&lt;p&gt;
A month or so later, when we're learning about stacks and queues as
data structures, we revisit the maze solver. This time we solve the
problem in a more general way. We talk about using a data structure to
hold the set of nodes that we're aware of and that we want to visit
next. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;goal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;adjacent&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;isn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;yet&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;
     &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As we write the solution, we see that using a queue for this
data structure yields a breadth first search:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/astar/bfs.gif" alt="bfs.gif" align="center" height="200px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
while using a stack yields depth first. 
&lt;/p&gt;

&lt;p&gt;
All of this leads to a discussion as to how deciding on which
locations to look at next can greatly influence the steps to the
exit. From here it's easy to see that you can use a heuristic to order
the nodes in our data structure so that we explore "better"
possibilities first. The data structure becomes a priority queue and
we finally get to both "best first" and A* search:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/astar/astar.gif" alt="astar.gif" align="center" height="200px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It's a nice sequence of lessons, albeit lessons spread out over
months. The end result is that the students see both the need and
motivation for something like A* and they see that it's not hard to
implement. One basic routine where you can plug in one of three data
structures - stack, queue, or priority queue to get very different
results.
&lt;/p&gt;</description><category>algorithms</category><category>cs</category><category>data structures</category><category>programming</category><guid>http://cestlaz.github.io/posts/a-star-is-born/</guid><pubDate>Mon, 05 Jun 2017 22:42:55 GMT</pubDate></item><item><title>Python - Editor or IDE</title><link>http://cestlaz.github.io/posts/python-editors/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Earlier today I read Garth Flint's latest post on &lt;a href="https://gflint.wordpress.com/2017/05/25/python-editors-simple-wins/%0A"&gt;choosing a Python
environment for his classes&lt;/a&gt;. While our classes and populations are
different it looks like Garth and I share a lot of thoughts on the
subject.
&lt;/p&gt;

&lt;p&gt;
I started to write a comment to leave on Garth's blog but since it was
getting a little long I thought I'd write it up as a post.
&lt;/p&gt;

&lt;p&gt;
The question of development environment can be an important one and
can make a big difference. When I designed the intro course at Stuy,
the fact that Dr. Scheme existed made the use of Scheme in the class
an option. Without it as a supportive and simple environment for the
students I probably wouldn't have been able to use Scheme even though
I really liked it as a teaching and learning tool.
&lt;/p&gt;

&lt;p&gt;
Garth writes about issues relating to choosing a local development
environment so that's what I'm going to stick to here. If you want an
online environment check out &lt;a href="http://codesters.com"&gt;Codesters&lt;/a&gt; - a terrific online Python
environment with lots of educational support materials and features
and &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt; - an online environment that supports many languages and
is also developing great teacher and class support – I very much like
both of these platforms.
&lt;/p&gt;

&lt;p&gt;
The first question is editor or IDE?
&lt;/p&gt;

&lt;p&gt;
As a user, I'm very pro editor. Learn a tool that you can customize to
your tastes and that will work for all sorts of text editing chores
from coding to document preparation to scheduling and more and you're
in great shape. Personally, I'm an &lt;a href="http://cestlaz.github.io/stories/emacs"&gt;Emacs wonk&lt;/a&gt; but there are other
choices as well.
&lt;/p&gt;

&lt;p&gt;
As a teacher, though, Emacs or another programmers editor can be
overwhelming for younger students and rank beginners. 
&lt;/p&gt;

&lt;p&gt;
This can make IDEs attractive.
&lt;/p&gt;

&lt;p&gt;
Some IDEs are too big and cumbersome and can add even more cognitive
load than an editor - think Eclipse for Java development. If you think
writing
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
is a lot of overhead, just wait until you have a novice try to start a
Java project in Eclipse.
&lt;/p&gt;

&lt;p&gt;
Other IDEs are more streamlined. One common choice is
Idle. It's big advantage is that it's always available and is "part"
of Python. On the other hand, it doesn't seem to add much to a bare
editor and I've found that it can be somewhat confusing.
&lt;/p&gt;

&lt;p&gt;
Garth seems to have settled on &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from &lt;a href="https://jetbrains.com"&gt;JetBrains&lt;/a&gt;. It's pretty
streamlined and really easy to get up and running. JetBrains also
provides a free community edition as well as a heavier professional
one available for purchase. Garth notes that it's a Python only IDE
but JetBrains has similar IDEs for a whole bunch of languages and I
seem to recall you can add plugins across their IDEs to basically make
them multi-language development environments.
&lt;/p&gt;

&lt;p&gt;
I really like the JetBrains products and if I used an IDE I'm pretty
sure I'd use their products. As a teacher though, I find their IDEs a
little too powerful for my tastes. I want a learner IDE to provide the
bare minimum of features - an interactive REPL, a code window, run and
debug buttons, some completion and help - but to make those features
really easy to use. JetBrains does a little too much. 
&lt;/p&gt;

&lt;p&gt;
What I ended up using in the past is &lt;a href="http://drpython.sourceforge.net/"&gt;Dr Python&lt;/a&gt;. For me it hit the
sweet spot. As an added bonus we were already using Dr. Racket (nee
Dr. Scheme) and Dr. Java so our students had a similar environment
across languages and even NetLogo looked and behaved similarly. 
&lt;/p&gt;

&lt;p&gt;
Is there a right answer? Probably not. Just as with choosing a first
language there are always trade offs. Besides, if you don't have the
right solution, there will be another one next week. Just recently I
saw &lt;a href="http://thonny.org/"&gt;this project&lt;/a&gt;. A new beginners IDE for python. It looks interesting
and worth checking out.
&lt;/p&gt;

&lt;p&gt;
The right IDE can make a big difference while keeping the overhead low
and giving just the right amount of support. For me, the last time
around it was Dr. Python. For Garth, it looks like PyCharm fits the
bill. Looking at the overall plan, I usually start the kids off with a
simple learners IDE and then transition them to a programmers editor
like Emacs as they gain more comfort and experience.
&lt;/p&gt;

&lt;p&gt;
As a postscript, let me share these links on how I use Emacs for
Python development (each with a video) as well as my series on how I
use Emacs in general:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs/"&gt;http://cestlaz.github.io/stories/emacs/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/using-emacs-12-python"&gt;http://cestlaz.github.io/posts/using-emacs-12-python&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/posts/using-emacs-13-yasnippet"&gt;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>teaching</category><category>tools</category><guid>http://cestlaz.github.io/posts/python-editors/</guid><pubDate>Thu, 25 May 2017 19:47:37 GMT</pubDate></item><item><title>Designing a course with constraints</title><link>http://cestlaz.github.io/posts/design-course-with-constraints/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
One of the hats I wear at Hunter is to build a new &lt;a href="https://cestlaz.github.io/posts/2016-03-29-hunter-cs.html"&gt;CS Honors program&lt;/a&gt;
and to bring my particular brand of insanity to &lt;a href="https://cestlaz.github.io/posts/hunter-cs-important"&gt;Hunter College CS&lt;/a&gt; as a
whole.
&lt;/p&gt;

&lt;p&gt;
Yesterday was my last class for the semester so I thought I'd write a
bit about the course.
&lt;/p&gt;

&lt;p&gt;
For the Fall semester, I taught an intro programming course to the
entire cohort. For some in the cohort, this was their first exposure
to CS. Others had one or more classes under their belt. It was a
Python based programming class and a big part of it was to start
building the cohort into a community. I'm going to work on tweaking
what I taught for next time around but the constraints of designing
such a course are pretty common – an intro course where the students
all want to be there the level of previous experience varies to some degree.
&lt;/p&gt;

&lt;p&gt;
Second semester was more of a challenge. The "next" course was CSCI
135, CS 100 - like APCS but in C++. I could teach that but since some
of my students had APCS credit, they didn't need 135. This would break
up the group. There was also the issue of the students getting credit
for the course without showing any proficiency in C++.
&lt;/p&gt;

&lt;p&gt;
Fortunately, Hunter requires students in 135 to take CSCI 136. A 1
credit programming lab. It meets once a week in a computer lab and the
students complete a weekly programming assignment. The lab meets for 2
hours. The instructor goes over anything that's needed for the lab
that hasn't been covered yet and then the students work independently
(with the instructors support) on the lab. Overall it works well. It
makes sure the students are spending at least a couple of hours a week
coding in a supported environment.
&lt;/p&gt;


&lt;p&gt;
How did 136 help me? I taught a 3 credit course where 1 day was
basically the lab component (what the students were to do in 136) and
one day was enrichment - the stuff I was going to do with them. This
enabled us keeping the cohort together and it also made sure that by
taking the class, the honors cohort members with AP credit would
indeed get up to speed in C++.
&lt;/p&gt;

&lt;p&gt;
I was happy with the basic structure. I was able to cover some topics
in project development, testing, debugging, and software engineering but the
designing and teaching the class proved to be challenging for a number
of reasons.
&lt;/p&gt;

&lt;p&gt;
One was timing. The lab class meets 1 day a week for 1 hour. My class,
2 days a week for 1 hour 15. This meant that if we were to keep the
lab to one day either the students would have less time or I'd have to
impose on them to stay late or come early. I wasn't happy with that
but given the inconsistency in the way the other sections handled lab
timings, I think it worked out OK.
&lt;/p&gt;

&lt;p&gt;
Some of the other difficulties included:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;The language was C++:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Since the labs were to be done in C++, I had to use that as the
language for the class. That meant no "fun" libraries or frameworks.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;The labs were solo assignments:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Since the labs were solo projects and there was one per week it made
it very difficult to structure group experiences. I wanted to cover
things like group development, code review, working off of other
peoples code bases but this proved difficult with an outside separate
lab being handed down each week.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Someone else dictated the language sequence:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
The labs were designed to support what the students were learning in
135 and were only distributed a day or two before the week was to
start. This meant that I couldn't plan too far ahead and had to adjust
frequently. This should be easier next year.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Labs didn't match the supplemental material:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
The best example of this was when we were talking about testing. We
ended up using &lt;a href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt; as a testing framework. The problem was that
right afterwards the lab (and also 135 project) didn't lend themselves
to using a testing framework like catch. 
&lt;/p&gt;

&lt;p&gt;
There were more challenges but overall I think the class went fairly
well. I'll know more when I get feedback from the students and when we
all look back next year with some perspective.
&lt;/p&gt;

&lt;p&gt;
It's been an interesting experience designing a class that had to
interleave with another, existing class. I've designed many classes
over the years and I know that whatever you plan, it probably changes
once you're actually in the classroom and working with the kids, or as
Mike Tyson said: "Everyone has a plan until they get punched in the
mouth." This has been a little more of a challenge but I think the
first go through went well and that the course will get better and be
better defined as we go through a couple more iterations. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>curriculum</category><category>teaching</category><guid>http://cestlaz.github.io/posts/design-course-with-constraints/</guid><pubDate>Fri, 19 May 2017 15:38:20 GMT</pubDate></item><item><title>It feels good to be helpful</title><link>http://cestlaz.github.io/posts/feels-good-to-be-helpful/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I got some nice feedback today from a couple of disparate places. It
was another reminder that being a teacher isn't just about the kids
currently in your class but it's about who you are and everyone you
interact with. It's not just about teaching a subject but rather about
helping people get to where they can potentially go. 
&lt;/p&gt;

&lt;p&gt;
About a year ago I started putting together a &lt;a href="http://cestlaz.github.io/posts/using-emacs-introduction"&gt;series of posts and videos&lt;/a&gt; showing
how I use Emacs. There were a couple of motivating factors. One, I
wanted to put together some resources for my students - something that
would take them from the Emacs tutorial to a point where they would
hopefully see the power of the environment and not buy into the IDE or
editor of the month hype but either really use Emacs proficiently or
use another editor (Atom, Vim) in a similar fashion.
&lt;/p&gt;

&lt;p&gt;
The other reason was that I wanted to give something back to the
Emacs community. I don't create Emacs packages or otherwise contribute
but I figured, I'm a teacher, I can do what I do.
&lt;/p&gt;

&lt;p&gt;
So, earlier today I got an email thanking me for my videos and also
noticed that over on &lt;a href="http://irreal.org/blog/?p=6218"&gt;irreal.org&lt;/a&gt;, jcs wrote about moving over to
dumb-jump after seeing one of my videos. It's been nice seeing that
I've been of some value to jcs since I've learned a lot from his
blog. Emails, comments, and notes like this have driven me to continue
the series (even though It's been a busy couple of months). It's
gratifying that even without writing a line of code, one can give
something back to a community that they've found value in for years.
&lt;/p&gt;

&lt;p&gt;
A month or so ago, I had a chat with a former student who's finishing
up his last year in college. He was having trouble finding a job, I
couldn't figure out why he wasn't getting offers - he's really
talented. I tried to give him words of encouragement and reminded him
that I was available to help him - as I try to be for the entire
"family" in any way I could.
&lt;/p&gt;

&lt;p&gt;
Fast forward to today - I got an email telling me that he got a job
that he's very excited about. He felt the interviews with this company
were going well so he was waiting for them to resolve before reaching
out to me. He also told me that our talk was very helpful to him. 
&lt;/p&gt;

&lt;p&gt;
Sometimes it's not just in a class where we can have a positive effect
but sometimes just a talk on the side. Sometimes many years later.
&lt;/p&gt;</description><category>teaching</category><guid>http://cestlaz.github.io/posts/feels-good-to-be-helpful/</guid><pubDate>Wed, 17 May 2017 23:12:03 GMT</pubDate></item><item><title>Learning about VC</title><link>http://cestlaz.github.io/posts/learning_about_vc/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;style&gt;
.figure-number {
    display: none;
}
&lt;/style&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/peter-boyce-talk.jpg" alt="peter-boyce-talk.jpg" align="center" height="250"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; Peter Boyce imparting VC Wisdom on the Daedalus Scholars&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Yesterday, the Daedalus Scholars were visited by &lt;a href="https://twitter.com/badboyboyce"&gt;Peter Boyce&lt;/a&gt;. Peter's
been a friend for years and is my go to guy when I'm looking talk
startups, venture capital and many things tech. Peter's with General
Catalyst Partners and is a co-founder of &lt;a href="http://www.roughdraft.vc/"&gt;Rough Draft Ventures&lt;/a&gt; - a fund
that invests in student entrepreneurs.
&lt;/p&gt;

&lt;p&gt;
I'm teaching Hunter's first class of Daedalus Scholars - Hunter's new
CS Honors program. They're young and just getting their feet wet and
have unlimited potential and possibilities in front of  them. It helps if
they have some idea as to what some of those possibilities can be. 
&lt;/p&gt;

&lt;p&gt;
Everyone knows you can work for a big tech company or a bank but few
really know or understand how the tech startup ecosystem works. That's
why I was so excited when Peter agreed to visit.
&lt;/p&gt;

&lt;p&gt;
Peter talked about his path. About how he and a group of friends,
while in college, got together once night a week to work on their own
projects. Not on problem set, assignments, or studying but
specifically to work on something else. He talked about struggling to
balance grades, early projects and relationships and how much he
learned and grew from the experience. He talked about his path to
being a VC and he told the class about possibilities.
&lt;/p&gt;

&lt;p&gt;
If the class left one tenth as inspired as I was the day was a
resounding success. Based on the brief conversations I had with a few
of my students after class and last night on email, I'm pretty sure it
was.
&lt;/p&gt;

&lt;p&gt;
One thing that struck me was what Peter seemed to be most proud of was
his ability to help others realize their goals and their dreams. I've
gotten to know a few venture capitalists and investors over the years
and the ones I like and identify best with seem to have this
trait. They're investing in people. I seem to recall &lt;a href="http://twitter.com/fredwilson"&gt;Fred Wilson&lt;/a&gt;, a VC
I very much admire telling me that when talking to young entrepreneurs
he very much looks at the people as much (maybe more) than the
product. The product might not be right but if the people and team
are, at some point they'll hit. 
&lt;/p&gt;

&lt;p&gt;
As a teacher, my whole career has been about trying to enable
others. I spent a lot of time yesterday thinking about the parallels
between some of the investors that I know, like, and respect and the
best teachers I know and while we work in very different arenas, in
some ways we're driven by similar voices.
&lt;/p&gt;</description><category>startups</category><guid>http://cestlaz.github.io/posts/learning_about_vc/</guid><pubDate>Fri, 05 May 2017 12:57:15 GMT</pubDate></item><item><title>Using Emacs - 33 - projectile, dumb-jump</title><link>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/bbatsov/projectile"&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href="https://github.com/ericdanan/counsel-projectile"&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;

&lt;p&gt;
Here's my configuration:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; projectile&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;projectile-global-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;projectile-completion-system&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;counsel-projectile&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;counsel-projectile-on&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it's a
git or other source control repo, if it's created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;b&gt;&lt;b&gt;.projectile&lt;/b&gt;&lt;/b&gt; in
the root directory of the project.
&lt;/p&gt;

&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;

&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;b&gt;&lt;b&gt;which-key&lt;/b&gt;&lt;/b&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;

&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href="http://projectile.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The other package I show is &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;. It's basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;

&lt;p&gt;
Here's my current config:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump&lt;/span&gt;
  &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"M-g o"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-other-window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g j"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g x"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"M-g z"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-go-prefer-external-other-window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nv"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-selector&lt;/span&gt; &lt;span class="ss"&gt;'ivy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;:config&lt;/span&gt; 
&lt;span class="c1"&gt;;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)&lt;/span&gt;
&lt;span class="nv"&gt;:init&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dumb-jump-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;




&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wBfZzaff77g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid><pubDate>Fri, 28 Apr 2017 13:00:26 GMT</pubDate></item><item><title>A new first language? What's the follow up plan?</title><link>http://cestlaz.github.io/posts/first-language-changing/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This morning, &lt;a href="https://twitter.com/guzdial"&gt;Mark Guzdial&lt;/a&gt; wrote about Stanford possibly &lt;a href="https://computinged.wordpress.com/2017/04/21/cs-department-updates-introductory-courses-java-is-gone/"&gt;moving away
from Java&lt;/a&gt; as their intro language. This comes on the heels of a
semi-regular thread on one of the lists I'm on asking about what
languages are used at assorted colleges around the country. Invariably
the Pascal -&amp;gt; C++ -&amp;gt; Java progression of APCS turns up in these
threads.
&lt;/p&gt;

&lt;p&gt;
There are plenty of arguments to be made both for and against pretty
much any language or platform. There's no single best universal
answer. Each choice giveth and each choice taketh away. 
&lt;/p&gt;

&lt;p&gt;
What I'm really curious about is who's looking at intro languages in
the context of complete programs or even complete educations that
could span multiple institutions.
&lt;/p&gt;

&lt;p&gt;
Early language choices can make a big difference in engaging and
exciting newcomers but there are ramifications later on that few seem
to consider.
&lt;/p&gt;

&lt;p&gt;
Take the APCS change from C++ to Java. It removed memory management
from the first year course. It also simplified issues relating to
pass by value vs pass by reference (or, rather, passing address by
value), bought much more strongly into OOP and moved more towards
using built in implementations of data structures like Lists rather
than rolling your own.
&lt;/p&gt;

&lt;p&gt;
Removing memory management from the first year course in and of itself
isn't a problem as long as it's taught and taught effectively
somewhere later on. It could be argued that "memory is already covered
in our required systems course." That could be the case, but there are
many concepts that kids don't get the first time around. Is an
institution that covered memory management in CS1/2 and then came back
to it in a later Systems course giving their students the same
understanding now that they've eliminated the CS1/2 experience? 
&lt;/p&gt;

&lt;p&gt;
What about OOP buy in. Personally, I've never been a big OOP fan but
that's neither here nor there. What I have found is that depending on
how a student is exposed to programming in CS1/CS2 can have a big
influence on how they approach problems later. Did the move to Java
cause more of our students to try to use shoehorn OOP into a problem
that really shouldn't be approached in an OOP manner?
&lt;/p&gt;

&lt;p&gt;
I suspect that the use of built in data structures has had a
negative impact. A few years after the switch to Java, I was talking
to a senior tech worker. He was having a bad day - interviewing
potential internees and full time engineers. My friend was complaining
that the kids couldn't come up with solutions to what he thought were
pretty straightforward questions. He felt that had the kids actually
implemented algorithms like the nlogn sorts rather than just learning
java .sort method and just talking about the algorithm they'd be
better prepared. I've heard this sentiment repeated over and over
throughout the years.
&lt;/p&gt;

&lt;p&gt;
This is not to say that Java is a horrible language or horrible for
teaching - that's another debate. The point is that you can't just
look at the intro class and who it draws in. You have to consider how
it will prepare students for the next level and you have to look at
the big picture – will our students get everything they need by the
time they leave us.
&lt;/p&gt;

&lt;p&gt;
Many schools have moved to Python. Will that effect students take on
type systems later on? Will the flexibility and constructs like list
comprehensions make it harder to teach recursion since there are
"easier" ways to do it? 
&lt;/p&gt;

&lt;p&gt;
None of these are really problems so long as the CS1/2 (or even CS0)
isn't taught in a vacuum. 
&lt;/p&gt;

&lt;p&gt;
I fear, however that too often we're paying attention to the intake of
the pipe and not so much the output.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>langauges</category><category>pedagogy</category><guid>http://cestlaz.github.io/posts/first-language-changing/</guid><pubDate>Fri, 21 Apr 2017 18:46:07 GMT</pubDate></item></channel></rss>