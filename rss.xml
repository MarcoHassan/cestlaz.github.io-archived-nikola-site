<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z</title><link>http://cestlaz.github.io/</link><description>C'est la Z</description><atom:link href="http://cestlaz.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 26 Dec 2016 16:00:18 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs - 25 - Tramp</title><link>http://cestlaz.github.io/posts/using-emacs-25-tramp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Today's video talks about using emacs &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;Tramp&lt;/a&gt; mode.
&lt;/p&gt;

&lt;p&gt;
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.
&lt;/p&gt;

&lt;p&gt;
To edit a file on a machine &lt;b&gt;&lt;b&gt;www.cstuy.org&lt;/b&gt;&lt;/b&gt; I would first
&lt;b&gt;&lt;b&gt;find-file&lt;/b&gt;&lt;/b&gt; using &lt;b&gt;&lt;b&gt;C-c C-f&lt;/b&gt;&lt;/b&gt; and then for the file name to open:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:www.cstuy.org:/home/zamansky/sc/testfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
this would open the file &lt;b&gt;&lt;b&gt;testfile&lt;/b&gt;&lt;/b&gt; in the absolute directory
&lt;b&gt;&lt;b&gt;/home/zamansky/sc&lt;/b&gt;&lt;/b&gt;. If my username on the remote machine is
different:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:username@www.cstuy.org:/home/zamansky/sc/testfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And I can also work relative to my home directory:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:username@www.cstuy.org:sc/testfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If I just hit enter after the machine name and &lt;b&gt;&lt;b&gt;:&lt;/b&gt;&lt;/b&gt; - 
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:username@www.cstuy.org:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I end up in a dired buffer on the remote machine.
&lt;/p&gt;

&lt;p&gt;
Likewise if I run a &lt;b&gt;&lt;b&gt;shell&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;eshell&lt;/b&gt;&lt;/b&gt; in the tramp buffer, it
will run the shell on the remote machine. In the video I showed how
shell didn't work because locally, I'm configured to use zsh and I
don't have zsh installed remotely. Eshell, however, worked fine.
&lt;/p&gt;

&lt;p&gt;
Using tramp in this way gives us all of the power of our local emacs
configuration to edit a file on a remote machine.
&lt;/p&gt;

&lt;p&gt;
You can also use tramp to edit local files as root using sudo:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo::/tmp/sc/rootfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note the double colon. 
&lt;/p&gt;

&lt;p&gt;
Finally, you can do the double-whammy - remote root editing:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh::www.cstu.org|sudo:www.cstuy.org:/home/zamansky/sc/rootfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
If you use zsh and any of this freezes, just do a search on "zsh
tramp" and the top couple of hits will tell you what to add to your
configuration files to fix things.
&lt;/p&gt;

&lt;p&gt;
Finally, I mentioned in the video that I don't use tramp all that much
anymore. That's mostly because I don't do much remote editing
anymore. I used it more when I was administering a number of machines
at Stuyvesant. 
&lt;/p&gt;

&lt;p&gt;
I still use it periodically, but I also use &lt;a href="https://github.com/libfuse/sshfs"&gt;sshfs&lt;/a&gt;, a Linux tool (which
may be available for other operating systems) that allows me to mount
a directory tree from a remote machine and use it on my local machine.
&lt;/p&gt;



&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Iqh50fgbIVk" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Iqh50fgbIVk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-25-tramp/</guid><pubDate>Mon, 26 Dec 2016 15:00:26 GMT</pubDate></item><item><title>Being productive between terms</title><link>http://cestlaz.github.io/posts/between-semesters/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
We're now at the end of my first semester at Hunter. The Spring term
classes don't start until the end of January. I've got an assortment
of projects to work on but some of the students should have a nice
block of relatively free time.
&lt;/p&gt;

&lt;p&gt;
I  wanted to share some recommendations on things to explore with a
few student groups and thought it would be easier to write those
recommendations down here once and then just share a link.
&lt;/p&gt;

&lt;p&gt;
So, here we go.
&lt;/p&gt;

&lt;p&gt;
Much of the first few CS classes at Hunter and elsewhere focus on the
fundamentals of programming, data structures, and algorithms. It's all
good stuff but students want to supplement that classroom knowledge
with some practical skills.
&lt;/p&gt;

&lt;p&gt;
I recommend playing with a language like Python that can be used in
all sorts of domains. If you haven't played with it, check it out.
&lt;/p&gt;

&lt;p&gt;
I like &lt;a href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff with Python&lt;/a&gt; as a nice, free, online
text.
&lt;/p&gt;

&lt;p&gt;
I'd also recommend learning a web platform like &lt;a href="http://flask.pocoo.org"&gt;Flask.&lt;/a&gt; Flask is a web
framework in Python. The web site has a nice getting started guide and
tutorial but here are a couple of other great learning Flask
resources:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/realpython/discover-flask"&gt;Discover Flask&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploreflask.com/en/latest/"&gt;Explore Flask&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Once armed with the above, you'll be well positioned to work on a
variety of your own projects, enter hackathons, and more.
&lt;/p&gt;

&lt;p&gt;
I'm also a big believer in using good tools. I love the emacs text
editor. Why not spend some time going through the web series on &lt;a href="http://cestlaz.github.io/stories/emacs"&gt;Using
Emacs&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, if you're not using Git, you should be. Here are a couple of
playlists to get you started:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLq0VzNtDZbe9QLq8YCizFN2TVWvlLjrvX"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/playlist?list=PLq0VzNtDZbe9QLq8YCizFN2TVWvlLjrvX"&gt;https://www.youtube.com/playlist?list=PLq0VzNtDZbe9QLq8YCizFN2TVWvlLjrvX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLoGsJC6ZzSwm959Do9ZgZM9U-xp27NEaQ"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/playlist?list=PLoGsJC6ZzSwm959Do9ZgZM9U-xp27NEaQ"&gt;https://www.youtube.com/playlist?list=PLoGsJC6ZzSwm959Do9ZgZM9U-xp27NEaQ&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And if you haven't done so already, head over to &lt;a href="https://education.github.com/pack"&gt;Github Education&lt;/a&gt; and
sign up for a student developer pack.
&lt;/p&gt;

&lt;p&gt;
So, there are a few recommendations on things to work on before the
next term begins.
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/between-semesters/</guid><pubDate>Wed, 21 Dec 2016 01:13:00 GMT</pubDate></item><item><title>It gets easier (or advent of code 2016 day 19)</title><link>http://cestlaz.github.io/posts/it-gets-easier-advent19/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today's &lt;a href="http://adventofcode.com/2016/day/19"&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href="http://mathworld.wolfram.com/JosephusProblem.html"&gt;Josephus
problem&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I recalled that there was a formula to figure out the 
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.
&lt;/p&gt;

&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href="http://adventofcode.com/2016/day/19"&gt;problem description&lt;/a&gt; for details).
&lt;/p&gt;

&lt;p&gt;
For both solutions I coded up a circular doubly linked list:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;make_ring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can see my complete solutions &lt;a href="https://github.com/zamansky/advent2016/blob/master/day19.cpp"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I was thinking about how I wrote the code – I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar. 
&lt;/p&gt;

&lt;p&gt;
I'm not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven't really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat. 
&lt;/p&gt;

&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn't fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.
&lt;/p&gt;

&lt;p&gt;
All of this is to say that it does get easier.
&lt;/p&gt;

&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href="http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA"&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.
&lt;/p&gt;

&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.
&lt;/p&gt;</description><category>coding</category><category>cs</category><guid>http://cestlaz.github.io/posts/it-gets-easier-advent19/</guid><pubDate>Tue, 20 Dec 2016 00:56:09 GMT</pubDate></item><item><title>A couple of things I learned from Danny Jaye</title><link>http://cestlaz.github.io/posts/danny_jaye/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I got an email from my good friend and mentor this weekend. Danny
Jaye, after 45 years, is finally retiring for real.
&lt;/p&gt;

&lt;p&gt;
Danny, the Maestro, or Doc, as we sometimes called him spent most of
his career at Stuyvesant. First as a math teacher, then math
chair. Danny also spent time as the director of the Bergen Academies
and his last few years as the Chief Academic Officer at Solomon
Schecter in Bergen.
&lt;/p&gt;

&lt;p&gt;
Danny's always been a master teacher - back in the day, he managed to
teach Calculus to my brother - no small feat and as a department and
school leader, he has a great eye for collecting and developing
talent. Over the years, Danny's influenced a number people who've gone
on to be education leaders of one form or another.
&lt;/p&gt;

&lt;p&gt;
For me, Danny was and continues to be a great mentor. I can't tell you
how much I learned - much of it on our 5:00am bike rides from Stuy up
to the GW bridge and back.
&lt;/p&gt;

&lt;p&gt;
Far too much to share here but let me drop a couple of thoughts:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It doesn't cost anything to be nice.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
and the related:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It's easy to be nice on a good day.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The former talking about treating everyone with respect regardless of
station and the latter a reminder not to forget it on a bad day. Also a
valuable reminder when sizing up new school leaders.
&lt;/p&gt;

&lt;p&gt;
We'd spend hours discussing class, departmental, and school
strategies. How to develop a program with safety nets, how to separate
real value from the hypes and how to always remember that it's the
student first and the big picture, not just our little corner of the world.
&lt;/p&gt;


&lt;p&gt;
It feels weird for me to know that my go to guy on Ed stuff is no
longer working and is now moving towards a life of leisure.
&lt;/p&gt;

&lt;p&gt;
It doesn't change anything other than a reminder to me that I'm now
one of the more senior people in my circles and that now Danny can
mock me for having to go in to the office every day.
&lt;/p&gt;

&lt;p&gt;
So, here's to you Danny – one of the best education people out
there. 
&lt;/p&gt;</description><guid>http://cestlaz.github.io/posts/danny_jaye/</guid><pubDate>Sun, 18 Dec 2016 20:49:04 GMT</pubDate></item><item><title>Rookie Season Redux</title><link>http://cestlaz.github.io/posts/rookie-season-redux/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today was the last day of classes at Hunter thus ending my first
semester of teaching at Hunter College.
&lt;/p&gt;

&lt;p&gt;
I very much enjoyed the semester and my class and look forward to
working with the same group when the spring term starts in a few
weeks. 
&lt;/p&gt;

&lt;p&gt;
At the same time, even though I'm a quarter century veteran teacher,
in many ways this was like my rookie season all over again.
&lt;/p&gt;

&lt;p&gt;
My class was an honors intro class so the material wasn't new to me
but there were a number of adjustments going from high school to college.
&lt;/p&gt;

&lt;p&gt;
I taught a few college classes as an adjunct back in the nineties but
I was a young teacher at the time and that was a lifetime ago.
&lt;/p&gt;

&lt;p&gt;
The biggest difference is that we only met two days a week. Monday and
Thursday and we met for 1:45 rather than 45 minutes. The longer class
is nice but the twice a week means that you don't get that every day
reinforcement you have in high school.
&lt;/p&gt;

&lt;p&gt;
It also means that there were times when we would go a week between
classes due to a single day off. 
&lt;/p&gt;

&lt;p&gt;
The biggest challenge, one that I'm continuing to work on, is figuring
out how much we can do in a class, what and how much to assign between
classes and what's the best way to motivate the student's to space out
the work while doing something every day.
&lt;/p&gt;

&lt;p&gt;
That wasn't much of a challenge at Stuy. Having been there so long, I
had a good feel for my students as well as the pace and rhythm of
Stuy. Hunter has it's own rhythm and pace and I'm still figuring it
out.
&lt;/p&gt;

&lt;p&gt;
We also had to pivot early on as the student laptops didn't arrive
until a third of the semester was over.
&lt;/p&gt;

&lt;p&gt;
On the other hand, much of my work these days has to do with
developing the overall honors program as well as Hunter's forthcoming
teacher education programs in CS so I'm only teaching a single class
right now and it's small.
&lt;/p&gt;


&lt;p&gt;
If there are any rookie teachers reading this, congratulations on
getting through your first semester. I know you guys go a little bit
longer, but you're in the home stretch.
&lt;/p&gt;

&lt;p&gt;
Teaching right, particularly in public schools with large classes  will
always be an all in activity - certainly harder and more draining than
anything I ever did in industry but it does get easier as you learn
your school and students and develop your craft. 
&lt;/p&gt;</description><category>teaching</category><guid>http://cestlaz.github.io/posts/rookie-season-redux/</guid><pubDate>Mon, 12 Dec 2016 23:41:28 GMT</pubDate></item><item><title>Advent of Code 2016 - Check your data</title><link>http://cestlaz.github.io/posts/advent-of-code-2016-check-data/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I'm spending the weekend up in Michigan. Visiting my brother and is
family. We're here to see the &lt;a href="http://umgass.org"&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan's &lt;a href="http://www.umgass.org/current-production"&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.
&lt;/p&gt;

&lt;p&gt;
This hasn't left much time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday's challenge this morning.
&lt;/p&gt;

&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/"&gt;because I'm an
idiot&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="http://adventofcode.com/2016/day/9"&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.
&lt;/p&gt;

&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did. 
&lt;/p&gt;

&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it's
always good to have a daughter that's smarted than you are) but she
saw no problems.
&lt;/p&gt;

&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.
&lt;/p&gt;

&lt;p&gt;
What could be the problem.
&lt;/p&gt;

&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a "save-as"
to save it - last time, I cut and pasted.
&lt;/p&gt;

&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.
&lt;/p&gt;

&lt;p&gt;
The moral of the story – make sure you check the integrity of your
data set - you'll never get the right answer if you're working with
the wrong data.
&lt;/p&gt;

&lt;p&gt;
In case anyone's interested, you can find my AoC code &lt;a href="https://github.com/zamansky/advent2016"&gt;here&lt;/a&gt;.
&lt;/p&gt;</description><category>cs</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016-check-data/</guid><pubDate>Sat, 10 Dec 2016 16:25:38 GMT</pubDate></item><item><title>A Teacher looks at Advent of Code 2016 #2</title><link>http://cestlaz.github.io/posts/advent-of-code-2016-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today we're looking at &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href="http://adventofcode.com/2016/day/2"&gt;number 2&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
To change things up, I thought I'd do a video where I live code a solution.
&lt;/p&gt;

&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code. 
&lt;/p&gt;

&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;

&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href="http://cestlaz.github.io/posts/2014-02-26-change-the-data.md"&gt;changing the data&lt;/a&gt; to take
away edge and special cases. 
&lt;/p&gt;

&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;

&lt;p&gt;
Here's the video, I hope you enjoy it:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EC8gSrYQ11g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><category>cs</category><category>pedagogy</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016-2/</guid><pubDate>Thu, 08 Dec 2016 13:40:49 GMT</pubDate></item><item><title>A Teacher looks at Advent of Code 2016 #1</title><link>http://cestlaz.github.io/posts/advent-code-2016-1/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I recently &lt;a href="http://cestlaz.github.io/posts/advent-of-code-2016/"&gt;posted&lt;/a&gt; about &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;

&lt;p&gt;
I thought I'd share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://adventofcode.com/2016/day/1"&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there's a problem - there are no limits on coordinates and we
can't make an unlimited size array.
&lt;/p&gt;

&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; location changes over
time. In the solution below, we start at &lt;b&gt;&lt;b&gt;(0,0)&lt;/b&gt;&lt;/b&gt; and count the steps as
we update two variables &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;b&gt;&lt;b&gt;(x,y)&lt;/b&gt;&lt;/b&gt; and we have the number of steps taken to get there.
&lt;/p&gt;

&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I'm not arguing that what's written is
superior in any way, it's just what I ended up writing).
&lt;/p&gt;

&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
which assigns &lt;b&gt;&lt;b&gt;x&lt;/b&gt;&lt;/b&gt; to the first item in the tuple and &lt;b&gt;&lt;b&gt;y&lt;/b&gt;&lt;/b&gt; the
second. I used that a number of times 
&lt;/p&gt;

&lt;p&gt;
I also use a list  I call &lt;b&gt;&lt;b&gt;dirs&lt;/b&gt;&lt;/b&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;

&lt;p&gt;
Here's all the code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# assume our starting location is 0,0&lt;/span&gt;

&lt;span class="c1"&gt;# we start with d=0 -&amp;gt; facing north&lt;/span&gt;
&lt;span class="c1"&gt;# as we turn left or right, we can just increment or decrement d&lt;/span&gt;
&lt;span class="c1"&gt;# and dirs[d] will give us the appropriate dx and dy to update&lt;/span&gt;
&lt;span class="c1"&gt;# our locatoin for the next step&lt;/span&gt;
&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# This is only needed for part 2  - We track visited locations&lt;/span&gt;
&lt;span class="c1"&gt;# by adding them to the dictionary. If we try to add a location&lt;/span&gt;
&lt;span class="c1"&gt;# that's already been visited we know that we've found our final &lt;/span&gt;
&lt;span class="c1"&gt;# location&lt;/span&gt;
&lt;span class="c1"&gt;# locs={}  # uncomment this line for part 2&lt;/span&gt;


&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# the first char in i is the direction to turn in (L or R)&lt;/span&gt;
    &lt;span class="c1"&gt;# the rest represents the number of steps.&lt;/span&gt;
    &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totalsteps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

	&lt;span class="c1"&gt;# Uncomment this block for part 2&lt;/span&gt;
	&lt;span class="c1"&gt;# each time we have a new location, see if it's already in&lt;/span&gt;
	&lt;span class="c1"&gt;# locs, if it isn't, add it.&lt;/span&gt;
	&lt;span class="c1"&gt;# if it is, we're visiting somewhere twice so we're done.&lt;/span&gt;
	&lt;span class="c1"&gt;#if ((x,y) not in locs):&lt;/span&gt;
	&lt;span class="c1"&gt;#    locs[(x,y)]=1&lt;/span&gt;
	&lt;span class="c1"&gt;#else:&lt;/span&gt;
	&lt;span class="c1"&gt;#    print((x,y))&lt;/span&gt;
	&lt;span class="c1"&gt;#    print(abs(x)+abs(y)) # the answer&lt;/span&gt;
	&lt;span class="c1"&gt;#    sys.exit(0)&lt;/span&gt;
	&lt;span class="c1"&gt;#    break&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the answer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;</description><category>cs</category><category>pedagogy</category><category>programming</category><guid>http://cestlaz.github.io/posts/advent-code-2016-1/</guid><pubDate>Tue, 06 Dec 2016 15:46:17 GMT</pubDate></item><item><title>Using Emacs - 24 - Org Capture 2</title><link>http://cestlaz.github.io/posts/using-emacs-24-capture-2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Not much in today's actual post. The video is a continuation of the last one on &lt;a href="http://cestlaz.github.io/posts/using-emacs-23-capture-1"&gt;org-capture&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The video goes over how I set things up to pop up a new frame to do a
capture even if emacs isn't on screen (as long as it's running) by
hitting &lt;b&gt;&lt;b&gt;F1&lt;/b&gt;&lt;/b&gt;. I would  have preferred to bind to &lt;b&gt;&lt;b&gt;C-c c&lt;/b&gt;&lt;/b&gt; - the
same as within emacs but I havn't figured out how to do that in Ubuntu
or Mint Linux yet.
&lt;/p&gt;

&lt;p&gt;
Here's the elisp code for the configuration file to do the heavy
lifting. I can't for th elife of me remember who's blog I found it
on. If anyone knows, please leave a comment - I'd like to give credit
where credit's due:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(defadvice org-capture-finalize 
    (after delete-capture-frame activate)  
  "Advise capture-finalize to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
    (delete-frame)))

(defadvice org-capture-destroy 
    (after delete-capture-frame activate)  
  "Advise capture-destroy to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
    (delete-frame)))  

(use-package noflet
  :ensure t )
(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
    (org-capture)))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emacsclient -ne "(make-capture-frame)"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There will be a third capture video in a few weeks where I'll talk
about scheduling and agendas. Right now, I'm playing with org-gcal to
sync with my Google calendar and want to figure out a config I'm happy
with before making that video.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gjr9mP01oWE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-24-capture-2/</guid><pubDate>Sat, 03 Dec 2016 20:45:26 GMT</pubDate></item><item><title>Advent of Code 2016</title><link>http://cestlaz.github.io/posts/advent-of-code-2016/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Once again, it's time for &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day. 
&lt;/p&gt;

&lt;p&gt;
I wrote a bit about it &lt;a href="http://cestlaz.github.io/posts/2015-12-15-advent.html/"&gt;last&lt;/a&gt; &lt;a href="http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ"&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href="http://adventofcode.com/2015/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It's only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I'm thinking of
looking at a couple of the problems this week with my class at Hunter.
&lt;/p&gt;

&lt;p&gt;
I didn't think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You're
first presented with the problem and the input and once you put in the
correct answer, you're presented with part two.
&lt;/p&gt;

&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded. 
&lt;/p&gt;

&lt;p&gt;
It's not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.
&lt;/p&gt;

&lt;p&gt;
Check out &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; and see if it's something you or your classes
might enjoy.
&lt;/p&gt;</description><category>apcs</category><category>cs</category><category>misc</category><guid>http://cestlaz.github.io/posts/advent-of-code-2016/</guid><pubDate>Sat, 03 Dec 2016 20:25:26 GMT</pubDate></item></channel></rss>