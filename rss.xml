<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C'est la Z</title><link>http://cestlaz.github.io/</link><description>C'est la Z</description><atom:link href="http://cestlaz.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 05 Sep 2018 23:23:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Do you need to know binary for CS?</title><link>http://cestlaz.github.io/posts/why-binary/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org67668b0" class="outline-2"&gt;
&lt;h2 id="org67668b0"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67668b0"&gt;
&lt;p&gt;
Yesterday, Alfred Thompson asked &lt;a href="https://twitter.com/alfredtwo/status/1036982959587446784"&gt;"Why is it important for CS students
to understand binary?"&lt;/a&gt; on Twitter which led to a number of interesting
responses. Alfred summarized and wrote his own thoughts on &lt;a href="http://blog.acthompson.net/2018/09/why-teach-binary-in-computer-science.html"&gt;his blog&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I wanted to add a comment but I already wrote a post for yesterday so
put it off until today.
&lt;/p&gt;

&lt;p&gt;
First let me say that you can have a very successful career in tech
and not really know binary or number bases other than 10. That career
could be as as programmer, software engineer, network specialist,
devops or in many other areas that fall on the CS side of tech.
&lt;/p&gt;

&lt;p&gt;
You also can't really get through a CS program without learning about
binary. If you're self taught or go to a code school then that's
another story.
&lt;/p&gt;

&lt;p&gt;
The question is, is it worth the time spent.
&lt;/p&gt;

&lt;p&gt;
One can easily argue that systems - that is low level, close to the
metal knowledge is one of the two "latins" of CS, the other being CS
theory. You might not explicitly use either but they give you a
stronger foundation in everything. You also can't study systems without a
good knowledge of binary so if you want to do anything low level, you
need it.
&lt;/p&gt;

&lt;p&gt;
What about beyond those easy but not all to convincing to new students
answers?
&lt;/p&gt;

&lt;p&gt;
Let's loo at a few things we can do with binary.
&lt;/p&gt;

&lt;p&gt;
A big part of binary notation is that you can look at data as a string
of bits. You can also manipulate that data using things like &lt;code&gt;and&lt;/code&gt;,
&lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and &lt;code&gt;xor&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
At it's core &lt;code&gt;and&lt;/code&gt; let's you turn off bits. &lt;code&gt;And&lt;/code&gt; any bit with a 0 and
it will become a 0. &lt;code&gt;And&lt;/code&gt; it with a 1 and it stays the same.
&lt;/p&gt;

\begin{array}{ccccc}
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
and &amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\\hline
&amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
\end{array}

&lt;p&gt;
&lt;code&gt;Or&lt;/code&gt; is used to turn on bits. You &lt;code&gt;or&lt;/code&gt; any bit with a 1 and it gets
turned on. &lt;code&gt;Or&lt;/code&gt; it with a 0 and it stays as it was.
&lt;/p&gt;

\begin{array}{ccccc}
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
or &amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\\hline
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\
\end{array}

&lt;p&gt;
&lt;code&gt;Xor&lt;/code&gt; a bit with a 1 and the bit flips, with a 0 it stays the same.
&lt;/p&gt;

\begin{array}{ccccc}
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
xor &amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\\hline
&amp;amp;1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\\
\end{array}


&lt;p&gt;
What can we do with this? For one thing, image processing. Students
frequently play with images where each pixel is represented as a 24
bit color. Three bytes, one each for red, green, and blue. Each byte
is really 8 bits. We can use bitwise operations on the binary digits
to turn on or off color.
&lt;/p&gt;

&lt;p&gt;
Let's say we have this rgb triple: (200, 15, 80) which in hexadecimal
is C8 0F 50 or 10111000 00001111 01010000 in binary. If we want to
turn off the reddest reds we could &lt;code&gt;and&lt;/code&gt; the color with 00001111
11111111 11111111 or 0FFFFF:
&lt;/p&gt;

\begin{array}{cccc}
&amp;amp; 10111000 &amp;amp; 00001111 &amp;amp; 01010000\\
and &amp;amp; 00001111 &amp;amp; 11111111 &amp;amp; 11111111\\\hline
&amp;amp; 00001000 &amp;amp; 00001111 &amp;amp; 01010000\\
\end{array}

&lt;p&gt;
Yes, you could just use the base 10
values and keep on calling color setting and conversion functions but
if you understand binary it's quicker and easier and what's going on
will actually make sense. 
&lt;/p&gt;

&lt;p&gt;
Of course you probably wouldn't write out the binary but would rather
use the hex notation which once a student realizes is just 4 bit
groupings of binary becomes really easy. As a bonus, once you're used
to binary and hex those hexadecimal color values will all of a sudden
make sense.
&lt;/p&gt;

&lt;p&gt;
This is just the tip of the image processing and graphics iceberg with
respect to binary. 
&lt;/p&gt;

&lt;p&gt;
Related although I haven't played with it myself, I'd imagine you could use
these types of bitwise operations on images to play with
steganography.
&lt;/p&gt;


&lt;p&gt;
Another use of binary is in cybersecurity. Things like buffer
overflows and blowing the stack all make much more sense if you know
how memory is arranged and that's easier to understand if you
understand binary, bytes, and word sizes. I do experiments with my
classes when we use C or C++ where they access arrays off the ends and
end up messing with neighboring variables. It seems like magic unless
you know about memory and to know memory you need to know binary.
&lt;/p&gt;

&lt;p&gt;
How about image file formats? Many image file formats start with a
fixed size header. Here's the header definition for the GIF file
format:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;Offset&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Length&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;3  bytes&lt;/td&gt;
&lt;td class="org-left"&gt;"GIF"&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-left"&gt;3  bytes&lt;/td&gt;
&lt;td class="org-left"&gt;"87a" or "89a"&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-left"&gt;2  bytes&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;lt;Logical Screen Width&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-left"&gt;2  bytes&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;lt;Logical Screen Height&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;10&lt;/td&gt;
&lt;td class="org-left"&gt;1  byte&lt;/td&gt;
&lt;td class="org-left"&gt;bit0: Global Color Table Flag (GCTF)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;bit&lt;/td&gt;
&lt;td class="org-left"&gt;1..3:  Color&lt;/td&gt;
&lt;td class="org-left"&gt;Resolution&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;bit&lt;/td&gt;
&lt;td class="org-left"&gt;4:  Sort&lt;/td&gt;
&lt;td class="org-left"&gt;Flag to Global Color Table&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;bit&lt;/td&gt;
&lt;td class="org-left"&gt;5..7:  Size&lt;/td&gt;
&lt;td class="org-left"&gt;of Global Color Table:2&lt;sup&gt;(1+n)&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;td class="org-left"&gt;1  byte&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;lt;Background Color Index&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;12&lt;/td&gt;
&lt;td class="org-left"&gt;1  byte&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;lt;Pixel Aspect Ratio&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;13&lt;/td&gt;
&lt;td class="org-left"&gt;?  bytes&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;lt;Global Color Table(0..255 x 3 bytes)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;?&lt;/td&gt;
&lt;td class="org-left"&gt;bytes  &amp;lt;Blocks&amp;gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Â &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;bytes  &amp;lt;Trailer&amp;gt;&lt;/td&gt;
&lt;td class="org-left"&gt;(0x3b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The header info is defined bit by bit so you have to know about binary
and know how to manipulate data on a bit level. 
&lt;/p&gt;

&lt;p&gt;
Those were three biggies but there are other places where knowing
binary makes tons of sense:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;flag type parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;understanding floating point numbers&lt;/li&gt;
&lt;li&gt;using shifts for quick doubling and halving of data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Does this mean that binary has to be or should be in a first course?
No. Should it be somewhere? Certainly and rather than doing binary
because it's on the test or because "you should know it" you can pick
and choose your spots and cover it when it will be fun and interesting
for your kids.
&lt;/p&gt;











&lt;p&gt;
world
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cs</category><category>mathjax</category><guid>http://cestlaz.github.io/posts/why-binary/</guid><pubDate>Wed, 05 Sep 2018 21:15:01 GMT</pubDate></item><item><title>Wishing all K12 teachers a great year</title><link>http://cestlaz.github.io/posts/starting-school-2018/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9177810" class="outline-2"&gt;
&lt;h2 id="org9177810"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9177810"&gt;
&lt;p&gt;
Today was the first day of school for all NYC teachers. Students come
back tomorrow. That's a quick turnaround. Some years, they get a day
or two before the kids come in. That's much easier.
&lt;/p&gt;

&lt;p&gt;
The first day is usually dominated by meetings. In a large school like
Stuy you'll typically have a long faculty meeting in the morning and a
department meeting in the afternoon. Not much time to actually get
ready for classes. You might think that it shouldn't be a big deal
since you had all summer but in NYC where budgets don't come out until
the summer for teachers not to know exactly what or when they're
teaching until the first day back.
&lt;/p&gt;

&lt;p&gt;
Things started at Hunter college last week but things are different
there. I was excited to my students but the overall energy isn't the
same. We're two weeks in and I still haven't seen most of my CS
colleagues. In the high school, everyone comes back at once. 
&lt;/p&gt;

&lt;p&gt;
In any event. It's an exciting time in what should be an exciting year
for CS teachers and students. 
&lt;/p&gt;

&lt;p&gt;
I'm not going to rehash everything that's going on since I'm sure most
readers already already know what's going on but I'll add one
thing. Many New York teachers need ongoing professional development -
CTLE hours. It seems that teachers in specific programs like New York
City's Software Engineering Pilot (SEP) have a number of PD
opportunities provided to them and there also seems to be a good
amount of PD at the entry level. 
&lt;/p&gt;

&lt;p&gt;
There doesn't seem to be much for the teacher ready for that next
step. 
&lt;/p&gt;

&lt;p&gt;
To address this, we'll be offering once a month sessions through
Hunter for CS teachers who are ready to move beyond the basics both in
content and pedagogy.
&lt;/p&gt;

&lt;p&gt;
The plan is to start some time in October.
&lt;/p&gt;

&lt;p&gt;
In the meantime to all the teachers meeting their students tomorrow -
have a great semester!!!!!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/starting-school-2018/</guid><pubDate>Tue, 04 Sep 2018 21:33:30 GMT</pubDate></item><item><title>Class Rules</title><link>http://cestlaz.github.io/posts/class-rules/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9826fe4" class="outline-2"&gt;
&lt;h2 id="org9826fe4"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9826fe4"&gt;
&lt;p&gt;
Classes started up again today so I thought I'd talk about my class
rules.
&lt;/p&gt;

&lt;p&gt;
I don't seem to recall many class rules in college. Sure, there was a
grading policy governing homework and the like but not much beyond
that. In K12 there are usually more. When you can talk, how you set up
your notebook, how to do homework, bathroom policy etc.
&lt;/p&gt;

&lt;p&gt;
For years, I've used the same set of class rules and I always talk
about the rules with my classes. 
&lt;/p&gt;

&lt;p&gt;
I don't have a lot of rules. 
&lt;/p&gt;

&lt;p&gt;
Just two.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Don't be a bum and don't be a jerk&lt;/b&gt;.
&lt;/p&gt;

&lt;img height="200" src="https://bamfstyle.files.wordpress.com/2016/04/dude6-main.jpg"&gt;

&lt;img height="200" src="https://cdn-images-1.medium.com/max/1600/0*x6Y-uVduUOWmYngr.jpg"&gt;


&lt;p&gt;
Not only are they good class rules, they're also good life rules. I
tell my classes that if they follow these two rules everything else
takes care of itself. 
&lt;/p&gt;

&lt;p&gt;
So, what do they mean?
&lt;/p&gt;

&lt;p&gt;
Being a bum means you're doing something detrimental to yourself.
&lt;/p&gt;

&lt;p&gt;
You don't hand in an assignment? You're being a bum. 
&lt;/p&gt;

&lt;p&gt;
Don't prepare for an exam? You're being a bum.
&lt;/p&gt;

&lt;p&gt;
Don't ask for an extension until right before a project's due because
you didn't even look at it until the night before? Bum.
&lt;/p&gt;

&lt;p&gt;
Being a jerk means you're doing something detrimental to someone
else. 
&lt;/p&gt;

&lt;p&gt;
If you're meeting a bunch of friends to see a movie and you leave them
waiting for you on a cold corned February since you can't bother to be
on time, you're being a jerk.
&lt;/p&gt;

&lt;p&gt;
Don't hold up your end of a group project? You're being a jerk. 
&lt;/p&gt;

&lt;p&gt;
Hold up the class by asking the same question that was just asked and
answered, not because you didn't understand but because you weren't
listening? You're being a jerk. 
&lt;/p&gt;

&lt;p&gt;
I have my students fill out an information form at the start of the
semester. I give them a day or two to do it but there is a
deadline. Don't fill it out on time and you're being a bum. You're
also being a jerk. Why? Because I use that list to set up my
grade book as well as mailing lists and other resources. If I don't
have the data from all my students I either have to wait on setting up
my systems or I have to go back later and manually add the
stragglers. Making more work for the teacher because you couldn't be
bothered to finish a two minute assignment? That falls under the "jerk" category.
&lt;/p&gt;

&lt;p&gt;
Every interaction makes an impression and even small actions can have
effects on people that you don't realize. 
&lt;/p&gt;

&lt;p&gt;
You do something the right way, people will notice. You do things that adversely affect
people? They'll notice that as well. I want my students to start to
become aware of how they act, how they affect the people around
them, and the reputations they build through small actions - both
positive and negative.
&lt;/p&gt;

&lt;p&gt;
We also talk about why I don't need to hear excuses when you violate
either of these rules. If you do things the right way - you don't act
like a bum or a jerk - you build your credibility. If at some point
later, something happens - you miss an assignment because a last
minute emergency - you've got the positive reputation so you don't
need an excuse. If you've been a bum all along, the excuse carries no
weight.
&lt;/p&gt;

&lt;p&gt;
None of this has anything to do with computer science but it does have
to do with our students growth as people so in many ways it's more
important. Do I make in impact with any of this? I can't be sure but
I think it's important enough to make the effort.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/class-rules/</guid><pubDate>Mon, 27 Aug 2018 22:57:25 GMT</pubDate></item><item><title>Artifacts Have Stories</title><link>http://cestlaz.github.io/posts/artifacts-have-stories/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org78a434b" class="outline-2"&gt;
&lt;h2 id="org78a434b"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org78a434b"&gt;
&lt;p&gt;
Earlier today I was asked about my avatar:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/hero-z.jpg" alt="hero-z.jpg" height="250"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I've been using it for most services for a few months now. It's an
image that I've had for ages. I started thinking about using it about
a year ago 
&lt;/p&gt;

&lt;p&gt;
So, what's the story?
&lt;/p&gt;

&lt;p&gt;
It was back in 1993. I had just started at Stuy. I taught some CS when
I was at Seward Park but at the time, I was teaching all math at
Stuy. Mostly Geometry to ninth graders but also a smattering of
Algebra 2 / Trig and Linear Algebra. 
&lt;/p&gt;

&lt;p&gt;
The math department had the fourth floor and some of the third but
since I was the new guy I taught most of my classes in the hinterlands
of the 7th and 8th floor. At least I had great views of the lower
Hudson and the Statue of Liberty.
&lt;/p&gt;

&lt;p&gt;
My math classes were somewhat more formulaic and structured than my
computer science classes would end up. Start with a "Do Now" while I
checked homework. Kids then present homework that they put on the
board. We then did the Do Now which hopefully led into the lesson. I
was never super strict but it was pretty structured. 
&lt;/p&gt;

&lt;p&gt;
In one class I had a young man, let's call him Charles since I don't
know if he's comfortable with my sharing his true identity. He sad in
the last two or three rows right next to the window on the south side
of classroom. Charles would constantly doodle throughout the
class. This never really bothered me. He was always prepared, did well
on all assessments and was also ready and able to take part in class
discussion regularly. 
&lt;/p&gt;

&lt;p&gt;
Apparently, his other teachers weren't as tolerant of his doodling. At
the end of the semester he gave me the picture. and said he really
appreciated me not hassling him about the doodling. I thanked him and
explained that since it didn't adversely affect his performance (and
might have helped) and didn't distract anyone else, why would I give
him a hard time
&lt;/p&gt;

&lt;p&gt;
The semester ended and I didn't think much more about it although once
I got my own office I put the picture in a frame and added it to my
collection of office trinkets. 
&lt;/p&gt;

&lt;p&gt;
Last year, now at Hunter, I was looking at the picture and I wondered
what ever happened to Charles. I hadn't seen him after he was in my
class as a freshman. I had started to teach CS and we started to developed our
cult so I didn't end up keeping in touch with many of my students from
those freshmen math classes.  It turned out I was able to find him on
Facebook. I don't think he remembered me but he accepted the friend
request and we caught up. His family moved out of NY after his
freshman year so it made even more sense that I never saw him again.
&lt;/p&gt;

&lt;p&gt;
I keep the picture because it's fun and also to remind me of the
circumstances under which I go it. I always appreciate it when a
student takes the time to say thanks even when they don't remember
anything about the class 30 years later. When I would get little gifts
during the holidays, if I'm being honest, I'll have to say that I
would frequently throw the gift card or present on the pile but I'd
keep and cherish the notes and letters. 
&lt;/p&gt;

&lt;p&gt;
Over the years, I accumulated quite a collection of esoteric from
former students. From the custom mouse pad with Dave, Spike, Igor, and
Oy on it to the Squirtle from Larry to Orion's pinhead, every artifact
has a story. They remind me of a person time and place. A connection I
had and in many cases I still have. It also creates a bridge to the
past both for me and my students.
&lt;/p&gt;

&lt;p&gt;
I've been derided for hanging t-shirts donated by former students from
their companies when I had my own classroom at Stuy:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/shirts-307.jpg" alt="shirts-307.jpg" height="200"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Those naysayers are wrong. Each shirt has a story. It could be Joy's
Apple shirt and how she agonized over her employment options, Pawel's
Google shirt and his adventures going from Bloomberg LP to the French
West Indies to now being a senior programmer at Google or a Digital
Ocean shirt from Ben and Moisey and the stories they evoke are far two
numerous to list. They create a history and perpetuate the
culture. Each has a story.
&lt;/p&gt;

&lt;p&gt;
Looking back, I'm glad that I've kept many mementos from the
past. The objects are incidental but the stories give context and
inspiration to current students while at the same time reminding me of
my past and my shared journey with so many of my students.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/artifacts-have-stories/</guid><pubDate>Fri, 24 Aug 2018 21:35:25 GMT</pubDate></item><item><title>Software Longevity</title><link>http://cestlaz.github.io/posts/software-longevity/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org49b9865" class="outline-2"&gt;
&lt;h2 id="org49b9865"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org49b9865"&gt;
&lt;p&gt;
Writing about &lt;a href="http://cestlaz.github.io/posts/rite-of-passage-projects/#.W3l-fxhKhhE"&gt;old projects&lt;/a&gt; got me thinking of my first programming gig
and software longevity. It was a part time after school / full time
summer job at Arcus-Simplex-Brown. I started in my senior year in high
school and continued through most of my first year in college. It
wasn't my first job - that was being a delivery boy at &lt;a href="http://videoroom.net/"&gt;Video Room&lt;/a&gt;, an
independent video store that's survived from the old VHS/Betamax days
through DVDs and is still, somehow or other, surviving in this day and
age of streaming video. My job at Arcus-Simplex-Brown was my first job
as a programmer. I got it through my buddy Ben who got it from one of
our math teachers at Stuy. Ben had found a job closer to home so
passed this one along to me.
&lt;/p&gt;

&lt;p&gt;
Arcus-Simplex-Brown was (is?) a ticket printing company
&lt;/p&gt;




&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://i.ebayimg.com/images/g/nxYAAOSwHUhaGYw3/s-l1600.png" alt="s-l1600.png" align="center" height="100"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://i.pinimg.com/originals/c1/f0/ec/c1f0ec2f524c9e3e65c5e8b50fc7226a.png" alt="c1f0ec2f524c9e3e65c5e8b50fc7226a.png" align="center" height="100"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
They also did tickets for sporting events like the Knicks and
Rangers at the Garden. More recently, this was 1983, they had started
selling computer printed tickets and that's where I came in. They had
a dot matrix line printer. Not the small kind used by personal
computer owners and small businesses:
&lt;/p&gt;

&lt;p align="center" height="100"&gt;
[[&lt;img src="https://global.epson.com/company/corporate_history/milestone_products/img/11_product.jpg" alt="11_product.jpg" align="center" height="100"&gt;
&lt;/p&gt;

&lt;p&gt;
Printers like the &lt;a href="https://global.epson.com/company/corporate_history/milestone_products/11_mx80.html"&gt;Epson MX 80&lt;/a&gt; pictured above had a print head that
moved across a line at a time much like a modern desktop ink jet
printer. The difference was that it had a print head that had a matrix
of pins which fired and hit an ink ribbon which left the ink
impression on the paper.
&lt;/p&gt;

&lt;p&gt;
Rather, they had a big heavy duty one where the print head went across
the entire width of the paper and it literally printed a line at a
time
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://cdn8.bigcommerce.com/s-a1x7hg2jgk/images/stencil/1280x1280/products/21296/120659/printronix-p5008-800-lpm-proline-series-5-line-matrix-printer-1.35__97003.1490181342.jpg" alt="printronix-p5008-800-lpm-proline-series-5-line-matrix-printer-1.35__97003.1490181342.jpg" align="center" height="100"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
and a computer attached. I think it was an old &lt;a href="https://en.wikipedia.org/wiki/North_Star_Computers"&gt;North Star&lt;/a&gt;
computer. It ran &lt;a href="https://en.wikipedia.org/wiki/CP/M"&gt;CP/M&lt;/a&gt; which was like a primitive version of
MS-DOS. 64K of memory  and
two floppy drives. It had a basic interpreter built in and they
also had a basic compiler. 
&lt;/p&gt;

&lt;p&gt;
They had a program that was supposed to print the tickets but it
didn't really work. My first job was to get it working, It was a HUGE
mess of a program. God knows how many lines of BASIC code with a few
gosubs and a ton of gotos. I don't think there were too many
comments. It didn't help that in addition to having to deal with
custom theater seating plans and ticket policies you had to know all
sorts of magical incantations to get the printer to do the special
fonts correctly and I don't recall us having a printer manual so it
all had to be divined from the non-working code. 
&lt;/p&gt;

&lt;p&gt;
On top of all this, the program was so complex that only the simplest
test cases could be run via the interpreter interactively. Any real
change had to go through the compiler and it took about 40 minutes to
compile the program. Whenever I wanted to take a long break, I set up
a compile. 
&lt;/p&gt;

&lt;p&gt;
Somehow or other, I got the thing to work. The code started as a mess
and I didn't improve it any I really had no idea what I was
doing. Still, it did work and we were able to reliably print tickets
for all sorts of things.
&lt;/p&gt;

&lt;p&gt;
I stopped working at Arcus-Simplex-Brown once I got a job at NYU. That
gig ultimately turned into a full time job which enabled me to work my
way through school. It was the right move but I had a great time and
learned a lot at Arcus.
&lt;/p&gt;

&lt;p&gt;
I didn't think much about the work I did at Arcus over the years. I
finished college, went to Goldman, then some consulting and ultimately
 teaching career.
&lt;/p&gt;

&lt;p&gt;
One day at Stuy, I noticed this:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/arcus-ticket.jpg" alt="arcus-ticket.jpg" align="center" height="400"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
This was now Spring 2012 - almost 30 years later. Judging from the dot
pattern  of the letters it looked like the same printer and was
probably the same program!!!!!!! I couldn't believe it. Stuy didn't
use these tickets back in my day so I was really surprised. It looked
like some horrible code I wrote as a kid was still being used
productively almost three decades later!!!!!! They could have
continued to use it because it basically worked or maybe because they
were afraid that touching it would break everything.
&lt;/p&gt;


&lt;p&gt;
I don't remember what the code looked like but know it was
horrible. If I had it, I'd be to embarrassed to share and that's saying
something. 
&lt;/p&gt;

&lt;p&gt;
The lesson of all this? You never know how long your code is going to
live. It might surprise you. Hopefully in a good way. 
&lt;/p&gt;

&lt;p&gt;
All the more reason to do better than I did and learn how to do it
right. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/software-longevity/</guid><pubDate>Sun, 19 Aug 2018 14:16:43 GMT</pubDate></item><item><title>Rite Of Passage Projects</title><link>http://cestlaz.github.io/posts/rite-of-passage-projects/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org047f8c6" class="outline-2"&gt;
&lt;h2 id="org047f8c6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org047f8c6"&gt;
&lt;p&gt;
JCS's &lt;a href="https://irreal.org/blog/?p=7414#comment-4045190612"&gt;post&lt;/a&gt; on Irreal today brought me back. It was about &lt;a href="https://en.wikipedia.org/wiki/Brief_(text_editor)"&gt;Brief&lt;/a&gt; which
was the editing hotness back in the day. I played with it a little
really mostly used Emacs clones for real work when I was stuck on
MS-DOS systems. Usually either &lt;a href="https://en.wikipedia.org/wiki/JOVE"&gt;JOVE&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Epsilon_(text_editor)"&gt;Epsilon&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
In the comments Jon reminded me about the &lt;a href="https://en.wikipedia.org/wiki/MKS_Toolkit"&gt;MKS Toolkit&lt;/a&gt;
which brought most everyday Unix tools to DOS along with a shell and
a version of Vi. I didn't use Vi much and I only used their shell
until I wrote my own. 
&lt;/p&gt;

&lt;p&gt;
This got me thinking about "rite of passage" projects. I was in
college in the mid to late 80s. It was the heyday of the
IBM-PC. Schools still used older time sharing systems like DEC-20s and
Vaxen but the PC was all the rage. The cool thing about them was that
you had full control and access to the machine and it was simple
enough to get your head around pretty much everything about it. The
downside was that MS-DOS was very limited and of course there was
little to no networking going on. 
&lt;/p&gt;

&lt;p&gt;
On the one hand, you could dive into the low level machine language
stuff very easily. Get Norton's book:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://covers.openlibrary.org/b/id/7446489-L.jpg" alt="7446489-L.jpg" align="center" height="250"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
and you're on your way. 
&lt;/p&gt;

&lt;p&gt;
On the other hand many student's graduated with no concept of time
sharing and the ramifications of sharing a system or resources were
foreign to many kids.
&lt;/p&gt;

&lt;p&gt;
Even though we always look back to the "good old days," in many ways
things weren't much different. I got a very strong background in
academic CS from NYU (Courant Institute) but just like today, there
was no real preparation for the real world.If you wanted to really develop your
coding chops you had to work on side projects.
&lt;/p&gt;

&lt;p&gt;
I seem to recall, a typical "rite of passage" side project was writing
your own shell. It didn't have to be anything as powerful as BASH or
ZSH but it would typically be much more powerful than DOS and much
more Unixy.
&lt;/p&gt;

&lt;p&gt;
I recall writing my first shell down in UC-49 of Tisch Hall when the
computer labs weren't busy. I wrote it in C which was what the cool
kids used back then. Specifically I used the &lt;a href="https://en.wikipedia.org/wiki/Mark_Williams_Company"&gt;Let's C&lt;/a&gt; compiler from the
Mark Williams company. This was before Turbo C 2.0 so Let's C was
pretty much the only game in town for a cheap Unix style C compiler
for DOS. There was also Run/C but that was a C interpreter, not a
compiler. I also used that to learn C. Funny story - I certainly
didn't know this at the time but Run/C was written by Peter
Brooks. Peter and I would later meet when he became my colleague at
Stuyvesant teaching CS and I now have the privilege of being able to
call him friend. I joke that I owe him ~ $100 for the interpreter from
back in the day.
&lt;/p&gt;

&lt;p&gt;
Since this was on DOS, I couldn't do real Unix style pipes like 
&lt;code&gt;cat file | sort | uniq -c | sort -n&lt;/code&gt; but I did simulate it with redirection and temporary
files. It also supported aliases, simple scripts and I think a few
other things. 
&lt;/p&gt;

&lt;p&gt;
I was pretty happy with it and used it for a couple of years. It was
also one of the first substantial programs I wrote. I learned a lot
from doing it.
&lt;/p&gt;

&lt;p&gt;
Another "rite of passage" program that was common back then was a
text based window library. Somethig like ncurses that would allow you
to make text based windows and menus on the text only screen. I also
wrote one of these and actually got to use it for a project when I
started working at Goldman. 
&lt;/p&gt;

&lt;p&gt;
I guess the third "rite of passage" project I remember was writing a C
compiler but that was different because it was for a class. It was a
significant project but the class didn't really help with writing a
large program in general - it was all about the compiler and all the
theory behind it. Great course but not one in software engineering.
&lt;/p&gt;

&lt;p&gt;
Nowadays the projects have changed. Text based windowing is long gone
and while I still think writing a shell is a useful and rewarding
exercise it's not scratching an itch the way it did back when we were
stuck on DOS. I guess writing a full stack web app is probably a
pretty typical one for students these days. 
&lt;/p&gt;

&lt;p&gt;
Any others?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>cs</category><category>emacs</category><category>programming</category><category>projects</category><guid>http://cestlaz.github.io/posts/rite-of-passage-projects/</guid><pubDate>Fri, 17 Aug 2018 19:18:11 GMT</pubDate></item><item><title>Early Code Reuse</title><link>http://cestlaz.github.io/posts/early-code-reuse/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org0e9d7c6" class="outline-2"&gt;
&lt;h2 id="org0e9d7c6"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0e9d7c6"&gt;
&lt;p&gt;
I've been following the tweets coming out of &lt;a href="https://icer.acm.org/"&gt;ICER2018&lt;/a&gt;. I've never been
to ICER but now am thinking about trying to get funding to go next
year. One set of tweets involved students writing or using APIs or
Libraries. This overlaps with Owen Astrachan's talk from this past
year's CSTA conference on sorting. I was planning on writing a post
about Owen's talk but I thought I'd leave it for the school year
closer to when sorting is typically covered.
&lt;/p&gt;

&lt;p&gt;
The points alluded to in the tweets go far deeper than can be
addressed in one blog post and are more suited to the sorting post
I'll write later on but I thought I'd share a lab that I stole from a
friend of mine years ago to try to get the kids to abstract code into
functions or methods early and to start to think about reusing blocks
of code.
&lt;/p&gt;

&lt;p&gt;
I've talked about abstracting out and reusing code &lt;a href="https://cestlaz.github.io/posts/refactoring"&gt;before&lt;/a&gt;, after
students have covered repetition but this lab
can be done even earlier.  Part of the motivation is the age old
problem of objects / functions / methods early or control structures
early. With o/f/m early kids think about decomposition, layers, and
abstractions but they don't have the tools to do a whole lot of
interesting things. On the other hand, with control structures early,
kids tend to get in the mindset of throwing everything in "main" at
the top level.
&lt;/p&gt;

&lt;p&gt;
This lab tries to get the kids abstracting out and reusing or sharing
code but doesn't require much more than methods or functions.
&lt;/p&gt;

&lt;p&gt;
The idea is to create an ASCII art robot or something similar. Of
course, this could also be done in a graphical environment:
&lt;/p&gt;


&lt;pre class="example"&gt;

     ######################
     #                    #
     #   XX          XX   #
     #                    #
     #       XXXXX        #
     #                    #
     ######################
              ###
              ###
          #############
          #           #
   ########           ########
          #           #
          #           #
          #           #
          #############
            ##      ##
            ##      ##
            ##      ##
_ 
&lt;/pre&gt;

&lt;p&gt;
This can easily be done with a series of output instructions or
possibly by building a string with embedded newlines.
&lt;/p&gt;

&lt;p&gt;
The interesting part comes when you have the student write different
functions for the parts of the robot - the head, body, and legs.
&lt;/p&gt;

&lt;p&gt;
Students end up with routines like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;generateHead&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"##########\n"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"#        #\n"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"#  X  X  #\n"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"#         #\n"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"###########\n"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then can generate their robot:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;generateRobot&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;generatehead&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;generateBody&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;generateLegs&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now for the fun part. Students can make a variety of heads, legs, and
bodies. Going further, introduce if statements and random numbers and
they can generate random robots:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;genRobot&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;generateHead1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;generateHead2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;generoateHead3&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* Generate the rest of the robot here */&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Not the most elegant code but this can be done VERY early when the
students don't know more advanced constructs and techniques.
&lt;/p&gt;

&lt;p&gt;
The class can also share robot "components" as long as there's a
simple code sharing mechanism - perhaps using &lt;a href="https://help.github.com/articles/about-gists/"&gt;gists&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Finally, this can be revisited if desired later on once the class has
covered more advanced language constructs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/early-code-reuse/</guid><pubDate>Thu, 16 Aug 2018 06:28:18 GMT</pubDate></item><item><title>Class Communications</title><link>http://cestlaz.github.io/posts/class-communications/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org70d5ae3" class="outline-2"&gt;
&lt;h2 id="org70d5ae3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org70d5ae3"&gt;
&lt;p&gt;
Right now I'm on vacation in Harrogate England. Natan  is here taking part in the International Gilbert and Sullivan
Festival so Devorah and I came along as tourists. Today we went to Knaresborough:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://cestlaz.github.io/img/knaresborough.jpg" alt="knaresborough.jpg" width="500px" align="center"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;The River Nidd as seen from Knaresborough Castle&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Normally when traveling I try to get everything in and that leaves me
pretty exhausted at the end of each day. Since this time we'll be here
for around two weeks, I'm trying a less hectic pace. Do some touring
along with some rest and relaxation. I actually gave myself the time
to do some recreational reading and just finished &lt;a href="https://www.amazon.com/Comeback-LeMond-American-Cycling-Legendary-ebook/dp/B075VDQD2W/ref=sr_1_1?ie=UTF8&amp;amp;qid=1533756774&amp;amp;sr=8-1&amp;amp;keywords=the+comeback+de+vise"&gt;The Comeback&lt;/a&gt; by
Daniel de Vise and have a big queue of what's next.
&lt;/p&gt;

&lt;p&gt;
I'm also going to try to get a blog post or two out.
&lt;/p&gt;

&lt;p&gt;
One thing I've been meaning to blog about for a while is class
communication and having seen &lt;a href="https://medium.com/bucknell-hci/how-i-use-slack-in-my-courses-a-3-year-reflection-888c7e742d04"&gt;this&lt;/a&gt; the other day, I guess it's time.
&lt;/p&gt;

&lt;p&gt;
In the article, Evan Peck talks about his experience using Slack as a
means of class communications and why he likes it. 
&lt;/p&gt;

&lt;p&gt;
Here's my take:
&lt;/p&gt;

&lt;p&gt;
Class communication takes many forms. It can be the dissemination of
information such as assignments or announcements, assignment collection,
presenting feedback either on assignments or in general, specific
interactions between the instructor and the students, group
discussions, and cross student interactions. 
&lt;/p&gt;

&lt;p&gt;
For sharing and collecting code as well as providing feedback, I like
using &lt;a href="https://cestlaz.github.io/posts/sigcse-2017-github-4/"&gt;Git and GitHub&lt;/a&gt;. I use it for homework, projects, sharing class
code - pretty much anything involving code or student work. That
leaves all of the basic communication platforms. The popular ones
include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The schools CMS â Moodle, Blackboard etc.&lt;/li&gt;
&lt;li&gt;Piazza or other forum platforms&lt;/li&gt;
&lt;li&gt;Slack and other chat platforms&lt;/li&gt;
&lt;li&gt;Facebook groups&lt;/li&gt;
&lt;li&gt;old school mail lists&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd22d836" class="outline-2"&gt;
&lt;h2 id="orgd22d836"&gt;Blackboard or your school's CMS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd22d836"&gt;
&lt;p&gt;
First up, Blackboard.
&lt;/p&gt;

&lt;p&gt;
Just no.
&lt;/p&gt;

&lt;p&gt;
In my experience, they're all slow and clunky and usually have an
awkward interface. I've always found them hard to navigate and use and
I find little value added.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4356ad1" class="outline-2"&gt;
&lt;h2 id="org4356ad1"&gt;Piazza and forum software&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4356ad1"&gt;
&lt;p&gt;
&lt;a href="https://piazza.com/"&gt;Piazza&lt;/a&gt; is a free to use discussion platform. Many schools use
it. Personally, I don't like Piazza but it does have some good points:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The Q&amp;amp;A format works pretty well.&lt;/li&gt;
&lt;li&gt;It allows anonymous posting which is sometimes desirable.&lt;/li&gt;
&lt;li&gt;You can look at participation reports&lt;/li&gt;
&lt;li&gt;TAs or instructors can approve questions and answers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There really is a lot to like about it but it doesn't work for
me. Personally, I don't like the interface but that wouldn't be the
deal breaker for me if my kids liked it. The deal breaker for me is
that kids have to actively go to the site. Yes, they can set their
preferences for alerts but if they don't and they don't check the site
regularly they'll miss things. This is a big deal to me. If I send out
something important I have no idea if or when people will check in on
it. For me personally, it's yet another site that I have to actively
and regularly check. 
&lt;/p&gt;

&lt;p&gt;
Another interesting thing I learned about Piazza has to do with
students honesty about platforms. Back at Stuy a colleague used Piazza
regularly and was getting good results with it - many active
students. I couldn't get as much buy in. The teacher told me that the
kids said they really liked the platform. A year or two later, I
surveyed the kids in my class â they were in his and other teachers
the previous year or two. I asked them about platforms they used and
how they felt about them. The results were that they used Facebook
groups on their own (I'll talk about them later) and used whatever
platform we required because we required it. Even if they said they
liked it, they really didn't.
&lt;/p&gt;

&lt;p&gt;
Last semester I set up a &lt;a href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; server for HunterCS. Discourse is
another discussion platform. I liked the
fact that I could run the server and had ownership of the data. I also
liked the way the forum software worked in general. On the other hand,
it had similar overall problems as Piazza.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org09ca62c" class="outline-2"&gt;
&lt;h2 id="org09ca62c"&gt;Slack&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org09ca62c"&gt;
&lt;p&gt;
A hot contender and the one that Mr. Peck uses is Slack. It's a chat
platform. It can be a separate app running on your phone or desktop or
you can use a web interface. It has channels for topics, can thread
discussions, it does alerts well and can integrate with tools like
calendars and GitHub. Just like with Piazza, there's a lot to like.
&lt;/p&gt;

&lt;p&gt;
My problem with Slack is that it's really for live communication not
asynchronous after hours communication. It works best when you're
working on something and you have your slack window open, you have a
question so you type it in and get immediate answers. It just doesn't
seem to work as well when you don't use it live. You can read the
messages posted since you last checked but it can be really hard to
follow unless people explicitly use the threading.
&lt;/p&gt;

&lt;p&gt;
Slack also shares the issue of being another site or application to
use but since it does alerts well it doesn't bother me as much.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8be1a9a" class="outline-2"&gt;
&lt;h2 id="org8be1a9a"&gt;Facebook groups&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8be1a9a"&gt;
&lt;p&gt;
Facebook groups seem to have been the student go to for a while
now. They create their own teacher/professor free student groups. I
think it's great that they create resources like this and as I tell
them, it's important for them to have a forum that's free from the
teacher's eyes. I mean, how can they plan that surprise party for me
on the class chatroom that I have access to :-). On the other hand,
Facebook groups have some downsides:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Not searchable or discoverable. I've seen kids only find out about
them at the end of semesters.&lt;/li&gt;
&lt;li&gt;In some cases, each year a new group is created so no institutional
memory develops.&lt;/li&gt;
&lt;li&gt;All the info stays in Facebook&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org809b542" class="outline-2"&gt;
&lt;h2 id="org809b542"&gt;Mail lists&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org809b542"&gt;
&lt;p&gt;
This all brings me to old school mailing lists. I've been using them
for decades and I keep coming back to them. Since they're just email,
no one has to check a separate app or site. Since they're email, they
support threading. Also as email, they can be public to the list or
private to just one or a few people.
&lt;/p&gt;

&lt;p&gt;
Again, they're not perfect - I can't easily set up long term
categories or channels like you can with Slack or Piazza and they
don't integrate with tools like calendars so as with everything else,
there's always some compromise.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org73631bf" class="outline-2"&gt;
&lt;h2 id="org73631bf"&gt;What do you use?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org73631bf"&gt;
&lt;p&gt;
I think I might try Slack again this semester if the students want to
go for it or maybe discourse. If they don't want to try those, then
it'll be back to mailing lists.
&lt;/p&gt;

&lt;p&gt;
What do all of you use? What are the strong and weak points of your
chosen platform and what would make the ideal platform for class
communication?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/class-communications/</guid><pubDate>Wed, 08 Aug 2018 19:13:11 GMT</pubDate></item><item><title>Getting Ready To Go Back</title><link>http://cestlaz.github.io/posts/getting-ready-to-go-back-2018/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org6f0fc9e" class="outline-2"&gt;
&lt;h2 id="org6f0fc9e"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6f0fc9e"&gt;
&lt;p&gt;
It's August 3rd and I've been giving a lot of thought to the start of
the semester. Normally I wouldn't think about the Fall term this
early. While I've been working on and off since last semester ended, I
don't officially "go back" until August 23rd with classes starting on
the 27th. The difference is that for the first time in forever we're
taking a longish trip between now and then.
&lt;/p&gt;

&lt;p&gt;
We're heading over to Harrogate England. We've never been but Natan's
taking part in the &lt;a href="http://www.gsfestivals.org/"&gt;International Gilbert and Sullivan Festival&lt;/a&gt; so we
figured we'd follow and play tourist while he was rehearsing and
otherwise doing the festival. I'm looking forward to the trip but
don't expect to get much prep work done while we're there.
&lt;/p&gt;

&lt;p&gt;
So, what's coming this semester?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga937396" class="outline-2"&gt;
&lt;h2 id="orga937396"&gt;Classes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga937396"&gt;
&lt;p&gt;
Hunter's honors program has grown big time so I'll be teaching two
classes instead of one this semester. One section will be our
pre-major CS course and one will be our CS1. I've done both before so
I won't need a lot of advance prep. Besides, I learned long ago that
no matter how much prep you do, everything changes once you get in the
classroom with a new batch of kids. Better just to have starter
material and a direction since everything's going to change after day
one anyway.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc6cccc2" class="outline-2"&gt;
&lt;h2 id="orgc6cccc2"&gt;Teacher Ed stuff&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc6cccc2"&gt;
&lt;p&gt;
On the teacher education program front, we've got to send a few items
back through governance for approval. Instead of having teachers in my
programs take a separate fieldwork course, I integrated it into my
curriculum development course. Another change that we have to make,
believe it or not, is to remove the words "for teachers" and "for
educators" from two of the pure computer science courses in the
program. Fortunately, I've done all the prep work needed to get these
going come late August. We're still planning on starting our first
cohort in the Spring.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7eb569b" class="outline-2"&gt;
&lt;h2 id="org7eb569b"&gt;Other stuff&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7eb569b"&gt;
&lt;p&gt;
Here's where a lot of the fun stuff is happening. Like last year, I'm
planning on doing a lot of outreach to high schools to talk about
colleges, tech, and Hunter. The outreach's &lt;a href="https://cestlaz.github.io/posts/hunter-cs-year-two/"&gt;really made a difference&lt;/a&gt;
but it take a lot of time since it's all about school visits. I'm
hoping to get to some parents association meetings as well this year. 
&lt;/p&gt;

&lt;p&gt;
I'm also planning a number of new things for our Hunter CS students
and I'd love to jump on the planning now but these things really have
to wait until the term starts. Here's some of what's on tap:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;A monthly CTLE session for CS teachers.&lt;/li&gt;
&lt;li&gt;A monthly tech talk / meetup at Hunter for CS students.&lt;/li&gt;
&lt;li&gt;Finding more and more internship opportunities for the kids.&lt;/li&gt;
&lt;li&gt;A series of open source workshops I'm coordinating with MongoDB.&lt;/li&gt;
&lt;li&gt;I'm hoping to work out some workshops for the kids with &lt;a href="https://www.redballoonsecurity.com/"&gt;Red Balloon
Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And a new tech mentoring program I'm hoping to get off the ground.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
I'm sure some of these plans will change. I think I'm pretty ready to
go for the fall but I'll still mull things over for the next few
weeks. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/getting-ready-to-go-back-2018/</guid><pubDate>Fri, 03 Aug 2018 18:23:32 GMT</pubDate></item><item><title>Two Faces of Project Based Learning</title><link>http://cestlaz.github.io/posts/two-faces-of-pbl/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-org9ba0c60" class="outline-2"&gt;
&lt;h2 id="org9ba0c60"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9ba0c60"&gt;
&lt;p&gt;
If one looks at my twitter feed they'll notice that in addition to CS
Ed, another issue I'm passionate about is school reform or rather
resistance to what is popularly known as and mislabeled as school reform. I'm anti
vouchers, charter schools, high stakes testing and more. One of the
heroes of this resistance is education historian Diane Ravitch. I'm a
big fan of Diane's and she's one of the true great champions of public
schools, kids, and teachers. She blogged today about how a superintendent on Long Island &lt;a href="https://dianeravitch.net/2018/07/27/new-york-district-on-long-island-shows-that-problem-based-curriculum-produces-better-results-than-test-prep/"&gt;replaced test
prep with project based learning&lt;/a&gt;. The post which talks about how this
superintendent improved test results  is worth a read. My only
quibble was that we shouldn't read anything into the results for a
variety of reasons including the fact that the group of students who
did the project based learning (PBL) units instead of test prep were
self selecting volunteers.
&lt;/p&gt;

&lt;p&gt;
One of the comments caught my eye: 
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
PBL is just another âstudent-centeredâ fadâ¦
&lt;/p&gt;

&lt;p&gt;
PBL operates on the myth of âtransferenceâ perpetuated by non-educators.
&lt;/p&gt;

&lt;p&gt;
â¦
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The comment continues on with a number of good points.
&lt;/p&gt;

&lt;p&gt;
Why am I writing about it here? Because PBL is a big CS Ed buzzword
and like most buzzwords there's both truth at the root of the hype and
hype that distorts the truth.
&lt;/p&gt;

&lt;p&gt;
When done right with the right group of kids, project based learning
can be wonderful but it takes a lot of time and effort. You can't just
set the kids loose to learn. You've got to train them to work
together, set up the project, as the teacher, you've got to know the
subject so as to know when to guide, when to tell, when to prod, and when to leave
them alone. Doing it right, at least for most students, is certainly
not giving them the instruction sheet and going off the check your
email. 
&lt;/p&gt;

&lt;p&gt;
On the other hand, it's easy to do it wrong. If you've got high
performing kids, they'll figure things out. If you've got a few high
performing kids, they can mask the fact that the majority of a group
isn't getting things. You might have an assignment where a kid figures
out a formula from discovered data and might be able to then use it to
make predictions but there's a good chance they won't understand why
it works or it's root derivation. That's where we need the teacher. 
&lt;/p&gt;

&lt;p&gt;
One of the dangers of bad PBL is that it's sexy. Kids are engaged and
it appears to work - particularly when the teacher doesn't know the
subject area. This is my great fear whenever I hear things about
teachers being "Lead Learners." Sure, when you're a converted
something else teacher moving into CS you won't know the subject
matter but that has to change over time. I've seen enough instances of
cases where teachers never develop their chops and just throw projects
at the kids augmented by scripted curricula or computer driver
content. The kids get through the class or program but are not
prepared for the next class or next level. I've seen this with the old
Cisco curriculum, any number of after school and summer programs -
some VERY highly regarded ones and I think we'll see more and more of
this in states that are pushing CSforAll without developing the
necessary pre and in service programs for their teachers. 
&lt;/p&gt;

&lt;p&gt;
Don't let my last two paragraphs leave you feeling that I'm anti
PBL. I'm not. It's great when done right and if you have thee time and
resources in your school and classes you should be using it when
appropriate. 
&lt;/p&gt;


&lt;p&gt;
If you want some pointers on how to get going in the right direction with PBL in CS  check out &lt;a href="https://www.amazon.com/Computer-Science-K-12-Imagining-possibilities-ebook/dp/B07DYDXBSH/ref=sr_1_1?ie=UTF8&amp;amp;qid=1532808363&amp;amp;sr=8-1&amp;amp;keywords=doug+bergman"&gt;this
book&lt;/a&gt; by my buddy Doug Bergman. It's a great getting started guide by a
great teacher. He's basically Mr. PBL and he does it right.  If you're new to CS you'll still need to learn content
and if you're new to teaching, you'll be developing your chops for
your entire career but it's a great resource to get you and then your
kids started on the journey.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>csed</category><category>pbl</category><category>pedagogy</category><guid>http://cestlaz.github.io/posts/two-faces-of-pbl/</guid><pubDate>Sat, 28 Jul 2018 19:59:45 GMT</pubDate></item></channel></rss>