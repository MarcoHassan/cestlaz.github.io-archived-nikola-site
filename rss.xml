<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>C'est la Z</title><link>http://cestlaz.github.io/</link><description>C'est la Z</description><atom:link href="http://cestlaz.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 03 Feb 2017 22:15:18 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>It's not one issue, it's the President and his enablers</title><link>http://cestlaz.github.io/posts/trump-issues/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Like many of my fellow bloggers and tweeters, I generally keep this
site clear of political issues with the exception of those that are
directly related to education. 
&lt;/p&gt;

&lt;p&gt;
Also, like many of my fellow bloggers and tweeters, this week has
provided a reason to break with that tradition.
&lt;/p&gt;

&lt;p&gt;
Many people, including some friends, all more eloquent than I have
already posted, tweeted, and Facebooked  about the behavior of our
President and government.
&lt;/p&gt;

&lt;p&gt;
Long time blogger &lt;a href="https://twitter.com/davewiner"&gt;Dave Winer&lt;/a&gt; put together &lt;a href="http://trumpstatus.org/"&gt;trumpstatus.org&lt;/a&gt; where he's
collecting many of the issues that we're all so alarmed with.
&lt;/p&gt;

&lt;p&gt;
I would add cabinet appointments to his list with my particular
personal concern over DeVos and the department of education. I've been
meaning to blog about that for a while - perhaps this week.
&lt;/p&gt;


&lt;p&gt;
My concern for today is something else. Every day, I see a new Trump
induced crisis and every day I see a different subset of my circles
respond. It's not quite as bad as:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
First they came for the Socialists, and I did not speak out—
Because I was not a Socialist.
&lt;/p&gt;

&lt;p&gt;
Then they came for the Trade Unionists, and I did not speak out—
Because I was not a Trade Unionist.
&lt;/p&gt;

&lt;p&gt;
Then they came for the Jews, and I did not speak out—
Because I was not a Jew.
&lt;/p&gt;

&lt;p&gt;
Then they came for me—and there was no one left to speak for me.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
People are indeed speaking out, but I am concerned that people
are going to rise up for their personal issue and when placated go
back to business as usual - this is &lt;b&gt;&lt;b&gt;NOT&lt;/b&gt;&lt;/b&gt; the time for business as
usual.
&lt;/p&gt;

&lt;p&gt;
With the ACA repeal, I saw concerns from my working class friends and
friends that work with lower earning populations. 
&lt;/p&gt;

&lt;p&gt;
Going into the DeVos hearing, mostly educators - real educators not
astroturf reformers. 
&lt;/p&gt;

&lt;p&gt;
With Friday's order, the whole tech community came out.
&lt;/p&gt;

&lt;p&gt;
Here's part of a thread by tech activist &lt;a href="https://twitter.com/anildash"&gt;Anil Dash&lt;/a&gt; calling out,
calling on, and crediting assorted tech players.
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;When net neutrality was the issue, Google, Twitter, Wikipedia, Reddit, Tumblr, etc. had a blackout, and it worked. This is far more grave.&lt;/p&gt;— Anil Dash (@anildash) &lt;a href="https://twitter.com/anildash/status/825414889908928517"&gt;January 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;


&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;A powerful, straightforward statement from the CEO of Box — another publicly-traded company. &lt;a href="https://t.co/wz5mQmTh6P"&gt;https://t.co/wz5mQmTh6P&lt;/a&gt;&lt;/p&gt;— Anil Dash (@anildash) &lt;a href="https://twitter.com/anildash/status/825470308463280130"&gt;January 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;
We have to remember that all these order, policies, appointments, and
plans are coming from the same place - Donald Trump and those
politicians that are enabling him.
&lt;/p&gt;

&lt;p&gt;
If he backs off on immigration, education issues remain, if he backs
off there, we still have ACA, if that eases up, what about Women's
rights and on and on.
&lt;/p&gt;

&lt;p&gt;
This means we all have to get involved and stay involved. 
&lt;/p&gt;

&lt;p&gt;
What have I been doing?
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;I finally joined the ACLU and set up a monthly donation.
&lt;/li&gt;
&lt;li&gt;I subscribed to &lt;a href="https://dailyaction.org"&gt;Daily Action&lt;/a&gt; so that I get a reminder each day of
someone I can call to make a difference.
&lt;/li&gt;
&lt;li&gt;I'm starting to accumulate my representatives phone numbers as I
make those calls and am trying to make at least a call a day to
remind our representatives who they work for.
&lt;/li&gt;
&lt;li&gt;Education and advocacy
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
And if you suggestions for me - please post them here.
&lt;/p&gt;

&lt;p&gt;
Thus ends my not business as usual post. What's going on in America is
not someone else's problem - it's all of our problem and we all have
to be active and vigilant to make it through tough times to come.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>policy</category><category>politics</category><guid>http://cestlaz.github.io/posts/trump-issues/</guid><pubDate>Sun, 29 Jan 2017 15:39:53 GMT</pubDate></item><item><title>Using Emacs - 27 - shell and eshell</title><link>http://cestlaz.github.io/posts/using-emacs-27-shell/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
While I use emacs for all all sorts of things, one of the things I
haven't done much is run shells from within emacs. I'm not sure
why. I'm a command line wonk and adding command line goodness and
emacs together seems like a natural. Maybe it's because back in the
day I spent a lot of time on MS-DOS systems. You could get a
reasonable Unixy facsimile using tools like the &lt;a href="https://en.wikipedia.org/wiki/MKS_Toolkit"&gt;MKS toolkit&lt;/a&gt; and I like
so many other young computer scientists wrote our own small shells
when we learned C so I used that insted of command.com. 
&lt;/p&gt;

&lt;p&gt;
In any event, I'm trying to use the shell within emacs more. 
&lt;/p&gt;

&lt;p&gt;
Here's a quick video showing both &lt;b&gt;&lt;b&gt;shell&lt;/b&gt;&lt;/b&gt;, which runs whatever your
default shell is in an emacs buffer and &lt;b&gt;&lt;b&gt;eshell&lt;/b&gt;&lt;/b&gt; which is emacs own
shell.
&lt;/p&gt;

&lt;p&gt;
I use a couple of packages to smooth over a couple of things.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/porterjamesj/virtualenvwrapper.el"&gt;Virtuelenvwrapper&lt;/a&gt; smooths things voer with the python virtaulenv and
virtualenvwrapper linux packages:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;virtualenvwrapper&lt;/span&gt;
      &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;:config&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;venv-initialize-interactive-shells&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;venv-initialize-eshell&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Only relevant if you use Python and virtualenvs.
&lt;/p&gt;

&lt;p&gt;
and more importantly, &lt;a href="https://github.com/killdash9/better-shell"&gt;better shell&lt;/a&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;better-shell&lt;/span&gt;
    &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"C-'"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;better-shell-shell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;better-shell-remote-open&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
cleans things up when using a termianl to connect to a remote machine.
&lt;/p&gt;

&lt;p&gt;
If you use a shell from within emacs as part of your workflow, please
post how, or better, make a video!!!!
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pjhRFMUxBB4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-27-shell/</guid><pubDate>Fri, 27 Jan 2017 13:00:26 GMT</pubDate></item><item><title>Essential topics for an intro course (not)</title><link>http://cestlaz.github.io/posts/essentials-for-an-intro-course/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
What essential topics should we teach in our intro courses? This seems
to be a recurring topic recently. 
&lt;/p&gt;

&lt;p&gt;
It can be an important topic but, unfortunately, too often, it seems
that people have too myopic a view
&lt;/p&gt;

&lt;p&gt;
I remember thinking about this years ago when APCS moved from C++ to
Java. Both languages have good and bad points both for practical and
educational use. A big loss in the move to Java was memory management
and the topics you could cover when memory issues arose. 
&lt;/p&gt;

&lt;p&gt;
Of course one might say that memory management shouldn't be in the
first year of CS. That's fine, as long as you put it back in somewhere
later on - something that didn't seem to happen universally. 
&lt;/p&gt;

&lt;p&gt;
That's the myopic view - far too few look at the overall picture.
&lt;/p&gt;

&lt;p&gt;
C++ to Java ended up in removing a topic. I've also seen the reverse. 
I was talking to a friend about intro topics. He told me that it was
critical to cover (insert topic here) in an intro course. Why, I
asked? Because the kids absolutely needed to know that material in the
third year course he was teaching.
&lt;/p&gt;

&lt;p&gt;
I pressed a bit – "how many kids actually remember (insert topic
here) and do you have to reteach anything." The answer - pretty much
no one remembered and he always retaught the subject.
&lt;/p&gt;

&lt;p&gt;
Did this mean that no one taught the topic in the earlier class?
Unlikely. More likely is that the topic was taught without purpose or
context, just because it was supposed to be taught and thus the
knowledge wasn't retained. Sounds to me like the topic wasn't in the
right place to begin with. Maybe it should have just been taught in
that 300 level course to begin with.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/alfredtwo?ref_src=twsrc%255Etfw"&gt;Alfred Thompson&lt;/a&gt; wrote a post earlier today asking about &lt;a href="http://blog.acthompson.net/2017/01/how-important-are-number-bases-for-pre.html"&gt;teaching
number bases&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Is it important? Maybe. Is it essential for an intro course? Probably
not. 
&lt;/p&gt;

&lt;p&gt;
Binary makes sense when you start talking about low level stuff. If
your intro course never gets close to the machine then why muddy the water
with a topic that's out of place. The topic probably won't be
appreciated and retention and understanding will be low. 
&lt;/p&gt;

&lt;p&gt;
If your intro course gets close to the machine or if you decide to
talk about compiled code or similar topics, you have an entre to talk
binary which leads to the convenience of hexadecimal. At Stuyvesant,
it was much more sensible to talk about number bases in our systems
course when we looked at C code in a debugger rather than in our intro
our AP course. 
&lt;/p&gt;

&lt;p&gt;
You also might work on some application where bitmaps or similar as
useful. That might be another good time to talk about number bases.
&lt;/p&gt;

&lt;p&gt;
Is it important for a CS person to understand binary and it's relation
to digital computers? Certainly. Does it have to be studied day one?
Certainly not.
&lt;/p&gt;

&lt;p&gt;
We need to keep an eye on the big picture. You can't get everything
into a single class or a single yea. The question to ask is - do our students know what they have to by the time they
leave our charge?
&lt;/p&gt;</description><category>curriculum</category><category>teaching cs</category><guid>http://cestlaz.github.io/posts/essentials-for-an-intro-course/</guid><pubDate>Mon, 09 Jan 2017 20:56:08 GMT</pubDate></item><item><title>Using Emacs - 26 - Google Calendar, Org Agenda</title><link>http://cestlaz.github.io/posts/using-emacs-26-gcal/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
A while ago I did a couple of videos on how I use org-capture
(&lt;a href="http://cestlaz.github.io/posts/using-emacs-23-capture-1/"&gt;part 1&lt;/a&gt;, &lt;a href="http://cestlaz.github.io/posts/using-emacs-24-capture-2/"&gt;part 2&lt;/a&gt;). I didn't get into a big part of org-capture - how I
use org-mode and capture to manage my calendar and todo lists.
&lt;/p&gt;

&lt;p&gt;
I was waiting to see if I liked my current setup - using &lt;a href="https://github.com/myuhe/org-gcal.el"&gt;org-gcal&lt;/a&gt; to
sync with my Google Calendar for appointments while using my main org
file for my todo list.
&lt;/p&gt;

&lt;p&gt;
Coincidentally, Rainer König recently put up a video on how he &lt;a href="https://www.youtube.com/watch?v=cIzzjSaq2N8&amp;amp;list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&amp;amp;index=33"&gt;syncs
with his Google calendar&lt;/a&gt;. He uses a different method than the one I
present in this video so make sure to check out his approach. In fact,
you should check out his entire &lt;a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE"&gt;series on org-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here's the code I use install org-gcal. The video steps through
setting up things on the Google side. You'll have to replace the
&lt;b&gt;&lt;b&gt;client ID&lt;/b&gt;&lt;/b&gt; and &lt;b&gt;&lt;b&gt;client secrets&lt;/b&gt;&lt;/b&gt; in the code below as well as use
your calendar name and whatever org file you want to sync with.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-check-signature&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;org-gcal&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-gcal-client-id&lt;/span&gt; &lt;span class="s"&gt;"oauth 2.0 client ID"&lt;/span&gt;
	&lt;span class="nv"&gt;org-gcal-client-secret&lt;/span&gt; &lt;span class="s"&gt;"client secret"&lt;/span&gt;
	&lt;span class="nv"&gt;org-gcal-file-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"zamansky@gmail.com"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I use these two hooks to sync things semi-automatically. The first
hook syncs whenever I load the agenda. Since this happens in the
background, if I just added something to my calendar, I might have to
reload the agenda by hitting &lt;b&gt;&lt;b&gt;r&lt;/b&gt;&lt;/b&gt; in the agenda view. 
&lt;/p&gt;

&lt;p&gt;
The second hook syncs with my Google calendar when I capture.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-agenda-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-gcal-sync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-capture-after-finalize-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-gcal-sync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are the rest of my settings. The org files I want to include in
my agenda views:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;gcal.org – the one I'm syncing
&lt;/li&gt;
&lt;li&gt;i.org – my main org file for todo items (the todo capture places
things in here)
&lt;/li&gt;
&lt;li&gt;schedule.org – my old schedule before I was syncing with
Google. Not active anymore. I should probably remove it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Also, my capture settings:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-agenda-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt;
			     &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt;
			     &lt;span class="s"&gt;"~/Dropbox/orgfiles/schedule.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="s"&gt;"Appointment"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;  &lt;span class="s"&gt;"~/Dropbox/orgfiles/gcal.org"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt; &lt;span class="s"&gt;"Link"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/links.org"&lt;/span&gt; &lt;span class="s"&gt;"Links"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %? %^L %^g \n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="s"&gt;"Blog idea"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Blog Topics:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%T"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt; &lt;span class="s"&gt;"To Do Item"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"To Do"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* TODO %?\n%u"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="s"&gt;"Note"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+headline&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/i.org"&lt;/span&gt; &lt;span class="s"&gt;"Note space"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%u"&lt;/span&gt; &lt;span class="nv"&gt;:prepend&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"j"&lt;/span&gt; &lt;span class="s"&gt;"Journal"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file+datetree&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/journal.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\nEntered on %U\n  %i\n  %a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"s"&lt;/span&gt; &lt;span class="s"&gt;"Screencast"&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/orgfiles/screencastnotes.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="s"&gt;"* %?\n%i\n"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;
The end result is that I can add an event in my Google calendar (or
accept a calendar invite) and it appears in my org-mode
agenda. Likewise, I can add a scheduled event using capture and it
will sync up to Google. I can also just add an event by editing
gcal.org but then would have to run &lt;b&gt;&lt;b&gt;org-gcal-post-at-point&lt;/b&gt;&lt;/b&gt; to send
it up to Google.
&lt;/p&gt;

&lt;p&gt;
Now, I can use bring up a regular agenda &lt;b&gt;&lt;b&gt;C-a a&lt;/b&gt;&lt;/b&gt;, my todo list &lt;b&gt;&lt;b&gt;C-a
t&lt;/b&gt;&lt;/b&gt; or by adding a custom agenda command:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-agenda-custom-commands&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="s"&gt;"Simple agenda view"&lt;/span&gt;
	 &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;agenda&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;alltodo&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
a combined agenda and todo view using &lt;b&gt;&lt;b&gt;C-a n&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;
Finally, there's &lt;a href="https://github.com/kiwanami/emacs-calfw"&gt;calfw&lt;/a&gt;. It's a nice tool to view calendars in
Google. I don't use it much anymore but it is nice:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;calfw&lt;/span&gt;
  &lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="c1"&gt;;TODO: &lt;/span&gt;
  &lt;span class="nv"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw-org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cfw:org-overwrite-default-keybinding&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw-ical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;mycalendar&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cfw:open-calendar-buffer&lt;/span&gt;
     &lt;span class="nv"&gt;:contents-sources&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;
      &lt;span class="c1"&gt;;; (cfw:org-create-source "Green")  ; orgmode source&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cfw:ical-create-source&lt;/span&gt; &lt;span class="s"&gt;"gcal"&lt;/span&gt; &lt;span class="s"&gt;"https://somecalnedaraddress"&lt;/span&gt; &lt;span class="s"&gt;"IndianRed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; devorah calender&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cfw:ical-create-source&lt;/span&gt; &lt;span class="s"&gt;"gcal"&lt;/span&gt; &lt;span class="s"&gt;"https://anothercalendaraddress"&lt;/span&gt; &lt;span class="s"&gt;"IndianRed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; google calendar ICS&lt;/span&gt;
      &lt;span class="p"&gt;)))&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cfw:org-overwrite-default-keybinding&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;calfw-gcal&lt;/span&gt;
	&lt;span class="nv"&gt;:ensure&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;
	&lt;span class="nv"&gt;:config&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'calfw-gcal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Better version:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vO_RF2dK7M0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
Old, bad version:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/RyNBtfu9AJ4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-26-gcal/</guid><pubDate>Thu, 05 Jan 2017 15:00:26 GMT</pubDate></item><item><title>BS? - BA - addendum</title><link>http://cestlaz.github.io/posts/ba-bs2/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Over on Facebook, a friend commented on my last post. He commented on
the rigor of BA vs BS degrees. The comment mentioned Physics and Math
degrees but I thought Id follow up a bit on CS degrees.
&lt;/p&gt;

&lt;p&gt;
I took a quick look at three computer science programs - Cornell,
UMich, and Queens College. Cornell because my daughter is there,
UMich, my son, and Queens College because it's a CUNY college that
offers both a BS and a BA in computer science.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Cornell&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Here's a link to Cornell's &lt;a href="https://www.cs.cornell.edu/undergrad/csmajor"&gt;CS Major page&lt;/a&gt;. Same requirements for a BA
through their School of Arts and Sciences as for their BS in the
School of Engineering. The differences are limited to the fundamental
school differences. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;University of Michigan&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Info on their program can be found &lt;a href="http://www.eecs.umich.edu/eecs/undergraduate/cs_lsa_vs_engr.html"&gt;here&lt;/a&gt;. They note:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Identical Core Computer Science requirements
&lt;/li&gt;
&lt;li&gt;Similar Senior Design experiences
&lt;/li&gt;
&lt;li&gt;Identical Upper Level Elective requirement
&lt;/li&gt;
&lt;li&gt;Slight difference in Flexible Technical Elective hours and list
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Again, the difference is fundamentally in the base school
requirements.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Queens College&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
&lt;a href="http://www.cs.qc.edu/index-1.html"&gt;This page&lt;/a&gt; has links to degree requirements. THe page states that "The
B.S. augments the B.A. with more computer science, mathematics, and
experimental laboratory courses" but when you look at the actual &lt;a href="http://www.cs.qc.edu/undergrad/BS.pdf"&gt;BS&lt;/a&gt;
and &lt;a href="http://www.cs.qc.edu/undergrad/BA.pdf"&gt;BA&lt;/a&gt; requirements, they're the same. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
In all cases, the differences are
the fundamental difference between the extra liberal arts and
distribution requirements in an Arts and Sciences school and the extra
science and math courses required of an engineering school.
&lt;/p&gt;

&lt;p&gt;
Which is better? It all depends. For me, personally, the liberal arts
education is very important. For others, it will be the deep dive into
science. Maybe more phyics will better enable a CS major to solve some
technical problem but then again, maybe a culteral anthropology course
will help a CS major see the world and people differently and also
color her work.
&lt;/p&gt;

&lt;p&gt;
To my original point - the important thing is that we do a better job
informing guidance counselors, teachers, and high school students as
to the possibilities so that they can make informed decisions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/ba-bs2/</guid><pubDate>Mon, 02 Jan 2017 15:46:51 GMT</pubDate></item><item><title>BS? - BA</title><link>http://cestlaz.github.io/posts/ba-bs/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;blockquote&gt;
&lt;p&gt;
I didn't know Hunter College had computer science.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I heard that refrain more than once during my fall visits to high
schools. Part of the reason for this is due to Hunter CS's low
profile and small size in spite of its high quality.
&lt;/p&gt;

&lt;p&gt;
Part, though, was also because of some misconceptions about Computer
Science programs. I'd hear things like "but they only offer a BA not a
BS," or "but Hunter isn't an engineering school."
&lt;/p&gt;

&lt;p&gt;
I've come to realize that we have to do a better job educating kids as
to what can come next after high school.
&lt;/p&gt;

&lt;p&gt;
I'm not entirely sure why many assume that CS has to be under
engineering. When I was applying to college, most of my choices were
Arts and Science schools offering BAs in CS. Maybe it's because people don't
disagregate STEM subjects. Even though it's not a computer science
program many schools seem to associate FIRST robotics with computer
science. Likewise any class with even a modicum of coding becomes
computer science and as makerspaces and robotics are a percieved as
easy entry STEM classes that appear to be CS (something I'll rant
about in a future post), CS becomes associated with engineering.
&lt;/p&gt;

&lt;p&gt;
It's easy enough to explain the difference between a BA in CS and a BS
in CS and it's equally easy to show that you can have tremendous
success either way. All you have to do to show the validity of a BA in
CS is look at succesful people from places like NYU, Courant, Columbia
College (as opposed to Columbia Engineering), Cornell school of Arts
and Sciences, etc to balance successful people from the engineering schools.
&lt;/p&gt;

&lt;p&gt;
As I'm sure you know, I'm pretty high on Hunter CS and it's certainly
one of the best value CS educations out there. Personally, I'm a big believer in a
liberal arts education but in any case, as a community we have to do a
better job educating the high schools so that graduating seniors are
best informed when deciding on their futures.
&lt;/p&gt;</description><category>cs</category><category>education</category><guid>http://cestlaz.github.io/posts/ba-bs/</guid><pubDate>Mon, 02 Jan 2017 01:14:25 GMT</pubDate></item><item><title>Using Emacs - 25 - Tramp</title><link>http://cestlaz.github.io/posts/using-emacs-25-tramp/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Today's video talks about using emacs &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;Tramp&lt;/a&gt; mode.
&lt;/p&gt;

&lt;p&gt;
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.
&lt;/p&gt;

&lt;p&gt;
To edit a file on a machine &lt;b&gt;&lt;b&gt;www.cstuy.org&lt;/b&gt;&lt;/b&gt; I would first
&lt;b&gt;&lt;b&gt;find-file&lt;/b&gt;&lt;/b&gt; using &lt;b&gt;&lt;b&gt;C-c C-f&lt;/b&gt;&lt;/b&gt; and then for the file name to open:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:www.cstuy.org:/home/zamansky/sc/testfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
this would open the file &lt;b&gt;&lt;b&gt;testfile&lt;/b&gt;&lt;/b&gt; in the absolute directory
&lt;b&gt;&lt;b&gt;/home/zamansky/sc&lt;/b&gt;&lt;/b&gt;. If my username on the remote machine is
different:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:username@www.cstuy.org:/home/zamansky/sc/testfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And I can also work relative to my home directory:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:username@www.cstuy.org:sc/testfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If I just hit enter after the machine name and &lt;b&gt;&lt;b&gt;:&lt;/b&gt;&lt;/b&gt; - 
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:username@www.cstuy.org:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I end up in a dired buffer on the remote machine.
&lt;/p&gt;

&lt;p&gt;
Likewise if I run a &lt;b&gt;&lt;b&gt;shell&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;eshell&lt;/b&gt;&lt;/b&gt; in the tramp buffer, it
will run the shell on the remote machine. In the video I showed how
shell didn't work because locally, I'm configured to use zsh and I
don't have zsh installed remotely. Eshell, however, worked fine.
&lt;/p&gt;

&lt;p&gt;
Using tramp in this way gives us all of the power of our local emacs
configuration to edit a file on a remote machine.
&lt;/p&gt;

&lt;p&gt;
You can also use tramp to edit local files as root using sudo:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo::/tmp/sc/rootfile
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note the double colon. 
&lt;/p&gt;

&lt;p&gt;
Finally, you can do the double-whammy - remote root editing:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh::www.cstu.org|sudo:www.cstuy.org:/home/zamansky/sc/rootfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
If you use zsh and any of this freezes, just do a search on "zsh
tramp" and the top couple of hits will tell you what to add to your
configuration files to fix things.
&lt;/p&gt;

&lt;p&gt;
Finally, I mentioned in the video that I don't use tramp all that much
anymore. That's mostly because I don't do much remote editing
anymore. I used it more when I was administering a number of machines
at Stuyvesant. 
&lt;/p&gt;

&lt;p&gt;
I still use it periodically, but I also use &lt;a href="https://github.com/libfuse/sshfs"&gt;sshfs&lt;/a&gt;, a Linux tool (which
may be available for other operating systems) that allows me to mount
a directory tree from a remote machine and use it on my local machine.
&lt;/p&gt;



&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Iqh50fgbIVk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;




&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Video series overview page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://cestlaz.github.io/stories/emacs"&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;&lt;/a&gt;&lt;a href="https://github.com/zamansky/using-emacs/tree/master"&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>tools</category><guid>http://cestlaz.github.io/posts/using-emacs-25-tramp/</guid><pubDate>Mon, 26 Dec 2016 15:00:26 GMT</pubDate></item><item><title>Being productive between terms</title><link>http://cestlaz.github.io/posts/between-semesters/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
We're now at the end of my first semester at Hunter. The Spring term
classes don't start until the end of January. I've got an assortment
of projects to work on but some of the students should have a nice
block of relatively free time.
&lt;/p&gt;

&lt;p&gt;
I  wanted to share some recommendations on things to explore with a
few student groups and thought it would be easier to write those
recommendations down here once and then just share a link.
&lt;/p&gt;

&lt;p&gt;
So, here we go.
&lt;/p&gt;

&lt;p&gt;
Much of the first few CS classes at Hunter and elsewhere focus on the
fundamentals of programming, data structures, and algorithms. It's all
good stuff but students want to supplement that classroom knowledge
with some practical skills.
&lt;/p&gt;

&lt;p&gt;
I recommend playing with a language like Python that can be used in
all sorts of domains. If you haven't played with it, check it out.
&lt;/p&gt;

&lt;p&gt;
I like &lt;a href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff with Python&lt;/a&gt; as a nice, free, online
text.
&lt;/p&gt;

&lt;p&gt;
I'd also recommend learning a web platform like &lt;a href="http://flask.pocoo.org"&gt;Flask.&lt;/a&gt; Flask is a web
framework in Python. The web site has a nice getting started guide and
tutorial but here are a couple of other great learning Flask
resources:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/realpython/discover-flask"&gt;Discover Flask&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploreflask.com/en/latest/"&gt;Explore Flask&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Once armed with the above, you'll be well positioned to work on a
variety of your own projects, enter hackathons, and more.
&lt;/p&gt;

&lt;p&gt;
I'm also a big believer in using good tools. I love the emacs text
editor. Why not spend some time going through the web series on &lt;a href="http://cestlaz.github.io/stories/emacs"&gt;Using
Emacs&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Finally, if you're not using Git, you should be. Here are a couple of
playlists to get you started:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLq0VzNtDZbe9QLq8YCizFN2TVWvlLjrvX"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/playlist?list=PLq0VzNtDZbe9QLq8YCizFN2TVWvlLjrvX"&gt;https://www.youtube.com/playlist?list=PLq0VzNtDZbe9QLq8YCizFN2TVWvlLjrvX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLoGsJC6ZzSwm959Do9ZgZM9U-xp27NEaQ"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/playlist?list=PLoGsJC6ZzSwm959Do9ZgZM9U-xp27NEaQ"&gt;https://www.youtube.com/playlist?list=PLoGsJC6ZzSwm959Do9ZgZM9U-xp27NEaQ&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And if you haven't done so already, head over to &lt;a href="https://education.github.com/pack"&gt;Github Education&lt;/a&gt; and
sign up for a student developer pack.
&lt;/p&gt;

&lt;p&gt;
So, there are a few recommendations on things to work on before the
next term begins.
&lt;/p&gt;

&lt;p&gt;
Enjoy
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://cestlaz.github.io/posts/between-semesters/</guid><pubDate>Wed, 21 Dec 2016 01:13:00 GMT</pubDate></item><item><title>It gets easier (or advent of code 2016 day 19)</title><link>http://cestlaz.github.io/posts/it-gets-easier-advent19/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
Today's &lt;a href="http://adventofcode.com/2016/day/19"&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href="http://mathworld.wolfram.com/JosephusProblem.html"&gt;Josephus
problem&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
I recalled that there was a formula to figure out the 
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.
&lt;/p&gt;

&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href="http://adventofcode.com/2016/day/19"&gt;problem description&lt;/a&gt; for details).
&lt;/p&gt;

&lt;p&gt;
For both solutions I coded up a circular doubly linked list:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;make_ring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can see my complete solutions &lt;a href="https://github.com/zamansky/advent2016/blob/master/day19.cpp"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I was thinking about how I wrote the code – I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar. 
&lt;/p&gt;

&lt;p&gt;
I'm not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven't really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat. 
&lt;/p&gt;

&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn't fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.
&lt;/p&gt;

&lt;p&gt;
All of this is to say that it does get easier.
&lt;/p&gt;

&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href="http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA"&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.
&lt;/p&gt;

&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.
&lt;/p&gt;</description><category>coding</category><category>cs</category><guid>http://cestlaz.github.io/posts/it-gets-easier-advent19/</guid><pubDate>Tue, 20 Dec 2016 00:56:09 GMT</pubDate></item><item><title>A couple of things I learned from Danny Jaye</title><link>http://cestlaz.github.io/posts/danny_jaye/</link><dc:creator>Mike Zamansky</dc:creator><description>&lt;p&gt;
I got an email from my good friend and mentor this weekend. Danny
Jaye, after 45 years, is finally retiring for real.
&lt;/p&gt;

&lt;p&gt;
Danny, the Maestro, or Doc, as we sometimes called him spent most of
his career at Stuyvesant. First as a math teacher, then math
chair. Danny also spent time as the director of the Bergen Academies
and his last few years as the Chief Academic Officer at Solomon
Schecter in Bergen.
&lt;/p&gt;

&lt;p&gt;
Danny's always been a master teacher - back in the day, he managed to
teach Calculus to my brother - no small feat and as a department and
school leader, he has a great eye for collecting and developing
talent. Over the years, Danny's influenced a number people who've gone
on to be education leaders of one form or another.
&lt;/p&gt;

&lt;p&gt;
For me, Danny was and continues to be a great mentor. I can't tell you
how much I learned - much of it on our 5:00am bike rides from Stuy up
to the GW bridge and back.
&lt;/p&gt;

&lt;p&gt;
Far too much to share here but let me drop a couple of thoughts:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It doesn't cost anything to be nice.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
and the related:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It's easy to be nice on a good day.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The former talking about treating everyone with respect regardless of
station and the latter a reminder not to forget it on a bad day. Also a
valuable reminder when sizing up new school leaders.
&lt;/p&gt;

&lt;p&gt;
We'd spend hours discussing class, departmental, and school
strategies. How to develop a program with safety nets, how to separate
real value from the hypes and how to always remember that it's the
student first and the big picture, not just our little corner of the world.
&lt;/p&gt;


&lt;p&gt;
It feels weird for me to know that my go to guy on Ed stuff is no
longer working and is now moving towards a life of leisure.
&lt;/p&gt;

&lt;p&gt;
It doesn't change anything other than a reminder to me that I'm now
one of the more senior people in my circles and that now Danny can
mock me for having to go in to the office every day.
&lt;/p&gt;

&lt;p&gt;
So, here's to you Danny – one of the best education people out
there. 
&lt;/p&gt;</description><guid>http://cestlaz.github.io/posts/danny_jaye/</guid><pubDate>Sun, 18 Dec 2016 20:49:04 GMT</pubDate></item></channel></rss>